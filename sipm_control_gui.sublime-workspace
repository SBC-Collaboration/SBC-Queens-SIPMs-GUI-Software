{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Plot",
				"PlotIndicator"
			],
			[
				"forma",
				"format_string"
			],
			[
				"X",
				"XAxisLabel"
			],
			[
				"clear",
				"clear_data"
			],
			[
				"PipeEnd",
				"PipeEndType"
			],
			[
				"SiPM",
				"SiPMAcquisitionData"
			],
			[
				"_slowda",
				"_slowdaq_pipe_end"
			],
			[
				"_teens",
				"_teensy_pipe_end"
			],
			[
				"is_samev",
				"is_same_v"
			],
			[
				"INdica",
				"IndicatorTypes"
			],
			[
				"Indicat",
				"IndicatorTypes"
			],
			[
				"Indi",
				"IndicatorTypes"
			],
			[
				"Indicato",
				"IndicatorTypes"
			],
			[
				"PlotType",
				"PlotTypeEnum"
			],
			[
				"BR",
				"BREAKDOWN_ROUTINE_ONGOING"
			],
			[
				"caen",
				"caenEvent"
			],
			[
				"_cu",
				"_current_voltage"
			],
			[
				"Br",
				"BreakdownRoutineState"
			],
			[
				"_vol",
				"_has_voltage_changed"
			],
			[
				"_cae",
				"_caen_port"
			],
			[
				"_ca",
				"_caen_port"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"_pro",
				"_processing_evts"
			],
			[
				"Bre",
				"BreakdownRoutine"
			],
			[
				"make",
				"make_shared"
			],
			[
				"_l",
				"_latest_breakdown_voltage"
			],
			[
				"_has",
				"_has_finished"
			],
			[
				"has",
				"hasNewGainMeasurement"
			],
			[
				"getCur",
				"getCurrentVoltage"
			],
			[
				"c",
				"cgui_state"
			],
			[
				"_port",
				"_port_mutex"
			],
			[
				"mill",
				"milliseconds"
			],
			[
				"arma",
				"armadillo_helpers"
			],
			[
				"main",
				"main_loop_state"
			],
			[
				"cell",
				"CellNumber"
			],
			[
				"Model",
				"ModelConstants"
			],
			[
				"Num",
				"NumberOfGroups"
			],
			[
				"CAEN",
				"CAENTabs"
			],
			[
				"namesp",
				"namespace"
			],
			[
				"name",
				"namespace"
			],
			[
				"off",
				"offColor"
			],
			[
				"node_",
				"node_view"
			],
			[
				"Pelte",
				"PeltierPidUpdatePeriod"
			],
			[
				"Teensy",
				"TeensySystemPars"
			],
			[
				"Get",
				"GetSystemParameters"
			],
			[
				"Pel",
				"PeltierPidRTD"
			],
			[
				"photon",
				"photon_hits_tree"
			],
			[
				"nhi",
				"nhit_prime"
			],
			[
				"total",
				"totalbiny"
			],
			[
				"G4",
				"G4cout"
			],
			[
				"pa",
				"particleType"
			],
			[
				"Cr",
				"CreateNtupleIColumn"
			],
			[
				"_",
				"_histo_length"
			],
			[
				"_hi",
				"_histo_depth"
			],
			[
				"_min",
				"_min_val"
			],
			[
				"log",
				"logEnergy"
			],
			[
				"_max",
				"_max_val"
			],
			[
				"_his",
				"_histo_depth"
			],
			[
				"_hiso",
				"_histo_length"
			],
			[
				"his",
				"_histo_depth"
			],
			[
				"_histo",
				"_histo_length"
			],
			[
				"ene",
				"energyParticle"
			],
			[
				"_ci",
				"_circle_orientation"
			],
			[
				"verbo",
				"_verbosity"
			],
			[
				"temp",
				"temp0C_mod"
			],
			[
				"time",
				"time0C"
			],
			[
				"_get",
				"_get_reflectivity"
			],
			[
				"tyve",
				"tyvek_energies"
			],
			[
				"df",
				"df2000ma_wave"
			],
			[
				"mini",
				"miniclean_reflectivies"
			],
			[
				"min",
				"miniclean_energies"
			],
			[
				"pmt",
				"pmtsEff"
			],
			[
				"_ref",
				"_reflectroCover"
			],
			[
				"_refl",
				"_reflectorMaterial"
			],
			[
				"Stee",
				"SteelOP"
			],
			[
				"stee",
				"steel_properties"
			],
			[
				"DF",
				"DF2000MA_pt"
			],
			[
				"DF2",
				"DF2000MAReflector"
			],
			[
				"diele",
				"dielectric_metal"
			],
			[
				"of",
				"offsetY"
			],
			[
				"out",
				"out_data"
			],
			[
				"G4OpBounds",
				"G4OpBoundaryProcess"
			],
			[
				"h",
				"hfile"
			],
			[
				"tyvek",
				"tyvek_pt"
			],
			[
				"inc",
				"INCHES_TO_CM"
			],
			[
				"_moteh",
				"_motherPhys"
			],
			[
				"_world",
				"_worldPhys"
			],
			[
				"_main",
				"_mainPhys"
			],
			[
				"_da",
				"_daughter"
			],
			[
				"_mother",
				"_motherConstruction"
			],
			[
				"water",
				"water_tank_log-"
			],
			[
				"pico_ER",
				"PICO_reflector_log"
			],
			[
				"Diff",
				"DiffuseReflector"
			],
			[
				"reflec",
				"reflector_energies"
			],
			[
				"Add",
				"AddProperty"
			],
			[
				"wate",
				"water_energies"
			],
			[
				"PVC",
				"PVCOP"
			],
			[
				"string",
				"string\tstandard header"
			],
			[
				"vector",
				"vector\tstandard header"
			],
			[
				"eneg",
				"energies"
			],
			[
				"Find",
				"FindOrBuildMaterial"
			],
			[
				"trans",
				"transform"
			],
			[
				"anal",
				"analysisManager"
			],
			[
				"PMT",
				"PMTDISTRIBUTION"
			],
			[
				"G4Tr",
				"G4Transform3D"
			],
			[
				"tran",
				"transMatrix"
			],
			[
				"radi",
				"radiusCylinder"
			],
			[
				"top_ta",
				"top_tank_height"
			],
			[
				"water_t",
				"water_tank_phys"
			],
			[
				"pico",
				"pico_tubes_log"
			],
			[
				"DEAP_",
				"DEAP_water_tank_log"
			],
			[
				"con",
				"contact_phys"
			],
			[
				"SetVis",
				"SetVisAttributes"
			],
			[
				"flo",
				"floor_box"
			],
			[
				"STPo",
				"STPosZ"
			],
			[
				"STP",
				"STPosY"
			],
			[
				"nori",
				"norite_box"
			],
			[
				"world",
				"worldWidth"
			],
			[
				"new",
				"newPulse"
			],
			[
				"F",
				"FillNtupleIColumn"
			],
			[
				"Cre",
				"CreateNtupleIColumn"
			],
			[
				"ana",
				"analysisManager"
			],
			[
				"_energy",
				"_energyLogPrecision"
			],
			[
				"Gener",
				"GenerateAngle"
			],
			[
				"dn",
				"dndthetas"
			],
			[
				"_dn",
				"_dn_dth"
			],
			[
				"thet",
				"thetai"
			],
			[
				"ener",
				"energies"
			]
		]
	},
	"buffers":
	[
		{
			"file": "include/sbcqueens-gui/imgui_helpers.hpp",
			"settings":
			{
				"buffer_size": 26297,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					444,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAATyYAAAAAAABPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACJPAAAAAAAAI08AAAAAAAAAAAAAI08AAAAAAAAkTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIk8AAAAAAAAiTwAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"paste",
					null,
					"AQAAACRPAAAAAAAA4E8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJE8AAAAAAAAkTwAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"left_delete",
					null,
					"AQAAAC1PAAAAAAAALU8AAAAAAAARAAAASW5kaWNhdG9yVHlwZXMgVCw",
					"AQAAAAAAAAABAAAAPk8AAAAAAAAtTwAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"left_delete",
					null,
					"AQAAAC1PAAAAAAAALU8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAALk8AAAAAAAAuTwAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "Plot"
					},
					"BQAAALFPAAAAAAAAsk8AAAAAAAAAAAAAsk8AAAAAAACyTwAAAAAAAAkAAABJbmRpY2F0b3KyTwAAAAAAALNPAAAAAAAAAAAAALNPAAAAAAAAtE8AAAAAAAAAAAAAtE8AAAAAAAC1TwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsU8AAAAAAAC6TwAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert_completion",
					{
						"completion": "PlotIndicator",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "PlotIndicator"
					},
					"AgAAALFPAAAAAAAAsU8AAAAAAAAEAAAAUGxvdLFPAAAAAAAAvk8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtU8AAAAAAAC1TwAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					3,
					"left_delete",
					null,
					"AwAAAMFPAAAAAAAAwU8AAAAAAAABAAAAIMBPAAAAAAAAwE8AAAAAAAABAAAALL9PAAAAAAAAv08AAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAAwk8AAAAAAADCTwAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "sizew"
					},
					"BQAAAEJPAAAAAAAAQ08AAAAAAAAAAAAAQ08AAAAAAABETwAAAAAAAAAAAABETwAAAAAAAEVPAAAAAAAAAAAAAEVPAAAAAAAARk8AAAAAAAAAAAAARk8AAAAAAABHTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQk8AAAAAAABCTwAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAAEZPAAAAAAAARk8AAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAR08AAAAAAABHTwAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": ")_"
					},
					"AgAAAEZPAAAAAAAAR08AAAAAAAAAAAAAR08AAAAAAABITwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARk8AAAAAAABGTwAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					2,
					"left_delete",
					null,
					"AgAAAEdPAAAAAAAAR08AAAAAAAABAAAAX0ZPAAAAAAAARk8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAASE8AAAAAAABITwAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "_t"
					},
					"AgAAAEZPAAAAAAAAR08AAAAAAAAAAAAAR08AAAAAAABITwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARk8AAAAAAABGTwAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEhPAAAAAAAASU8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASE8AAAAAAABITwAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": " size_t,"
					},
					"CAAAAElPAAAAAAAASk8AAAAAAAAAAAAASk8AAAAAAABLTwAAAAAAAAAAAABLTwAAAAAAAExPAAAAAAAAAAAAAExPAAAAAAAATU8AAAAAAAAAAAAATU8AAAAAAABOTwAAAAAAAAAAAABOTwAAAAAAAE9PAAAAAAAAAAAAAE9PAAAAAAAAUE8AAAAAAAAAAAAAUE8AAAAAAABRTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASU8AAAAAAABJTwAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFFPAAAAAAAAUk8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUU8AAAAAAABRTwAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"paste",
					null,
					"AgAAAEJPAAAAAAAAZk8AAAAAAAAAAAAAZk8AAAAAAABmTwAAAAAAAA4AAABzaXplX3QsIHNpemVfdA",
					"AQAAAAAAAAABAAAAUE8AAAAAAABCTwAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "\n\t\t"
					},
					"AwAAAEJPAAAAAAAAQ08AAAAAAAAAAAAAQ08AAAAAAABHTwAAAAAAAAAAAABHTwAAAAAAAEtPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQk8AAAAAAABCTwAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEtPAAAAAAAATE8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS08AAAAAAABLTwAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF9PAAAAAAAAYE8AAAAAAAAAAAAAYE8AAAAAAABpTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX08AAAAAAABfTwAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHxPAAAAAAAAfU8AAAAAAAAAAAAAfU8AAAAAAACGTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfE8AAAAAAAB8TwAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"trim_trailing_white_space",
					null,
					"AwAAAHtPAAAAAAAAe08AAAAAAAABAAAAIF5PAAAAAAAAXk8AAAAAAAABAAAAIEFPAAAAAAAAQU8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhk8AAAAAAACGTwAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "get_opl"
					},
					"CAAAAKxPAAAAAAAArU8AAAAAAAAAAAAArU8AAAAAAACtTwAAAAAAAA0AAABnZXRfaW5kaWNhdG9yrU8AAAAAAACuTwAAAAAAAAAAAACuTwAAAAAAAK9PAAAAAAAAAAAAAK9PAAAAAAAAsE8AAAAAAAAAAAAAsE8AAAAAAACxTwAAAAAAAAAAAACxTwAAAAAAALJPAAAAAAAAAAAAALJPAAAAAAAAs08AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArE8AAAAAAAC5TwAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					2,
					"left_delete",
					null,
					"AgAAALJPAAAAAAAAsk8AAAAAAAABAAAAbLFPAAAAAAAAsU8AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAs08AAAAAAACzTwAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAALFPAAAAAAAAsk8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsU8AAAAAAACxTwAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					2,
					"left_delete",
					null,
					"AgAAALFPAAAAAAAAsU8AAAAAAAABAAAAcLBPAAAAAAAAsE8AAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAsk8AAAAAAACyTwAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": "plot"
					},
					"BAAAALBPAAAAAAAAsU8AAAAAAAAAAAAAsU8AAAAAAACyTwAAAAAAAAAAAACyTwAAAAAAALNPAAAAAAAAAAAAALNPAAAAAAAAtE8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsE8AAAAAAACwTwAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					2,
					"left_delete",
					null,
					"AgAAAFRDAAAAAAAAVEMAAAAAAAABAAAAPVNDAAAAAAAAU0MAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAVUMAAAAAAABVQwAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAFNDAAAAAAAAVEMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU0MAAAAAAABTQwAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"left_delete",
					null,
					"AQAAADlDAAAAAAAAOUMAAAAAAABNAAAACiAgICBzdGF0aWNfYXNzZXJ0KE5ZQXhpcyA8IDQsICJQbG90dGluZyBkb2VzIG5vdCBzdXBwb3J0IG1vcmUgdGhhbiA0IGF4aXMiKTs",
					"AQAAAAAAAAABAAAAhkMAAAAAAAA5QwAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"left_delete",
					null,
					"AQAAADlDAAAAAAAAOUMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOkMAAAAAAAA6QwAAAAAAAAAAAAAAAHdA"
				],
				[
					535,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnYwAAI2lmbmRlZiBJTUdVSUhFTFBFUlNfSAojZGVmaW5lIElNR1VJSEVMUEVSU19ICiNpbmNsdWRlICJzYmNxdWVlbnMtZ3VpL2ltcGxvdF9oZWxwZXJzLmhwcCIKI3ByYWdtYSBvbmNlCgovLyBDIFNURCBpbmNsdWRlcwovLyBDIDNyZCBwYXJ0eSBpbmNsdWRlcwojaW5jbHVkZSA8aW1ndWkuaD4KI2luY2x1ZGUgPGltcGxvdC5oPgoKLy8gQysrIFNURCBpbmNsdWRlcwojaW5jbHVkZSA8cmFuZ2VzPgojaW5jbHVkZSA8ZnVuY3Rpb25hbD4KI2luY2x1ZGUgPHVub3JkZXJlZF9tYXA+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDx0eXBlX3RyYWl0cz4KI2luY2x1ZGUgPHZlY3Rvcj4KI2luY2x1ZGUgPHN0cmluZ192aWV3PgoKLy8gQysrIDNyZCBwYXJ0eSBpbmNsdWRlcwojaW5jbHVkZSA8c3BkbG9nL3NwZGxvZy5oPiAvLyBmb3IgZm10Ojpmb3JtYXQKI2luY2x1ZGUgPG1pc2MvY3BwL2ltZ3VpX3N0ZGxpYi5oPiAvLyBmb3IgdXNlIHdpdGggc3RkOjpzdHJpbmcKCm5hbWVzcGFjZSBTQkNRdWVlbnMgewoKLy8gc3RvbGVuIGZyb20gaHR0cHM6Ly9jdHJwZWFjaC5pby9wb3N0cy9jcHAyMC1zdHJpbmctbGl0ZXJhbC10ZW1wbGF0ZS1wYXJhbWV0ZXJzLwovLyBpdCBpcyBhIGdyZWF0IGlkZWEhCnRlbXBsYXRlPHNpemVfdCBOPgpzdHJ1Y3QgU3RyaW5nTGl0ZXJhbCB7CiAgICBjb25zdGV4cHIgU3RyaW5nTGl0ZXJhbChjb25zdCBjaGFyICgmc3RyKVtOXSkgewogICAgICAgIC8vIFRoZSBleHBsaWNpdCBicmVha3MgdGhpcywgbWF5YmUgd2UgY2FuIGZpbmQgYSBtb3JlIHN1aXRhYmxlIHNvbHV0aW9uPwogICAgICAgIHN0ZDo6Y29weV9uKHN0ciwgTiwgdmFsdWUpOwogICAgfQoKICAgIGNoYXIgdmFsdWVbTl07Cn07Cgp1c2luZyBDb2xvcl90ID0gSW1WZWM0Owp1c2luZyBTaXplX3QgPSBJbVZlYzI7Cgpjb25zdGV4cHIgc3RhdGljIENvbG9yX3QgUmVkezEuMCwgMC4wLCAwLjAsIDEuMH07CmNvbnN0ZXhwciBzdGF0aWMgQ29sb3JfdCBHcmVlbnswLjAsIDEuMCwgMC4wLCAxLjB9Owpjb25zdGV4cHIgc3RhdGljIENvbG9yX3QgQmx1ZXswLjAsIDAuMCwgMS4wLCAxLjB9Owpjb25zdGV4cHIgc3RhdGljIENvbG9yX3QgV2hpdGV7MS4wLCAxLjAsIDEuMCwgMS4wfTsKY29uc3RleHByIHN0YXRpYyBDb2xvcl90IEJsYWNrezAuMCwgMC4wLCAwLjAsIDAuMH07Cgp1c2luZyBUZXh0UG9zaXRpb25fdCA9IGVudW0gY2xhc3MgVGV4dFBvc2l0aW9uRW51bSB7CiAgICBOb25lLCBUb3AsIEJvdHRvbSwgTGVmdCwgUmlnaHQKfTsKdXNpbmcgTnVtZXJpY0Zvcm1hdF90ID0gZW51bSBjbGFzcyBOdW1lcmljRm9ybWF0RW51bSB7CiAgICBEZWZhdWx0LCBTY2llbnRpZmljLCBIZXhGbG9hdCwgRml4ZWQKfTsKdXNpbmcgUGxvdFR5cGVfdCA9IGVudW0gY2xhc3MgUGxvdFR5cGVFbnVteyBMaW5lLCBTY2F0dGVyIH07CgpzdHJ1Y3QgRHJhd2luZ09wdGlvbnMgewogICAgLy8gTG9jYXRpb24gb2YgdGhlIGFjY29tcGFueWluZyB0ZXh0LiBNb3N0IEltR1VJIGNvbnRyb2xzIGFscmVhZHkKICAgIC8vIGhhdmUgc29tZXRoaW5nIHNpbWlsYXIsIHRoaXMgaXMgZm9yIHRob3NlIHdobyBkbyBub3QgKGxpa2UgYnV0dG9uKQogICAgVGV4dFBvc2l0aW9uX3QgVGV4dFBvc2l0aW9uID0gVGV4dFBvc2l0aW9uRW51bTo6Tm9uZTsKICAgIC8vIENvbG9yIG9mIHRoZSBhY2NvbXBhbnlpbmcgdGV4dC4KICAgIENvbG9yX3QgVGV4dENvbG9yID0gV2hpdGU7CiAgICAvLyBDb2xvciBvZiB0aGUgY29udHJvbCBpbiBzdGFuZGJ5IC0gb25seSBidXR0b24gc3VwcG9ydHMgaXQgQVRNLgogICAgQ29sb3JfdCBDb2xvciA9IEJsdWU7CiAgICAvLyBDb2xvciBvZiB0aGUgY29udHJvbCB3aGVuIGhvdmVyZWQgLSBvbmx5IGJ1dHRvbiBzdXBwb3J0cyBpdCBBVE0uCiAgICBDb2xvcl90IEhvdmVyZWRDb2xvciA9IEJsdWU7CiAgICAvLyBDb2xvciBvZiB0aGUgY29udHJvbCB3aGVuIGFjdGl2ZSAtIG9ubHkgYnV0dG9uIHN1cHBvcnRzIGl0IEFUTS4KICAgIENvbG9yX3QgQWN0aXZlQ29sb3IgPSBCbHVlOwogICAgLy8gU2l6ZSBvZiB0aGUgY29udHJvbCAtIG9ubHkgYnV0dG9uIHN1cHBvcnRzIGl0IEFUTS4gMHMgc2l6ZXMKICAgIC8vIHRoZSBidXR0b24gdG8gdGhlIGxlbmd0aCBvZiB0aGUgdGV4dAogICAgU2l6ZV90IFNpemUgPSBTaXplX3R7MCwgMH07CgogICAgLy8gTnVtZXJpYyBpbmRpY2F0b3IvY29udHJvbHMgc3BlY2lmaWMKICAgIGRvdWJsZSBTdGVwU2l6ZSA9IDAuMDsKICAgIC8vIE51bWVyaWMgaW5kaWNhdG9yL2NvbnRyb2xzIHNwZWNpZmljIC0gRm9sbG93IHByaW50ZiBjb252ZW50aW9ucwogICAgc3RkOjpzdHJpbmdfdmlldyBGb3JtYXQgPSAiJS4zZiI7Cn07CgplbnVtIGNsYXNzIENvbnRyb2xUeXBlcyB7IElucHV0VGV4dCwgQnV0dG9uLCBDaGVja2JveCwgSW5wdXRJbnQsIElucHV0RmxvYXQsCiAgICBJbnB1dERvdWJsZSwgQ29tYm9Cb3gsIElucHV0SU5UOCwgSW5wdXRVSU5UOCwgSW5wdXRJTlQxNiwgSW5wdXRVSU5UMTYsCiAgICBJbnB1dElOVDMyLCBJbnB1dFVJTlQzMiwgSW5wdXRJTlQ2NCwgSW5wdXRVSU5UNjQgfTsKCnRlbXBsYXRlPENvbnRyb2xUeXBlcyBDb250cm9sVHlwZSwgU3RyaW5nTGl0ZXJhbCBsaXN0PgpzdHJ1Y3QgQ29udHJvbCB7CiAgICBjb25zdCBzdGQ6OnN0cmluZ192aWV3IExhYmVsID0gIiI7CiAgICBjb25zdCBzdGQ6OnN0cmluZ192aWV3IFRleHQgPSAiIjsKICAgIGNvbnN0IHN0ZDo6c3RyaW5nX3ZpZXcgSGVscFRleHQgPSAiIjsKICAgIGNvbnN0IERyYXdpbmdPcHRpb25zIERyYXdPcHRpb25zID0gRHJhd2luZ09wdGlvbnN7fTsKCiAgICBjb25zdGV4cHIgfkNvbnRyb2woKSB7fQoKICAgIGNvbnN0ZXhwciBDb250cm9sKCkgPSBkZWZhdWx0OwogICAgY29uc3RleHByIENvbnRyb2woCiAgICAgICAgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgdGV4dCwgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgaGVscF90ZXh0LAogICAgICAgIGNvbnN0IERyYXdpbmdPcHRpb25zJiBkcmF3X29wdHMgPSBEcmF3aW5nT3B0aW9uc3t9KSA6CiAgICAgICAgTGFiZWx7bGlzdC52YWx1ZX0sCiAgICAgICAgVGV4dHt0ZXh0fSwKICAgICAgICBIZWxwVGV4dHtoZWxwX3RleHR9LAogICAgICAgIERyYXdPcHRpb25ze2RyYXdfb3B0c30KICAgIHsKICAgICAgICAvLyBzdGF0aWNfYXNzZXJ0KERyYXdPcHRpb25zLkZvcm1hdC5zdGFydHNfd2l0aCgiJSIpLCAiZm9ybWF0IHN0cmluZyBtdXN0IgogICAgICAgIC8vICAgICAic3RhcnQgd2l0aCAlIik7CiAgICB9CgogICAgZXhwbGljaXQgY29uc3RleHByIENvbnRyb2woY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgdGV4dCkgOgogICAgICAgIENvbnRyb2x7dGV4dCwgIiJ9CiAgICB7fQp9OwoKCmVudW0gY2xhc3MgSW5kaWNhdG9yVHlwZXMgeyBOdW1lcmljYWwsIFN0cmluZywgTEVEIH07Cgp0ZW1wbGF0ZTxJbmRpY2F0b3JUeXBlcyBJbmRpY2F0b3JUeXBlLCBTdHJpbmdMaXRlcmFsIExhYmVsPgpzdHJ1Y3QgSW5kaWNhdG9yIHsKICAgIC8vIExhYmVsIG9mIHRoZSBpbmRpY2F0b3IgdGhhdCBpcyBkcmF3biBkZXBlbmRpbmcgb24KICAgIC8vIERyYXdPcHRpb25zLlRleHRQb3NpdGlvbiB2YWx1ZQogICAgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyBUZXh0ID0gIiI7CiAgICAvLyBVbml0cyBsYWJlbCB0aGF0IGlzIGFsd2F5cyBkcmF3biBvbiB0aGUgcmlnaHQgb2YgdGhlIGluZGljYXRvcgogICAgLy8gb25seSBkcmF3biBvbiBOdW1lcmljYWxJbmRpY2F0b3IKICAgIGNvbnN0IHN0ZDo6c3RyaW5nX3ZpZXcgVW5pdFRleHQgPSAiIjsKICAgIC8vIEhlbHAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyB0aGUgdGV4dC4KICAgIGNvbnN0IHN0ZDo6c3RyaW5nX3ZpZXcgSGVscFRleHQgPSAiIjsKICAgIGNvbnN0IERyYXdpbmdPcHRpb25zIERyYXdPcHRpb25zOwoKICAgIGNvbnN0ZXhwciB+SW5kaWNhdG9yKCkge30KCiAgICBjb25zdGV4cHIgSW5kaWNhdG9yKCkgPSBkZWZhdWx0OwogICAgY29uc3RleHByIEluZGljYXRvcigKICAgICAgICBzdGQ6OnN0cmluZ192aWV3IHRleHQsCiAgICAgICAgc3RkOjpzdHJpbmdfdmlldyB1bml0cywKICAgICAgICBzdGQ6OnN0cmluZ192aWV3IGhlbHBfdGV4dCwKICAgICAgICBjb25zdCBEcmF3aW5nT3B0aW9ucyYgZHJhd19vcHRzID0gRHJhd2luZ09wdGlvbnN7fSkgOgogICAgICAgIFRleHR7dGV4dH0sCiAgICAgICAgVW5pdFRleHR7dW5pdHN9LAogICAgICAgIEhlbHBUZXh0e2hlbHBfdGV4dH0sCiAgICAgICAgRHJhd09wdGlvbnN7ZHJhd19vcHRzfQogICAgewogICAgICAgIC8vIHN0YXRpY19hc3NlcnQoRHJhd09wdGlvbnMuRm9ybWF0LnN0YXJ0c193aXRoKCIlIiksICJmb3JtYXQgc3RyaW5nIG11c3QiCiAgICAgICAgLy8gICAgICJzdGFydCB3aXRoICUiKTsKICAgICAgICAvLyBSZW1vdmUgdGhlICUgZnJvbSB0aGUgZm9ybWF0IHN0cmluZywgYXMgd2Ugd2lsbCBub3QgbmVlZCBpdCBmb3IKICAgICAgICAvLyBhbGwgdGhlIGluZGljYXRvcnMuCiAgICAgICAgLy8gRHJhd09wdGlvbnMuRm9ybWF0LnJlbW92ZV9wcmVmaXgoMSk7CiAgICB9CgogICAgLy8gU2V0cyB0aGUgVGV4dCBlcXVhbCB0byB0aGUgTGFiZWwsIGFuZCBzZXRzIGRyYXdpbmcgb3B0aW9ucyB0byB0aGUKICAgIC8vIGRlZmF1bHRzLgogICAgZXhwbGljaXQgY29uc3RleHByIEluZGljYXRvcihzdGQ6OnN0cmluZ192aWV3IGhlbHBfdGV4dCkgOgogICAgICAgIEluZGljYXRvcntMYWJlbC52YWx1ZSwgIiIsIGhlbHBfdGV4dH0KICAgIHt9CgogICAgZXhwbGljaXQgY29uc3RleHByIEluZGljYXRvcihzdGQ6OnN0cmluZ192aWV3IHVuaXRzLAogICAgICAgIHN0ZDo6c3RyaW5nX3ZpZXcgaGVscF90ZXh0KSA6CiAgICAgICAgSW5kaWNhdG9ye0xhYmVsLnZhbHVlLCB1bml0cywgaGVscF90ZXh0fQogICAge30KIHByaXZhdGU6CiAgICBjb25zdCBzdGQ6OnN0cmluZ192aWV3IF9mdWxsX2Zvcm1hdF9zdHJpbmc7Cn07Cgp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIENvbnN0TGFiZWw+CnVzaW5nIE51bWVyaWNhbEluZGljYXRvciA9IEluZGljYXRvcjxJbmRpY2F0b3JUeXBlczo6TnVtZXJpY2FsLCBDb25zdExhYmVsPjsKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBDb25zdExhYmVsPgp1c2luZyBTdHJpbmdJbmRpY2F0b3IgPSBJbmRpY2F0b3I8SW5kaWNhdG9yVHlwZXM6OlN0cmluZywgQ29uc3RMYWJlbD47CnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgQ29uc3RMYWJlbD4KdXNpbmcgTEVESW5kaWNhdG9yID0gSW5kaWNhdG9yPEluZGljYXRvclR5cGVzOjpMRUQsIENvbnN0TGFiZWw+OwoKdXNpbmcgUGxvdEdyb3VwaW5nc190ID0gZW51bSBjbGFzcyBQbG90R3JvdXBpbmdzRW51bSB7IE9uZSwgVHdvLCBUaHJlZSB9OwoKdGVtcGxhdGU8c2l6ZV90IE5QbG90cyA9IDEsIHNpemVfdCBOWUF4aXMgPSAxPgpzdHJ1Y3QgUGxvdE9wdGlvbnMgewogICAgc3RhdGljX2Fzc2VydChOWUF4aXMgPCA0LCAiTW9yZSB0aGFuIDQgYXhlcyBub3QgYWxsb3dlZC4iKTsKICAgIHN0YXRpY19hc3NlcnQoTlBsb3RzID49IE5ZQXhpcywgIk51bWJlciBvZiBncmFwaHMgaGFzIHRvIGJlIGVxdWFsIG9yIGhpZ2hlciIKICAgICAgICAiIHRoYW4gdGhlIG51bWJlciBvZiB5LWF4ZXMiKTsKICAgIHN0YXRpY19hc3NlcnQoTlBsb3RzID4gMCwgIlRoZXJlIG11c3QgYmUgYSBsZWFzdCBvbmUgcGxvdCEiKTsKCiAgICAvLyBUeXBlIG9mIHBsb3QgZHJhd24KICAgIFBsb3RUeXBlX3QgUGxvdFR5cGUgPSBQbG90VHlwZUVudW06OkxpbmU7CiAgICAvLwogICAgYm9vbCBTaG93QWxsT3B0aW9ucyA9IGZhbHNlOwoKICAgIC8vIExhYmVscyBvZiBlYWNoIHBsb3QKICAgIHN0ZDo6YXJyYXk8c3RkOjpzdHJpbmdfdmlldywgTlBsb3RzPiBQbG90TGFiZWxzOwogICAgLy8gR3JvdXAgKGluIHRlcm0gb2YgYXhlcykgd2hlcmUgZWFjaCBwbG90IGJlbG9uZ3MuIE1heCAzCiAgICBzdGQ6OmFycmF5PFBsb3RHcm91cGluZ3NfdCwgTlBsb3RzPiBQbG90R3JvdXBpbmdzOwoKICAgIGNvbnN0IHN0ZDo6c3RyaW5nX3ZpZXcgWEF4aXNMYWJlbCA9ICJ4IjsKICAgIHN0ZDo6c3RyaW5nX3ZpZXcgWEF4aXNVbml0ID0gIlthcmIuXSI7CiAgICBJbVBsb3RTY2FsZSBYQXhpc1NjYWxlID0gSW1QbG90U2NhbGVfTGluZWFyOwogICAgSW1QbG90QXhpc0ZsYWdzIFhBeGlzRmxhZ3MgPSBJbVBsb3RBeGlzRmxhZ3NfTm9uZTsKCiAgICBjb25zdCBzdGQ6OmFycmF5PHN0ZDo6c3RyaW5nX3ZpZXcsIE5ZQXhpcz4gWUF4aXNMYWJlbHMgPSB7InkifTsKICAgIHN0ZDo6YXJyYXk8c3RkOjpzdHJpbmdfdmlldywgTllBeGlzPiBZQXhpc1VuaXRzID0geyJbYXJiLl0ifTsKICAgIHN0ZDo6YXJyYXk8SW1QbG90U2NhbGUsIE5ZQXhpcz4gWUF4aXNTY2FsZXM7CiAgICBzdGQ6OmFycmF5PEltUGxvdEF4aXNGbGFncywgTllBeGlzPiBZQXhpc0ZsYWdzOwp9OwoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBsaXN0LCBzaXplX3QgTlBsb3RzID0gMSwgc2l6ZV90IE5ZQXhpcyA9IDE+CnN0cnVjdCBQbG90SW5kaWNhdG9yIHsKICAgIHN0YXRpY19hc3NlcnQoTllBeGlzIDwgNCwgIk1vcmUgdGhhbiA0IGF4ZXMgbm90IGFsbG93ZWQuIik7CiAgICBzdGF0aWNfYXNzZXJ0KE5QbG90cyA+PSBOWUF4aXMsICJOdW1iZXIgb2YgZ3JhcGhzIGhhcyB0byBiZSBlcXVhbCBvciBoaWdoZXIiCiAgICAgICAgIiB0aGFuIHRoZSBudW1iZXIgb2YgeS1heGVzIik7CiAgICBzdGF0aWNfYXNzZXJ0KE5QbG90cyA+IDAsICJUaGVyZSBtdXN0IGJlIGEgbGVhc3Qgb25lIHBsb3QhIik7CgogICAgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyBMYWJlbCA9ICIiOwogICAgLy8gY29uc3Qgc3RkOjpzdHJpbmdfdmlldyBUZXh0ID0gIiI7CiAgICAvLyBjb25zdCBzdGQ6OnN0cmluZ192aWV3IEhlbHBUZXh0ID0gIiI7CgogICAgLy8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHBsb3RzLCB0aGVpciBheGVzLCBhbmQgbmFtZXMKICAgIFBsb3RPcHRpb25zPE5QbG90cywgTllBeGlzPiBQbG90RHJhd09wdGlvbnM7CiAgICBjb25zdCBEcmF3aW5nT3B0aW9ucyBEcmF3T3B0aW9uczsKCiAgICBjb25zdGV4cHIgflBsb3RJbmRpY2F0b3IoKSB7fQoKICAgIGNvbnN0ZXhwciBQbG90SW5kaWNhdG9yKCkgPSBkZWZhdWx0OwogICAgZXhwbGljaXQgY29uc3RleHByIFBsb3RJbmRpY2F0b3IoCiAgICAgICAgLy8gY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgdGV4dCwgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgaGVscF90ZXh0LAogICAgICAgIGNvbnN0IFBsb3RPcHRpb25zPE5QbG90cywgTllBeGlzPiYgcGxvdF9kcmF3X29wdHMgPSBQbG90T3B0aW9uczxOWUF4aXM+e30sCiAgICAgICAgY29uc3QgRHJhd2luZ09wdGlvbnMmIGRyYXdfb3B0cyA9IERyYXdpbmdPcHRpb25ze30pIDoKICAgICAgICBMYWJlbHtsaXN0LnZhbHVlfSwKICAgICAgICAvLyBUZXh0e3RleHR9LAogICAgICAgIC8vIEhlbHBUZXh0e2hlbHBfdGV4dH0sCiAgICAgICAgUGxvdERyYXdPcHRpb25ze3Bsb3RfZHJhd19vcHRzfSwKICAgICAgICBEcmF3T3B0aW9uc3tkcmF3X29wdHN9CiAgICB7CiAgICAgICAgLy8gc3RhdGljX2Fzc2VydCgsICk7CgogICAgfQoKICAgIGV4cGxpY2l0IGNvbnN0ZXhwciBQbG90SW5kaWNhdG9yKGNvbnN0IHN0ZDo6c3RyaW5nX3ZpZXcmIHRleHQpIDoKICAgICAgICBQbG90SW5kaWNhdG9ye3RleHQsICIifQogICAge30KfTsKCi8vIENvbnRyb2xzCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CmJvb2wgSW5wdXRUZXh0KGNvbnN0IENvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dFRleHQsIExhYmVsPiYsCiAgICAgICAgICAgICAgIHN0ZDo6c3RyaW5nJiBvdXQpIHsKICAgIHJldHVybiBJbUd1aTo6SW5wdXRUZXh0KExhYmVsLnZhbHVlLCAmb3V0KTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbD4KYm9vbCBCdXR0b24oY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICBib29sJiBvdXQpIHsKICAgIEltR3VpOjpQdXNoU3R5bGVDb2xvcihJbUd1aUNvbF9CdXR0b24sCiAgICAgICAgY29udHJvbC5EcmF3T3B0aW9ucy5Db2xvcik7CiAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uSG92ZXJlZCwKICAgICAgICBjb250cm9sLkRyYXdPcHRpb25zLkhvdmVyZWRDb2xvcik7CiAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uQWN0aXZlLAogICAgICAgIGNvbnRyb2wuRHJhd09wdGlvbnMuQWN0aXZlQ29sb3IpOwoKICAgIG91dCA9IEltR3VpOjpCdXR0b24oTGFiZWwudmFsdWUsIGNvbnRyb2wuRHJhd09wdGlvbnMuU2l6ZSk7CgogICAgSW1HdWk6OlBvcFN0eWxlQ29sb3IoMyk7CiAgICByZXR1cm4gb3V0Owp9Cgp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIExhYmVsPgpib29sIENoZWNrYm94KGNvbnN0IENvbnRyb2w8Q29udHJvbFR5cGVzOjpDaGVja2JveCwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgIGJvb2wmIG91dCkgewogICAgcmV0dXJuIEltR3VpOjpDaGVja2JveChMYWJlbC52YWx1ZSwgJm91dCk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CmJvb2wgSW5wdXRJbnQoY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCBMYWJlbD4mIGNvbnRyb2wsCiAgICAgICAgICAgICAgaW50JiBvdXQpIHsKICAgIHJldHVybiBJbUd1aTo6SW5wdXRJbnQoTGFiZWwudmFsdWUsICZvdXQsIHN0YXRpY19jYXN0PGludD4oCiAgICAgICAgY29udHJvbC5EcmF3T3B0aW9ucy5TdGVwU2l6ZSkpOwp9Cgp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIExhYmVsPgpib29sIElucHV0RmxvYXQoY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0RmxvYXQsIExhYmVsPiYgY29udHJvbCwKICAgICAgICAgICAgICAgIGZsb2F0JiBvdXQpICB7CiAgICByZXR1cm4gSW1HdWk6OklucHV0RmxvYXQoTGFiZWwudmFsdWUsICZvdXQsCiAgICAgICAgc3RhdGljX2Nhc3Q8ZmxvYXQ+KGNvbnRyb2wuRHJhd09wdGlvbnMuU3RlcFNpemUpLAogICAgICAgIDEwMC4wZipzdGF0aWNfY2FzdDxmbG9hdD4oY29udHJvbC5EcmF3T3B0aW9ucy5TdGVwU2l6ZSksCiAgICAgICAgc3RkOjpzdHJpbmcoY29udHJvbC5EcmF3T3B0aW9ucy5Gb3JtYXQpLmNfc3RyKCkpOwp9Cgp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIExhYmVsPgpib29sIElucHV0RG91YmxlKGNvbnN0IENvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dERvdWJsZSwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgICAgIGRvdWJsZSYgb3V0KSB7CiAgICByZXR1cm4gSW1HdWk6OklucHV0RG91YmxlKExhYmVsLnZhbHVlLCAmb3V0LAogICAgICAgIGNvbnRyb2wuRHJhd09wdGlvbnMuU3RlcFNpemUsCiAgICAgICAgMTAwLjAqY29udHJvbC5EcmF3T3B0aW9ucy5TdGVwU2l6ZSwKICAgICAgICBzdGQ6OnN0cmluZyhjb250cm9sLkRyYXdPcHRpb25zLkZvcm1hdCkuY19zdHIoKSk7Cn0KCnRlbXBsYXRlPENvbnRyb2xUeXBlcyBDb250cm9sVHlwZSwgU3RyaW5nTGl0ZXJhbCBMYWJlbCwgdHlwZW5hbWUgVD4KcmVxdWlyZXMgc3RkOjppc19pbnRlZ3JhbF92PFQ+CmJvb2wgSW5wdXRTY2FsYXIoY29uc3QgQ29udHJvbDxDb250cm9sVHlwZSwgTGFiZWw+JiBjb250cm9sLCBUJiBvdXQpIHsKICAgIEltR3VpRGF0YVR5cGVfIHR5cGUgPSBJbUd1aURhdGFUeXBlX1M4OwogICAgaWYgY29uc3RleHByICggc3RkOjppc19zYW1lX3Y8VCwgaW50OF90PikgewogICAgICAgIHR5cGUgPSBJbUd1aURhdGFUeXBlX1M4OwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwciAoIHN0ZDo6aXNfc2FtZV92PFQsIHVpbnQ4X3Q+KSB7CiAgICAgICAgdHlwZSA9IEltR3VpRGF0YVR5cGVfVTg7CiAgICB9IGVsc2UgaWYgY29uc3RleHByICggc3RkOjppc19zYW1lX3Y8VCwgaW50MTZfdD4pIHsKICAgICAgICB0eXBlID0gSW1HdWlEYXRhVHlwZV9TMTY7CiAgICB9IGVsc2UgaWYgY29uc3RleHByICggc3RkOjppc19zYW1lX3Y8VCwgdWludDE2X3Q+KSB7CiAgICAgICAgdHlwZSA9IEltR3VpRGF0YVR5cGVfVTE2OwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwciAoIHN0ZDo6aXNfc2FtZV92PFQsIGludDMyX3Q+KSB7CiAgICAgICAgdHlwZSA9IEltR3VpRGF0YVR5cGVfUzMyOwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwciAoIHN0ZDo6aXNfc2FtZV92PFQsIHVpbnQzMl90PikgewogICAgICAgIHR5cGUgPSBJbUd1aURhdGFUeXBlX1UzMjsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKCBzdGQ6OmlzX3NhbWVfdjxULCBpbnQ2NF90PikgewogICAgICAgIHR5cGUgPSBJbUd1aURhdGFUeXBlX1M2NDsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKCBzdGQ6OmlzX3NhbWVfdjxULCB1aW50NjRfdD4pIHsKICAgICAgICB0eXBlID0gSW1HdWlEYXRhVHlwZV9VNjQ7CiAgICB9CgogICAgY29uc3Qgdm9pZCogc3RlcCA9ICZjb250cm9sLkRyYXdPcHRpb25zLlN0ZXBTaXplOwogICAgLy8gY29uc3Qgdm9pZCogYmlnX3N0ZXAgPSAmKDEwMCpjb250cm9sLkRyYXdPcHRpb25zLlN0ZXBTaXplKTsKICAgIHJldHVybiBJbUd1aTo6SW5wdXRTY2FsYXIoTGFiZWwudmFsdWUsIHR5cGUsICZvdXQsCiAgICAgICAgc3RlcCwKICAgICAgICBzdGVwLAogICAgICAgIHN0ZDo6c3RyaW5nKGNvbnRyb2wuRHJhd09wdGlvbnMuRm9ybWF0KS5jX3N0cigpKTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbD4KYm9vbCBJbnB1dElOVDgoY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SU5UOCwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgICBpbnQ4X3QmIG91dCkgewogICAgcmV0dXJuIElucHV0U2NhbGFyPENvbnRyb2xUeXBlczo6SW5wdXRJTlQ4LCBMYWJlbCwgaW50OF90Pihjb250cm9sLCBvdXQpOwp9Cgp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIExhYmVsPgpib29sIElucHV0VUlOVDgoY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VUlOVDgsIExhYmVsPiYgY29udHJvbCwKICAgICAgICAgICAgICAgIHVpbnQ4X3QmIG91dCkgewogICAgcmV0dXJuIElucHV0U2NhbGFyPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UOCwgTGFiZWwsIHVpbnQ4X3Q+KGNvbnRyb2wsIG91dCk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CmJvb2wgSW5wdXRJTlQxNihjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRJTlQxNiwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgICAgaW50MTZfdCYgb3V0KSB7CiAgICByZXR1cm4gSW5wdXRTY2FsYXI8Q29udHJvbFR5cGVzOjpJbnB1dElOVDE2LCBMYWJlbCwgaW50MTZfdD4oY29udHJvbCwgb3V0KTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbD4KYm9vbCBJbnB1dFVJTlQxNihjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMTYsIExhYmVsPiYgY29udHJvbCwKICAgICAgICAgICAgICAgIHVpbnQxNl90JiBvdXQpIHsKICAgIHJldHVybiBJbnB1dFNjYWxhcjxDb250cm9sVHlwZXM6OklucHV0VUlOVDE2LCBMYWJlbCwgdWludDE2X3Q+KGNvbnRyb2wsIG91dCk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CmJvb2wgSW5wdXRJTlQzMihjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRJTlQzMiwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgICAgaW50MzJfdCYgb3V0KSB7CiAgICByZXR1cm4gSW5wdXRTY2FsYXI8Q29udHJvbFR5cGVzOjpJbnB1dElOVDMyLCBMYWJlbCwgaW50MzJfdD4oY29udHJvbCwgb3V0KTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbD4KYm9vbCBJbnB1dFVJTlQzMihjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMzIsIExhYmVsPiYgY29udHJvbCwKICAgICAgICAgICAgICAgIHVpbnQzMl90JiBvdXQpIHsKICAgIHJldHVybiBJbnB1dFNjYWxhcjxDb250cm9sVHlwZXM6OklucHV0VUlOVDMyLCBMYWJlbCwgdWludDMyX3Q+KGNvbnRyb2wsIG91dCk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CmJvb2wgSW5wdXRJTlQ2NChjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRJTlQ2NCwgTGFiZWw+JiBjb250cm9sLAogICAgICAgICAgICAgICAgaW50NjRfdCYgb3V0KSB7CiAgICByZXR1cm4gSW5wdXRTY2FsYXI8Q29udHJvbFR5cGVzOjpJbnB1dElOVDY0LCBMYWJlbCwgaW50NjRfdD4oY29udHJvbCwgb3V0KTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbD4KYm9vbCBJbnB1dFVJTlQ2NChjb25zdCBDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UNjQsIExhYmVsPiYgY29udHJvbCwKICAgICAgICAgICAgICAgIHVpbnQ2NF90JiBvdXQpIHsKICAgIHJldHVybiBJbnB1dFNjYWxhcjxDb250cm9sVHlwZXM6OklucHV0VUlOVDY0LCBMYWJlbCwgdWludDY0X3Q+KGNvbnRyb2wsIG91dCk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWwsIHR5cGVuYW1lIFQ+IHJlcXVpcmVzIHN0ZDo6aXNfZW51bV92PFQ+CmJvb2wgQ29tYm9Cb3goY29uc3QgQ29udHJvbDxDb250cm9sVHlwZXM6OkNvbWJvQm94LCBMYWJlbD4mIGNvbnRyb2wsIFQmIHN0YXRlLAogICAgY29uc3Qgc3RkOjp1bm9yZGVyZWRfbWFwPFQsIHN0ZDo6c3RyaW5nPiYgbWFwKSB7CiAgICBzdGF0aWMgc2l6ZV90IGluZGV4ID0gMDsKICAgIHNpemVfdCBpID0gMDsKCiAgICBzdGQ6OnZlY3RvcjxUPiBzdGF0ZXM7CiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnN0cmluZz4gc19zdGF0ZXM7CgogICAgZm9yIChhdXRvIHBhaXIgOiBtYXApIHsKICAgICAgICBzdGF0ZXMucHVzaF9iYWNrKHBhaXIuZmlyc3QpOwogICAgICAgIHNfc3RhdGVzLnB1c2hfYmFjayhwYWlyLnNlY29uZCk7CgogICAgICAgIC8vIFRoaXMgaXMgdG8gbWFrZSBzdXJlIHRoZSBjdXJyZW50IHNlbGVjdGVkIGl0ZW0gaXMgdGhlIG9uZQogICAgICAgIC8vIHRoYXQgaXMgYWxyZWFkeSBzYXZlZCBpbiBzdGF0ZQogICAgICAgIGlmIChzdGF0ZSA9PSBwYWlyLmZpcnN0KSB7CiAgICAgICAgICAgIGluZGV4ID0gaTsKICAgICAgICB9CgogICAgICAgIGkrKzsKICAgIH0KCiAgICAvLyBib29sIHUgPSBJbUd1aTo6Q29tYm8obGFiZWwuY19zdHIoKSwgJmluZGV4LCBsaXN0LmNfc3RyKCkpOwogICAgaWYgKEltR3VpOjpCZWdpbkNvbWJvKExhYmVsLCBzX3N0YXRlc1tpbmRleF0uY19zdHIoKSkpIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWFwLnNpemUoKTsgaSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGJvb2wgaXNfc2VsZWN0ZWQgPSAoaW5kZXggPT0gaSk7CiAgICAgICAgICAgIGlmIChJbUd1aTo6U2VsZWN0YWJsZShzX3N0YXRlc1tpXS5jX3N0cigpLCBpc19zZWxlY3RlZCkpIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gaTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBTZXQgdGhlIGluaXRpYWwgZm9jdXMgd2hlbiBvcGVuaW5nIHRoZSBjb21ibwogICAgICAgICAgICAvLyAoc2Nyb2xsaW5nICsga2V5Ym9hcmQgbmF2aWdhdGlvbiBmb2N1cykKICAgICAgICAgICAgaWYgKGlzX3NlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICBJbUd1aTo6U2V0SXRlbURlZmF1bHRGb2N1cygpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBJbUd1aTo6RW5kQ29tYm8oKTsKICAgIH0KCiAgICBzdGF0ZSA9IHN0YXRlc1tpbmRleF07CgogICAgcmV0dXJuIHRydWU7Cn0KCi8vIEluZGljYXRvcnMKIC8vIHsgTnVtZXJpY2FsLCBTdHJpbmcsIExFRCwgUGxvdCB9Owp0ZW1wbGF0ZTxTdHJpbmdMaXRlcmFsIExhYmVsLCB0eXBlbmFtZSBJbnB1dFR5cGU+CnJlcXVpcmVzIHN0ZDo6aXNfZmxvYXRpbmdfcG9pbnRfdjxJbnB1dFR5cGU+IHx8IHN0ZDo6aXNfaW50ZWdyYWxfdjxJbnB1dFR5cGU+CnZvaWQgTnVtZXJpY2FsKGNvbnN0IEluZGljYXRvcjxJbmRpY2F0b3JUeXBlczo6TnVtZXJpY2FsLCBMYWJlbD4mIGluZGljYXRvciwKICAgIGNvbnN0IElucHV0VHlwZSYgaW5fdmFsdWUpIHsKICAgIGNvbnN0IGF1dG8mIGxhYmVsX25hbWUgPSBMYWJlbC52YWx1ZTsKICAgIGNvbnN0IGF1dG8mIGZvcm1hdCA9IGluZGljYXRvci5EcmF3T3B0aW9ucy5Gb3JtYXQ7CiAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uLAogICAgICAgIGluZGljYXRvci5EcmF3T3B0aW9ucy5Db2xvcik7CiAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uSG92ZXJlZCwKICAgICAgICBpbmRpY2F0b3IuRHJhd09wdGlvbnMuSG92ZXJlZENvbG9yKTsKICAgIEltR3VpOjpQdXNoU3R5bGVDb2xvcihJbUd1aUNvbF9CdXR0b25BY3RpdmUsCiAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLkFjdGl2ZUNvbG9yKTsKCiAgICBpZiAobm90IGluZGljYXRvci5EcmF3T3B0aW9ucy5Gb3JtYXQuc3RhcnRzX3dpdGgoIiUiKSkgewogICAgICAgIHRocm93ICJOb3QgYSB2YWxpZCBmb3JtYXQgc3RyaW5nLiBJdCBtdXN0IHN0YXJ0IHdpdGggJSI7CiAgICB9CgogICAgaWYgY29uc3RleHByIChzdGQ6OmlzX2ludGVncmFsX3Y8SW5wdXRUeXBlPikgewogICAgICAgIEltR3VpOjpCdXR0b24oZm10Ojpmb3JtYXQoInt9IyN7fSIsIGluX3ZhbHVlLCBsYWJlbF9uYW1lKS5jX3N0cigpLAogICAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLlNpemUpOwogICAgfSBlbHNlIGlmIChzdGQ6OmlzX2Zsb2F0aW5nX3BvaW50X3Y8SW5wdXRUeXBlPikgewogICAgICAgIC8vIFNvIGluZWZmaWNpZW50IQogICAgICAgIGF1dG8gZm9ybWF0X3N0cmluZyA9ICJ7OiIgKyBzdGQ6OnN0cmluZyhmb3JtYXQpLnN1YnN0cigxKSArICJ9IyN7fSI7CiAgICAgICAgSW1HdWk6OkJ1dHRvbihmbXQ6OmZvcm1hdCgie30jI3t9IiwgaW5fdmFsdWUsIGxhYmVsX25hbWUpLmNfc3RyKCksCiAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3IuRHJhd09wdGlvbnMuU2l6ZSk7CiAgICB9CgogICAgSW1HdWk6OlBvcFN0eWxlQ29sb3IoMyk7Cn0KCnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CnZvaWQgU3RyaW5nKGNvbnN0IEluZGljYXRvcjxJbmRpY2F0b3JUeXBlczo6U3RyaW5nLCBMYWJlbD4mIGluZGljYXRvciwKICAgIHN0ZDo6c3RyaW5nX3ZpZXcgaW5fdmFsdWUpIHsKICAgIGNvbnN0IGF1dG8mIGxhYmVsX25hbWUgPSBMYWJlbC52YWx1ZTsKICAgIEltR3VpOjpQdXNoU3R5bGVDb2xvcihJbUd1aUNvbF9CdXR0b24sCiAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLkNvbG9yKTsKICAgIEltR3VpOjpQdXNoU3R5bGVDb2xvcihJbUd1aUNvbF9CdXR0b25Ib3ZlcmVkLAogICAgICAgIGluZGljYXRvci5EcmF3T3B0aW9ucy5Ib3ZlcmVkQ29sb3IpOwogICAgSW1HdWk6OlB1c2hTdHlsZUNvbG9yKEltR3VpQ29sX0J1dHRvbkFjdGl2ZSwKICAgICAgICBpbmRpY2F0b3IuRHJhd09wdGlvbnMuQWN0aXZlQ29sb3IpOwoKICAgIEltR3VpOjpCdXR0b24oZm10Ojpmb3JtYXQoInt9IyN7fSIsIGluX3ZhbHVlLCBsYWJlbF9uYW1lKS5jX3N0cigpLAogICAgICAgIGluZGljYXRvci5EcmF3T3B0aW9ucy5TaXplKTsKCiAgICBJbUd1aTo6UG9wU3R5bGVDb2xvcigzKTsKfQoKLy8gTEVEIGluZGljYXRvciBpbiBhIGJvb2xlYW4gaXMgcGFzc2VkIGRvd24gYW5kIHRoZSBjb2xvciBvZiB0aGUgaW5kaWNhdG9yCi8vIHJlZmxlY3RzIGlmIGl0cyBvbiBvciBvZmYuIE9GRiBmb3Igbm93IGlzIGFsd2F5cyByZWQuIEhTViA9IDAsIDAuNiwgMC42CnRlbXBsYXRlPFN0cmluZ0xpdGVyYWwgTGFiZWw+CnZvaWQgTEVEKGNvbnN0IEluZGljYXRvcjxJbmRpY2F0b3JUeXBlczo6TEVELCBMYWJlbD4mIGluZGljYXRvciwKICAgIGNvbnN0IGJvb2wmIGluX3ZhbHVlKSB7CiAgICBjb25zdCBhdXRvJiBsYWJlbF9uYW1lID0gTGFiZWwudmFsdWU7CgogICAgaWYgKGluX3ZhbHVlKSB7CiAgICAgICAgSW1HdWk6OlB1c2hTdHlsZUNvbG9yKEltR3VpQ29sX0J1dHRvbiwKICAgICAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLkNvbG9yKTsKICAgICAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uSG92ZXJlZCwKICAgICAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLkhvdmVyZWRDb2xvcik7CiAgICAgICAgSW1HdWk6OlB1c2hTdHlsZUNvbG9yKEltR3VpQ29sX0J1dHRvbkFjdGl2ZSwKICAgICAgICAgICAgaW5kaWNhdG9yLkRyYXdPcHRpb25zLkFjdGl2ZUNvbG9yKTsKICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgYXV0byBvZmZfY29sb3IgPQogICAgICAgICAgICBzdGF0aWNfY2FzdDxJbVZlYzQ+KEltQ29sb3I6OkhTVigwLjBmLCAwLjZmLCAwLjZmKSk7CiAgICAgICAgSW1HdWk6OlB1c2hTdHlsZUNvbG9yKEltR3VpQ29sX0J1dHRvbiwgb2ZmX2NvbG9yKTsKICAgICAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uSG92ZXJlZCwgb2ZmX2NvbG9yKTsKICAgICAgICBJbUd1aTo6UHVzaFN0eWxlQ29sb3IoSW1HdWlDb2xfQnV0dG9uQWN0aXZlLCBvZmZfY29sb3IpOwogICAgfQoKICAgIEltR3VpOjpCdXR0b24oZm10Ojpmb3JtYXQoIiMje30iLCBsYWJlbF9uYW1lKS5jX3N0cigpLAogICAgICAgIGluZGljYXRvci5EcmF3T3B0aW9ucy5TaXplKTsKCiAgICBJbUd1aTo6UG9wU3R5bGVDb2xvcigzKTsKfQoKLy8gTEVEIGluZGljYXRvciBpbiB3aGljaCBhbiBhcmJpdHJhcnkgdmFsdWUgY2FuIGJlIHBhc3NlZCBkb3duIGFuZCBhIHBhaXJpbmcKLy8gZnVuY3Rpb24gdG8gdHVybiBpdCBpbnRvIGEgYm9vbGVhbi4KdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbCwgdHlwZW5hbWUgSW5wdXRUeXBlLAogICAgdHlwZW5hbWUgQ29uZGl0aW9uRnVuYyA9IHN0ZDo6ZnVuY3Rpb248Ym9vbChjb25zdCBJbnB1dFR5cGUmKT4+CnZvaWQgTEVEKGNvbnN0IEluZGljYXRvcjxJbmRpY2F0b3JUeXBlczo6TEVELCBMYWJlbD4mIGluZGljYXRvciwKICAgIGNvbnN0IElucHV0VHlwZSYgaW5fdmFsdWUsIENvbmRpdGlvbkZ1bmMmJiBjb25kaXRpb24pIHsKICAgIExFRDxMYWJlbD4oaW5kaWNhdG9yLCBjb25kaXRpb24oaW5fdmFsdWUpKTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbCwgc2l6ZV90IE5QbG90cywgc2l6ZV90IE5ZQXhpcz4Kdm9pZCBQbG90KGNvbnN0IFBsb3RJbmRpY2F0b3I8TGFiZWwsIE5QbG90cywgTllBeGlzPiYgcGxvdCwKICAgIGNvbnN0IFBsb3REYXRhQnVmZmVyPE5QbG90cz4mIHBsb3RfZGF0YSkgewogICAgaWYgKEltUGxvdDo6QmVnaW5QbG90KExhYmVsLnZhbHVlLCBwbG90LkRyYXdPcHRpb25zLlNpemUpKSB7CiAgICAgICAgSW1QbG90OjpTZXR1cEF4aXNTY2FsZShJbUF4aXNfWDEsIHBsb3QuUGxvdERyYXdPcHRpb25zLlhBeGlzU2NhbGUpOwogICAgICAgIEltUGxvdDo6U2V0dXBBeGVzKAogICAgICAgICAgICBzdGQ6OnN0cmluZyhwbG90LlBsb3REcmF3T3B0aW9ucy5YQXhpc0xhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgICsgcGxvdC5QbG90RHJhd09wdGlvbnMuWEF4aXNVbml0KS5jX3N0cigpLAogICAgICAgICAgICBzdGQ6OnN0cmluZyhwbG90LlBsb3REcmF3T3B0aW9ucy5ZQXhpc0xhYmVsc1swXQogICAgICAgICAgICAgICAgICAgICAgICArIHBsb3QuUGxvdERyYXdPcHRpb25zLllBeGlzVW5pdHNbMF0pLmNfc3RyKCksCiAgICAgICAgICAgIHBsb3QuUGxvdERyYXdPcHRpb25zLlhBeGlzRmxhZ3MsCiAgICAgICAgICAgIHBsb3QuUGxvdERyYXdPcHRpb25zLllBeGlzRmxhZ3NbMF0pOwoKICAgICAgICBpZiBjb25zdGV4cHIgKE5ZQXhpcyA9PSAyKSB7CiAgICAgICAgICAgIEltUGxvdDo6U2V0dXBBeGlzKEltQXhpc19ZMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxvdC5QbG90RHJhd09wdGlvbnMuWUF4aXNMYWJlbHNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsb3QuUGxvdERyYXdPcHRpb25zLllBeGlzRmxhZ3NbMV0pOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKE5ZQXhpcyA9PSAzKSB7CiAgICAgICAgICAgIEltUGxvdDo6U2V0dXBBeGlzKEltQXhpc19ZMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxvdC5QbG90RHJhd09wdGlvbnMuWUF4aXNMYWJlbHNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsb3QuUGxvdERyYXdPcHRpb25zLllBeGlzRmxhZ3NbMV0pOwogICAgICAgICAgICBJbVBsb3Q6OlNldHVwQXhpcyhJbUF4aXNfWTMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsb3QuUGxvdERyYXdPcHRpb25zLllBeGlzTGFiZWxzWzFdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbG90LlBsb3REcmF3T3B0aW9ucy5ZQXhpc0ZsYWdzWzJdKTsKICAgICAgICB9CgogICAgICAgIHN0YXRpYyBhdXRvIHRyYW5zZm9ybSA9IFtdKHN0ZDo6c2l6ZV90IGkpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gW19pID0gaV0oaW50IGlkeCwgdm9pZCogZGF0YSkgewogICAgICAgICAgICAgICAgYXV0byBteURhdGEgPSBzdGF0aWNfY2FzdDxQbG90RGF0YUJ1ZmZlcjxOUGxvdHM+Kj4oZGF0YSk7CiAgICAgICAgICAgICAgICBhdXRvIGRhdGFfY29sdW1uID0gKCpteURhdGEpW2lkeF07CiAgICAgICAgICAgICAgICByZXR1cm4gSW1QbG90UG9pbnQoZGF0YV9jb2x1bW4oMCksIGRhdGFfY29sdW1uKF9pKSk7CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgZm9yIChzdGQ6OnNpemVfdCBpID0gMTsgaSA8IE5QbG90czsgaSsrKSB7CiAgICAgICAgICAgIHN3aXRjaCAocGxvdC5QbG90RHJhd09wdGlvbnMuUGxvdEdyb3VwaW5nc1tpXSkgewogICAgICAgICAgICBjYXNlIFBsb3RHcm91cGluZ3NFbnVtOjpUd286CiAgICAgICAgICAgICAgICBJbVBsb3Q6OlNldEF4ZXMoSW1BeGlzX1gxLCBJbUF4aXNfWTIpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBQbG90R3JvdXBpbmdzRW51bTo6VGhyZWU6CiAgICAgICAgICAgICAgICBJbVBsb3Q6OlNldEF4ZXMoSW1BeGlzX1gxLCBJbUF4aXNfWTMpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIEltUGxvdDo6U2V0QXhlcyhJbUF4aXNfWDEsIEltQXhpc19ZMSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXRjaCAocGxvdC5QbG90RHJhd09wdGlvbnMuUGxvdFR5cGUpIHsKICAgICAgICAgICAgY2FzZSBQbG90VHlwZUVudW06OlNjYXR0ZXI6CiAgICAgICAgICAgICAgICBJbVBsb3Q6OlBsb3RTY2F0dGVyRyhwbG90LlBsb3REcmF3T3B0aW9ucy5QbG90TGFiZWxzW2ldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtKGkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnBsb3RfZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsb3RfZGF0YS5zaXplKCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBQbG90VHlwZUVudW06OkxpbmU6CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBJbVBsb3Q6OlBsb3RMaW5lRyhwbG90LlBsb3REcmF3T3B0aW9ucy5QbG90TGFiZWxzW2ldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtKGkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnBsb3RfZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsb3RfZGF0YS5zaXplKCkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgSW1QbG90OjpFbmRQbG90KCk7CiAgICB9Cn0KCnRlbXBsYXRlPENvbnRyb2xUeXBlcyBULCBTdHJpbmdMaXRlcmFsIExhYmVsLCB0eXBlbmFtZS4uLiBUeXBlcz4KY29uc3RleHByIHN0YXRpYyBhdXRvIGdldF9jb250cm9sKGNvbnN0IHN0ZDo6dHVwbGU8VHlwZXMuLi4+JiBsaXN0KSB7CiAgICByZXR1cm4gc3RkOjpnZXQ8Q29udHJvbDxULCBMYWJlbD4+KGxpc3QpOwp9Cgp0ZW1wbGF0ZTxJbmRpY2F0b3JUeXBlcyBULCBTdHJpbmdMaXRlcmFsIExhYmVsLCB0eXBlbmFtZS4uLiBUeXBlcz4KY29uc3RleHByIHN0YXRpYyBhdXRvIGdldF9pbmRpY2F0b3IoY29uc3Qgc3RkOjp0dXBsZTxUeXBlcy4uLj4mIGxpc3QpIHsKICAgIHJldHVybiBzdGQ6OmdldDxJbmRpY2F0b3I8VCwgTGFiZWw+PihsaXN0KTsKfQoKdGVtcGxhdGU8U3RyaW5nTGl0ZXJhbCBMYWJlbCwKICAgICAgICAgc2l6ZV90IE5QbG90cyA9IDEsCiAgICAgICAgIHNpemVfdCBOWUF4aXMgPSAxLAogICAgICAgICB0eXBlbmFtZS4uLiBUeXBlcz4KY29uc3RleHByIHN0YXRpYyBhdXRvIGdldF9wbG90KGNvbnN0IHN0ZDo6dHVwbGU8VHlwZXMuLi4+JiBsaXN0KSB7CiAgICByZXR1cm4gc3RkOjpnZXQ8UGxvdEluZGljYXRvcjxMYWJlbD4+KGxpc3QpOwp9Cgp0ZW1wbGF0ZTxDb250cm9sVHlwZXMgVCwgU3RyaW5nTGl0ZXJhbCBMYWJlbCwKICAgICAgICAgdHlwZW5hbWUgT3V0VHlwZSwgdHlwZW5hbWUuLi4gQXJncz4KY29uc3RleHByIGJvb2wgZ2V0X2RyYXdfZnVuY3Rpb24oY29uc3QgQ29udHJvbDxULCBMYWJlbD4mIGNvbnRyb2wsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE91dFR5cGUmIG91dCwgQXJncyYmLi4uIGFyZ3MpIHsKICAgIGlmIGNvbnN0ZXhwciAoVCA9PSBDb250cm9sVHlwZXM6OkJ1dHRvbikgewogICAgICAgIHJldHVybiBCdXR0b248TGFiZWw+KGNvbnRyb2wsIG91dCk7CiAgICB9IGVsc2UgaWYgY29uc3RleHByKFQgPT0gQ29udHJvbFR5cGVzOjpDaGVja2JveCkgewogICAgICAgIHJldHVybiBDaGVja2JveDxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gQ29udHJvbFR5cGVzOjpJbnB1dEludCkgewogICAgICAgIHJldHVybiBJbnB1dEludDxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCkgewogICAgICAgIHJldHVybiBJbnB1dEZsb2F0PExhYmVsPihjb250cm9sLCBvdXQpOwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwcihUICA9PSAgQ29udHJvbFR5cGVzOjpJbnB1dERvdWJsZSkgewogICAgICAgIHJldHVybiBJbnB1dERvdWJsZTxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6Q29tYm9Cb3gpIHsKICAgICAgICByZXR1cm4gQ29tYm9Cb3g8TGFiZWw+KGNvbnRyb2wsIG91dCwgYXJncy4uLik7CiAgICB9IGVsc2UgaWYgY29uc3RleHByKFQgID09ICBDb250cm9sVHlwZXM6OklucHV0SU5UOCkgewogICAgICAgIHJldHVybiBJbnB1dElOVDg8TGFiZWw+KGNvbnRyb2wsIG91dCk7CiAgICB9IGVsc2UgaWYgY29uc3RleHByKFQgID09ICBDb250cm9sVHlwZXM6OklucHV0VUlOVDgpIHsKICAgICAgICByZXR1cm4gSW5wdXRVSU5UODxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6SW5wdXRJTlQxNikgewogICAgICAgIHJldHVybiBJbnB1dElOVDE2PExhYmVsPihjb250cm9sLCBvdXQpOwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwcihUICA9PSAgQ29udHJvbFR5cGVzOjpJbnB1dFVJTlQxNikgewogICAgICAgIHJldHVybiBJbnB1dFVJTlQxNjxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6SW5wdXRJTlQzMikgewogICAgICAgIHJldHVybiBJbnB1dElOVDMyPExhYmVsPihjb250cm9sLCBvdXQpOwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwcihUICA9PSAgQ29udHJvbFR5cGVzOjpJbnB1dFVJTlQzMikgewogICAgICAgIHJldHVybiBJbnB1dFVJTlQzMjxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6SW5wdXRJTlQ2NCkgewogICAgICAgIHJldHVybiBJbnB1dElOVDY0PExhYmVsPihjb250cm9sLCBvdXQpOwogICAgfSBlbHNlIGlmIGNvbnN0ZXhwcihUICA9PSAgQ29udHJvbFR5cGVzOjpJbnB1dFVJTlQ2NCkgewogICAgICAgIHJldHVybiBJbnB1dFVJTlQ2NDxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0gZWxzZSBpZiBjb25zdGV4cHIoVCAgPT0gIENvbnRyb2xUeXBlczo6SW5wdXRUZXh0KSB7CiAgICAgICAgcmV0dXJuIElucHV0VGV4dDxMYWJlbD4oY29udHJvbCwgb3V0KTsKICAgIH0KCiAgICB0aHJvdygiRHJhdyBmdW5jdGlvbiBub3Qgc3VwcG9ydGVkIik7Cn0KCnRlbXBsYXRlPEluZGljYXRvclR5cGVzIFQsIFN0cmluZ0xpdGVyYWwgTGFiZWwsCiAgICAgICAgIHR5cGVuYW1lIEluVHlwZSwgdHlwZW5hbWUuLi4gQXJncz4KY29uc3RleHByIHZvaWQgZ2V0X2RyYXdfZnVuY3Rpb24oY29uc3QgSW5kaWNhdG9yPFQsIExhYmVsPiYgaW5kaWNhdG9yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJblR5cGUmIGluLCBBcmdzJiYuLi4gYXJncykgewogICAgaWYgY29uc3RleHByIChUID09IEluZGljYXRvclR5cGVzOjpOdW1lcmljYWwpIHsKICAgICAgICBOdW1lcmljYWwoaW5kaWNhdG9yLCBpbik7CiAgICB9IGVsc2UgaWYgY29uc3RleHByIChUID09IEluZGljYXRvclR5cGVzOjpTdHJpbmcpIHsKICAgICAgICBTdHJpbmcoaW5kaWNhdG9yLCBpbik7CiAgICB9IGVsc2UgaWYgY29uc3RleHByIChUID09IEluZGljYXRvclR5cGVzOjpMRUQpIHsKICAgICAgICBzdGF0aWNfYXNzZXJ0KHNpemVvZi4uLihhcmdzKSA+IDEgJiYgbm90IHN0ZDo6aXNfc2FtZV92PEluVHlwZSwgYm9vbD4sCiAgICAgICAgICAgICJMRUQgaW5kaWNhdG9yIGRvZXMgbm90IHRha2UiCiAgICAgICAgICAgICJtb3JlIHRoYW4gMSBvcHRpb25hbCBhcmd1bWVudCBpZiBJblR5cGUgaXMgbm90IGJvb2wiKTsKCiAgICAgICAgLy8gSWYgY2FsbGVkIHdpdGggMCBleHRyYSBhcmd1bWVudHMsIHRoZSBpbiB0eXBlIHNob3VsZCBiZSBib29sCiAgICAgICAgc3RhdGljX2Fzc2VydChzaXplb2YuLi4oYXJncykgPT0gMCAmJiBzdGQ6OmlzX3NhbWVfdjxJblR5cGUsIGJvb2w+LAogICAgICAgICAgICAiTEVEIGluIHR5cGUgc2hvdWxkIGJlIGJvb2wgaWYgbm8gdHJhbnNmb3JtYXRpb24gIgogICAgICAgICAgICAiZnVuY3Rpb24gaXMgcGFzc2VkIik7CgogICAgICAgIGlmIGNvbnN0ZXhwciAoc2l6ZW9mLi4uKGFyZ3MpID09IDAgJiYgc3RkOjppc19zYW1lX3Y8SW5UeXBlLCBib29sPikgewogICAgICAgICAgICBMRUQoaW5kaWNhdG9yLCBpbik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzaXplb2YuLi4oYXJncykgPT0gMSkgewogICAgICAgICAgICBMRUQoaW5kaWNhdG9yLCBpbiwgYXJncy4uLik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIERyYXdJdGVtPgp2b2lkIF9fZHJhd19pbWd1aV9iZWdpbihjb25zdCBEcmF3SXRlbSYgaXRlbSkgewogICAgc3dpdGNoIChpdGVtLkRyYXdPcHRpb25zLlRleHRQb3NpdGlvbikgewogICAgY2FzZSBUZXh0UG9zaXRpb25FbnVtOjpMZWZ0OgogICAgICAgIEltR3VpOjpUZXh0KCIlcyIsIHN0ZDo6c3RyaW5nKGl0ZW0uVGV4dCkuY19zdHIoKSk7IEltR3VpOjpTYW1lTGluZSgpOwogICAgICAgIGJyZWFrOwogICAgY2FzZSBUZXh0UG9zaXRpb25FbnVtOjpUb3A6CiAgICAgICAgSW1HdWk6OlRleHQoIiVzIiwgc3RkOjpzdHJpbmcoaXRlbS5UZXh0KS5jX3N0cigpKTsKICAgICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgICAgYnJlYWs7CiAgICB9Cn0KCnRlbXBsYXRlPHR5cGVuYW1lIERyYXdJdGVtPgp2b2lkIF9fZHJhd19pbWd1aV9lbmQoY29uc3QgRHJhd0l0ZW0mIGl0ZW0pIHsKICAgIGlmIChJbUd1aTo6SXNJdGVtSG92ZXJlZCgpIGFuZCBub3QgaXRlbS5IZWxwVGV4dC5lbXB0eSgpKSB7CiAgICAgICAgSW1HdWk6OlNldFRvb2x0aXAoIiVzIiwgc3RkOjpzdHJpbmcoaXRlbS5IZWxwVGV4dCkuY19zdHIoKSk7CiAgICB9CgogICAgc3dpdGNoIChpdGVtLkRyYXdPcHRpb25zLlRleHRQb3NpdGlvbikgewogICAgY2FzZSBUZXh0UG9zaXRpb25FbnVtOjpSaWdodDoKICAgICAgICBJbUd1aTo6U2FtZUxpbmUoKTsKICAgICAgICBJbUd1aTo6VGV4dCgiJXMiLCBzdGQ6OnN0cmluZyhpdGVtLlRleHQpLmNfc3RyKCkpOwogICAgICAgIGJyZWFrOwogICAgY2FzZSBUZXh0UG9zaXRpb25FbnVtOjpCb3R0b206CiAgICAgICAgSW1HdWk6OlRleHQoIiVzIiwgc3RkOjpzdHJpbmcoaXRlbS5UZXh0KS5jX3N0cigpKTsKICAgICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgICAgYnJlYWs7CiAgICB9Cn0KCnRlbXBsYXRlPENvbnRyb2xUeXBlcyBULCBTdHJpbmdMaXRlcmFsIExhYmVsLAogICAgdHlwZW5hbWUgRGF0YVR5cGUsCiAgICB0eXBlbmFtZSBPdXRUeXBlLAogICAgdHlwZW5hbWUgQ2FsbGJhY2sgPSBzdGQ6OmZ1bmN0aW9uPHZvaWQoRGF0YVR5cGUmKT4sCiAgICB0eXBlbmFtZS4uLiBBcmdzPgpib29sIGRyYXdfY29udHJvbChjb25zdCBDb250cm9sPFQsIExhYmVsPiYgY29udHJvbCwKICAgIERhdGFUeXBlJiBkb2UsIE91dFR5cGUmIG91dCwKICAgIHN0ZDo6ZnVuY3Rpb248Ym9vbCh2b2lkKT4mJiBjb25kaXRpb24sCiAgICBDYWxsYmFjayYmIGNhbGxiYWNrLCBjb25zdCBBcmdzJi4uLiBhcmdzKSB7CiAgICBib29sIGltZ3VpX291dF9zdGF0ZSA9IGZhbHNlOwoKICAgIF9fZHJhd19pbWd1aV9iZWdpbihjb250cm9sKTsKICAgIGltZ3VpX291dF9zdGF0ZSA9IGdldF9kcmF3X2Z1bmN0aW9uPFQ+KGNvbnRyb2wsIG91dCwgYXJncy4uLik7CiAgICBfX2RyYXdfaW1ndWlfZW5kKGNvbnRyb2wpOwoKICAgIGlmIChjb25kaXRpb24oKSkgewogICAgICAgIHNwZGxvZzo6aW5mbygiSSIpOwogICAgICAgIGRvZS5DYWxsYmFjayA9IGNhbGxiYWNrOwogICAgICAgIGRvZS5DaGFuZ2VkID0gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gaW1ndWlfb3V0X3N0YXRlOwp9Cgp0ZW1wbGF0ZTxJbmRpY2F0b3JUeXBlcyBULCBTdHJpbmdMaXRlcmFsIExhYmVsLAogICAgdHlwZW5hbWUgSW5UeXBlLAogICAgdHlwZW5hbWUuLi4gQXJncz4Kdm9pZCBkcmF3X2luZGljYXRvcihjb25zdCBJbmRpY2F0b3I8VCwgTGFiZWw+JiBpbmRpY2F0b3IsCiAgICBJblR5cGUmIGluLCBjb25zdCBBcmdzJi4uLiBhcmdzKSB7CiAgICBfX2RyYXdfaW1ndWlfYmVnaW4oaW5kaWNhdG9yKTsKICAgIGdldF9kcmF3X2Z1bmN0aW9uKGluZGljYXRvciwgaW4sIGFyZ3MuLi4pOwoKICAgIGlmIGNvbnN0ZXhwcihUID09IEluZGljYXRvclR5cGVzOjpOdW1lcmljYWwpewogICAgICAgIEltR3VpOjpTYW1lTGluZSgpOwogICAgICAgIEltR3VpOjpUZXh0KCIlcyIsIHN0ZDo6c3RyaW5nKGluZGljYXRvci5Vbml0VGV4dCkuY19zdHIoKSk7CiAgICB9CiAgICBfX2RyYXdfaW1ndWlfZW5kKGluZGljYXRvcik7Cn0KCgp9ICAvLyBuYW1lc3BhY2UgU0JDUXVlZW5zCiNlbmRpZgoAAAAAAAAAAKdjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOUMAAAAAAAA5QwAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAaEMAAAAAAABoQwAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "ImGui::"
					},
					"BwAAAE8mAAAAAAAAUCYAAAAAAAAAAAAAUCYAAAAAAABRJgAAAAAAAAAAAABRJgAAAAAAAFImAAAAAAAAAAAAAFImAAAAAAAAUyYAAAAAAAAAAAAAUyYAAAAAAABUJgAAAAAAAAAAAABUJgAAAAAAAFUmAAAAAAAAAAAAAFUmAAAAAAAAViYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATyYAAAAAAABPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": "INputHe"
					},
					"BwAAAFYmAAAAAAAAVyYAAAAAAAAAAAAAVyYAAAAAAABYJgAAAAAAAAAAAABYJgAAAAAAAFkmAAAAAAAAAAAAAFkmAAAAAAAAWiYAAAAAAAAAAAAAWiYAAAAAAABbJgAAAAAAAAAAAABbJgAAAAAAAFwmAAAAAAAAAAAAAFwmAAAAAAAAXSYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAViYAAAAAAABWJgAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					2,
					"left_delete",
					null,
					"AgAAAE8mAAAAAAAATyYAAAAAAAAOAAAASW1HdWk6OklOcHV0SGVOJgAAAAAAAE4mAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAXSYAAAAAAABPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAATiYAAAAAAABOJgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/implot_helpers.hpp",
			"settings":
			{
				"buffer_size": 20842,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					712,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABsfAAAAAAAAHB8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbHwAAAAAAABsfAAAAAAAAAAAAAAAA8L8"
				],
				[
					713,
					1,
					"left_delete",
					null,
					"AQAAABsfAAAAAAAAGx8AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcHwAAAAAAABwfAAAAAAAAAAAAAAAA8L8"
				],
				[
					714,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABsfAAAAAAAAHR8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbHwAAAAAAABsfAAAAAAAAAAAAAAAA8L8"
				],
				[
					715,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABwfAAAAAAAAHR8AAAAAAAAAAAAAHR8AAAAAAAAhHwAAAAAAAAAAAAAhHwAAAAAAACIfAAAAAAAAAAAAACIfAAAAAAAAJh8AAAAAAAAAAAAAHR8AAAAAAAAdHwAAAAAAAAQAAAAgICAgHR8AAAAAAAAiHwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcHwAAAAAAABwfAAAAAAAAAAAAAAAA8L8"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAACIfAAAAAAAAIx8AAAAAAAAAAAAAIx8AAAAAAAAkHwAAAAAAAAAAAAAkHwAAAAAAACUfAAAAAAAAAAAAACUfAAAAAAAAJh8AAAAAAAAAAAAAJh8AAAAAAAAnHwAAAAAAAAAAAAAnHwAAAAAAACgfAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiHwAAAAAAACIfAAAAAAAAAAAAAAAA8L8"
				],
				[
					724,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgfAAAAAAAAKR8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoHwAAAAAAACgfAAAAAAAAAAAAAAAA8L8"
				],
				[
					725,
					1,
					"paste",
					null,
					"AQAAACkfAAAAAAAALh8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApHwAAAAAAACkfAAAAAAAAAAAAAAAA8L8"
				],
				[
					726,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC4fAAAAAAAALx8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuHwAAAAAAAC4fAAAAAAAAAAAAAAAA8L8"
				],
				[
					745,
					1,
					"insert",
					{
						"characters": "\nstatic_asse"
					},
					"DQAAAFkaAAAAAAAAWhoAAAAAAAAAAAAAWhoAAAAAAABbGgAAAAAAAAAAAABbGgAAAAAAAFwaAAAAAAAAAAAAAFwaAAAAAAAAXRoAAAAAAAAAAAAAXRoAAAAAAABeGgAAAAAAAAAAAABeGgAAAAAAAF8aAAAAAAAAAAAAAF8aAAAAAAAAYBoAAAAAAAAAAAAAYBoAAAAAAABhGgAAAAAAAAAAAABhGgAAAAAAAGIaAAAAAAAAAAAAAGIaAAAAAAAAYxoAAAAAAAAAAAAAYxoAAAAAAABkGgAAAAAAAAAAAABkGgAAAAAAAGUaAAAAAAAAAAAAAGUaAAAAAAAAZhoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZGgAAAAAAAFkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					746,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AgAAAGYaAAAAAAAAZxoAAAAAAAAAAAAAZxoAAAAAAABoGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmGgAAAAAAAGYaAAAAAAAAAAAAAAAA8L8"
				],
				[
					747,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGgaAAAAAAAAahoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoGgAAAAAAAGgaAAAAAAAAAAAAAAAA8L8"
				],
				[
					758,
					1,
					"paste",
					null,
					"AQAAAGkaAAAAAAAAcRoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpGgAAAAAAAGkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAHEaAAAAAAAAchoAAAAAAAAAAAAAchoAAAAAAABzGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxGgAAAAAAAHEaAAAAAAAAAAAAAAAA8L8"
				],
				[
					760,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAHMaAAAAAAAAdBoAAAAAAAAAAAAAdBoAAAAAAAB1GgAAAAAAAAAAAAB1GgAAAAAAAHYaAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzGgAAAAAAAHMaAAAAAAAAAAAAAAAA8L8"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYaAAAAAAAAdxoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2GgAAAAAAAHYaAAAAAAAAAAAAAAAA8L8"
				],
				[
					762,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHcaAAAAAAAAeRoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3GgAAAAAAAHcaAAAAAAAAAAAAAAAA8L8"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": "There"
					},
					"BQAAAHgaAAAAAAAAeRoAAAAAAAAAAAAAeRoAAAAAAAB6GgAAAAAAAAAAAAB6GgAAAAAAAHsaAAAAAAAAAAAAAHsaAAAAAAAAfBoAAAAAAAAAAAAAfBoAAAAAAAB9GgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4GgAAAAAAAHgaAAAAAAAAAAAAAAAA8L8"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": " must"
					},
					"BQAAAH0aAAAAAAAAfhoAAAAAAAAAAAAAfhoAAAAAAAB/GgAAAAAAAAAAAAB/GgAAAAAAAIAaAAAAAAAAAAAAAIAaAAAAAAAAgRoAAAAAAAAAAAAAgRoAAAAAAACCGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9GgAAAAAAAH0aAAAAAAAAAAAAAAAA8L8"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": " be"
					},
					"AwAAAIIaAAAAAAAAgxoAAAAAAAAAAAAAgxoAAAAAAACEGgAAAAAAAAAAAACEGgAAAAAAAIUaAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCGgAAAAAAAIIaAAAAAAAAAAAAAAAA8L8"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAIUaAAAAAAAAhhoAAAAAAAAAAAAAhhoAAAAAAACHGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFGgAAAAAAAIUaAAAAAAAAAAAAAAAA8L8"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": " least"
					},
					"BgAAAIcaAAAAAAAAiBoAAAAAAAAAAAAAiBoAAAAAAACJGgAAAAAAAAAAAACJGgAAAAAAAIoaAAAAAAAAAAAAAIoaAAAAAAAAixoAAAAAAAAAAAAAixoAAAAAAACMGgAAAAAAAAAAAACMGgAAAAAAAI0aAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHGgAAAAAAAIcaAAAAAAAAAAAAAAAA8L8"
				],
				[
					768,
					1,
					"insert",
					{
						"characters": " one"
					},
					"BAAAAI0aAAAAAAAAjhoAAAAAAAAAAAAAjhoAAAAAAACPGgAAAAAAAAAAAACPGgAAAAAAAJAaAAAAAAAAAAAAAJAaAAAAAAAAkRoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNGgAAAAAAAI0aAAAAAAAAAAAAAAAA8L8"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": " plot!"
					},
					"BgAAAJEaAAAAAAAAkhoAAAAAAAAAAAAAkhoAAAAAAACTGgAAAAAAAAAAAACTGgAAAAAAAJQaAAAAAAAAAAAAAJQaAAAAAAAAlRoAAAAAAAAAAAAAlRoAAAAAAACWGgAAAAAAAAAAAACWGgAAAAAAAJcaAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRGgAAAAAAAJEaAAAAAAAAAAAAAAAA8L8"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJkaAAAAAAAAmhoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZGgAAAAAAAJkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					772,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJoaAAAAAAAAmxoAAAAAAAAAAAAAmxoAAAAAAACcGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaGgAAAAAAAJoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					774,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAJsaAAAAAAAAmxoAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcGgAAAAAAAJwaAAAAAAAAAAAAAAAA8L8"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAHsbAAAAAAAAfBsAAAAAAAAAAAAAfBsAAAAAAAB9GwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7GwAAAAAAAHsbAAAAAAAAAAAAAAAA8L8"
				],
				[
					783,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAH0bAAAAAAAAfhsAAAAAAAAAAAAAfhsAAAAAAAB/GwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9GwAAAAAAAH0bAAAAAAAAAAAAAAAA8L8"
				],
				[
					790,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAJgeAAAAAAAAmR4AAAAAAAAAAAAAmR4AAAAAAACaHgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYHgAAAAAAAJgeAAAAAAAAAAAAAAAA8L8"
				],
				[
					791,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAJoeAAAAAAAAmx4AAAAAAAAAAAAAmx4AAAAAAACcHgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaHgAAAAAAAJoeAAAAAAAAAAAAAAAA8L8"
				],
				[
					794,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAPgeAAAAAAAA+R4AAAAAAAAAAAAA+R4AAAAAAAD6HgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4HgAAAAAAAPgeAAAAAAAAAAAAAAAA8L8"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAPoeAAAAAAAA+x4AAAAAAAAAAAAA+x4AAAAAAAD8HgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6HgAAAAAAAPoeAAAAAAAAAAAAAAAA8L8"
				],
				[
					801,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaGgAAAAAAAFsaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAmhoAAAAAAABbGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAmhoAAAAAAABbGgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuiEAAAAAAAC6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuiEAAAAAAAC6IQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/gui_windows/IndicatorList.hpp",
			"settings":
			{
				"buffer_size": 2530,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BwAAALIHAAAAAAAAsgcAAAAAAAADAAAALy8gkQcAAAAAAACRBwAAAAAAAAMAAAAvLyBxBwAAAAAAAHEHAAAAAAAAAwAAAC8vIEEHAAAAAAAAQQcAAAAAAAADAAAALy8gFgcAAAAAAAAWBwAAAAAAAAMAAAAvLyDxBgAAAAAAAPEGAAAAAAAAAwAAAC8vILoGAAAAAAAAugYAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAtwcAAAAAAAC5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAANIGAAAAAAAA0wYAAAAAAAAAAAAA0wYAAAAAAADTBgAAAAAAAAIAAAA2NA",
					"AQAAAAAAAAABAAAA0gYAAAAAAADUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "Group"
					},
					"BgAAAMkGAAAAAAAAygYAAAAAAAAAAAAAygYAAAAAAADKBgAAAAAAAAYAAABQdWxzZXPKBgAAAAAAAMsGAAAAAAAAAAAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADNBgAAAAAAAAAAAADNBgAAAAAAAM4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQYAAAAAAADPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAM4GAAAAAAAAzwYAAAAAAAAAAAAAzwYAAAAAAADQBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgYAAAAAAADOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALgGAAAAAAAAuQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAYAAAAAAAC4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAALkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC8BgAAAAAAAAAAAAC6BgAAAAAAALoGAAAAAAAAAgAAAAkJugYAAAAAAAC7BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAALoGAAAAAAAAugYAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAuwYAAAAAAAC7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA6AYAAAAAAADoBgAAAAAAAAIAAAA2NA",
					"AQAAAAAAAAABAAAA5wYAAAAAAADpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "constexpr"
					},
					"CQAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAAgQQAAAAAAACCBAAAAAAAAAAAAACCBAAAAAAAAIMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " auto"
					},
					"BQAAAIMEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " fill_same"
					},
					"CgAAAIgEAAAAAAAAiQQAAAAAAAAAAAAAiQQAAAAAAACKBAAAAAAAAAAAAACKBAAAAAAAAIsEAAAAAAAAAAAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJEEAAAAAAAAAAAAAJEEAAAAAAAAkgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAQAAAAAAACIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJIEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgQAAAAAAACSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAJMEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwQAAAAAAACTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAJMEAAAAAAAAkwQAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAlAQAAAAAAACUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\ntemplate<>"
					},
					"CwAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAB7BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAB+BAAAAAAAAH8EAAAAAAAAAAAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAGlA"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "size_t"
					},
					"BgAAAIMEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAACLBAAAAAAAAIwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQQAAAAAAACJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " N"
					},
					"AgAAAIwEAAAAAAAAjQQAAAAAAAAAAAAAjQQAAAAAAACOBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAAI0EAAAAAAAAjQQAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAAjgQAAAAAAACOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "Indexes"
					},
					"BwAAAI0EAAAAAAAAjgQAAAAAAAAAAAAAjgQAAAAAAACPBAAAAAAAAAAAAACPBAAAAAAAAJAEAAAAAAAAAAAAAJAEAAAAAAAAkQQAAAAAAAAAAAAAkQQAAAAAAACSBAAAAAAAAAAAAACSBAAAAAAAAJMEAAAAAAAAAAAAAJMEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "size_t"
					},
					"BgAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALUEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAALUEAAAAAAAAtQQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtgQAAAAAAAC2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAC3BAAAAAAAALgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAALgEAAAAAAAAuQQAAAAAAAAAAAAAuQQAAAAAAAC6BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAALkEAAAAAAAAuQQAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAugQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "Indexes"
					},
					"BwAAALkEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC7BAAAAAAAAAAAAAC7BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAvQQAAAAAAAAAAAAAvQQAAAAAAAC+BAAAAAAAAAAAAAC+BAAAAAAAAL8EAAAAAAAAAAAAAL8EAAAAAAAAwAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQQAAAAAAAC5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAL8EAAAAAAAAvwQAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAwAQAAAAAAADABAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAL8EAAAAAAAAwAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwQAAAAAAAC/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMEEAAAAAAAAwgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMIEAAAAAAAAxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "typename"
					},
					"CQAAAIMEAAAAAAAAhAQAAAAAAAAAAAAAxQQAAAAAAADFBAAAAAAAAAEAAAAJhAQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIkEAAAAAAAAAAAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " Value,"
					},
					"BwAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJEEAAAAAAAAAAAAAJEEAAAAAAAAkgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwQAAAAAAACLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJIEAAAAAAAAkwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgQAAAAAAACSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"reindent",
					null,
					"AQAAANQEAAAAAAAA1QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AQAAAAAAADUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAANUEAAAAAAAA1gQAAAAAAAAAAAAA1gQAAAAAAADXBAAAAAAAAAAAAADXBAAAAAAAANgEAAAAAAAAAAAAANgEAAAAAAAA2QQAAAAAAAAAAAAA2QQAAAAAAADaBAAAAAAAAAAAAADaBAAAAAAAANsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QQAAAAAAADVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsEAAAAAAAA3AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wQAAAAAAADbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANwEAAAAAAAA3gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAN0EAAAAAAAA3wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN8EAAAAAAAA4QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wQAAAAAAADfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOEEAAAAAAAA4wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " retu"
					},
					"BQAAAOIEAAAAAAAA4wQAAAAAAAAAAAAA4wQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOUEAAAAAAAAAAAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA5gQAAAAAAADnBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gQAAAAAAADiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"left_delete",
					null,
					"AQAAAOYEAAAAAAAA5gQAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA5wQAAAAAAADnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "run"
					},
					"AwAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gQAAAAAAADmBAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					3,
					"left_delete",
					null,
					"AwAAAOgEAAAAAAAA6AQAAAAAAAABAAAAbucEAAAAAAAA5wQAAAAAAAABAAAAdeYEAAAAAAAA5gQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA6QQAAAAAAADpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gQAAAAAAADmBAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					3,
					"left_delete",
					null,
					"AwAAAOkEAAAAAAAA6QQAAAAAAAABAAAAbugEAAAAAAAA6AQAAAAAAAABAAAAcucEAAAAAAAA5wQAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA6gQAAAAAAADqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "constexp"
					},
					"CAAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAAgQQAAAAAAACCBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAAAA"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggQAAAAAAACCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " auto"
					},
					"BQAAAIMEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " fill_same_he"
					},
					"DQAAAIgEAAAAAAAAiQQAAAAAAAAAAAAAiQQAAAAAAACKBAAAAAAAAAAAAACKBAAAAAAAAIsEAAAAAAAAAAAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJEEAAAAAAAAAAAAAJEEAAAAAAAAkgQAAAAAAAAAAAAAkgQAAAAAAACTBAAAAAAAAAAAAACTBAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAlQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAQAAAAAAACIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "lper"
					},
					"BAAAAJUEAAAAAAAAlgQAAAAAAAAAAAAAlgQAAAAAAACXBAAAAAAAAAAAAACXBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAmQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQQAAAAAAACVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkEAAAAAAAAmwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQQAAAAAAACZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAHoEAAAAAAAAkgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " size_t"
					},
					"BwAAAJIEAAAAAAAAkwQAAAAAAAAAAAAAkwQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJUEAAAAAAAAAAAAAJUEAAAAAAAAlgQAAAAAAAAAAAAAlgQAAAAAAACXBAAAAAAAAAAAAACXBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAmQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgQAAAAAAACSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " N>"
					},
					"AwAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACbBAAAAAAAAAAAAACbBAAAAAAAAJwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQQAAAAAAACZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"paste",
					null,
					"AQAAAL0EAAAAAAAAwgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQQAAAAAAAC9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAAMIEAAAAAAAAwwQAAAAAAAAAAAAAwwQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkEAAAAAAAAygQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQQAAAAAAADJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMoEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAMsEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADNBAAAAAAAAAAAAADMBAAAAAAAAM0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywQAAAAAAADLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAM0EAAAAAAAAzgQAAAAAAAAAAAAAzgQAAAAAAADPBAAAAAAAAAAAAADPBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA0QQAAAAAAAAAAAAA0QQAAAAAAADSBAAAAAAAAAAAAADSBAAAAAAAANMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQQAAAAAAADNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " value;"
					},
					"BwAAANMEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADVBAAAAAAAAAAAAADVBAAAAAAAANYEAAAAAAAAAAAAANYEAAAAAAAA1wQAAAAAAAAAAAAA1wQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANkEAAAAAAAAAAAAANkEAAAAAAAA2gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wQAAAAAAADTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					2,
					"left_delete",
					null,
					"AgAAAEIFAAAAAAAAQgUAAAAAAAAKAAAAXSgpeyByZXR0fUEFAAAAAAAAQQUAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAATAUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEEFAAAAAAAAQwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQUAAAAAAABBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"paste",
					null,
					"AQAAAEIFAAAAAAAAUgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABUBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "Indexes..."
					},
					"CgAAAFMFAAAAAAAAVAUAAAAAAAAAAAAAVAUAAAAAAABVBQAAAAAAAAAAAABVBQAAAAAAAFYFAAAAAAAAAAAAAFYFAAAAAAAAVwUAAAAAAAAAAAAAVwUAAAAAAABYBQAAAAAAAAAAAABYBQAAAAAAAFkFAAAAAAAAAAAAAFkFAAAAAAAAWgUAAAAAAAAAAAAAWgUAAAAAAABbBQAAAAAAAAAAAABbBQAAAAAAAFwFAAAAAAAAAAAAAFwFAAAAAAAAXQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF4FAAAAAAAAYAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGUFAAAAAAAAZgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQUAAAAAAABlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGYFAAAAAAAAZwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgUAAAAAAABmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMFAAAAAAAARAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAAEMFAAAAAAAAQwUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARAUAAAAAAABEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIFAAAAAAAAQwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"paste",
					null,
					"AgAAAD8IAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABICAAAAAAAAAEAAAB7",
					"AQAAAAAAAAABAAAAPwgAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAEgIAAAAAAAASQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAgAAAAAAABICAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"left_delete",
					null,
					"AQAAAF8IAAAAAAAAXwgAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAYAgAAAAAAABgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAF8IAAAAAAAAYAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwgAAAAAAABfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"cut",
					null,
					"AQAAAPcEAAAAAAAA9wQAAAAAAAARAAAAc2l6ZV90Li4uIEluZGV4ZXM",
					"AQAAAAAAAAABAAAACAUAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"paste",
					null,
					"AgAAAJMEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAACkBAAAAAAAAAgAAABzaXplX3QgTg",
					"AQAAAAAAAAABAAAAmwQAAAAAAACTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "size_t"
					},
					"BgAAAAAFAAAAAAAAAQUAAAAAAAAAAAAAAQUAAAAAAAACBQAAAAAAAAAAAAACBQAAAAAAAAMFAAAAAAAAAAAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAAFBQAAAAAAAAYFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " N"
					},
					"AgAAAAYFAAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAIBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgUAAAAAAAAGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"left_delete",
					null,
					"AQAAACMFAAAAAAAAIwUAAAAAAAARAAAAc2l6ZV90Li4uIEluZGV4ZXM",
					"AQAAAAAAAAABAAAANAUAAAAAAAAjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "Value"
					},
					"BQAAACMFAAAAAAAAJAUAAAAAAAAAAAAAJAUAAAAAAAAlBQAAAAAAAAAAAAAlBQAAAAAAACYFAAAAAAAAAAAAACYFAAAAAAAAJwUAAAAAAAAAAAAAJwUAAAAAAAAoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwUAAAAAAAAjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAAqBQAAAAAAAAAAAAAqBQAAAAAAACsFAAAAAAAAAAAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAAtBQAAAAAAAC4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"paste",
					null,
					"AgAAAE4FAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAAByBQAAAAAAAAcAAABJbmRleGVz",
					"AQAAAAAAAAABAAAATgUAAAAAAABVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					3,
					"left_delete",
					null,
					"AwAAADwFAAAAAAAAPAUAAAAAAAABAAAAIDsFAAAAAAAAOwUAAAAAAAABAAAAezoFAAAAAAAAOgUAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAPQUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					3,
					"left_delete",
					null,
					"AwAAAH0FAAAAAAAAfQUAAAAAAAABAAAAfXwFAAAAAAAAfAUAAAAAAAABAAAAfXsFAAAAAAAAewUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfgUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AgAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABlBQAAAAAAAAgAAABOdW1QbG90cw",
					"AQAAAAAAAAABAAAAZAUAAAAAAABsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANEEAAAAAAAA0gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QQAAAAAAADRBAAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIEAAAAAAAA0wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gQAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"paste",
					null,
					"AQAAANMEAAAAAAAA5AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wQAAAAAAADTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"cut",
					null,
					"AQAAAF8FAAAAAAAAXwUAAAAAAAAfAAAAdGQ6Om1ha2VfaW5kZXhfc2VxdWVuY2U8Tj57fS4uLg",
					"AQAAAAAAAAABAAAAXwUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"left_delete",
					null,
					"AQAAAF4FAAAAAAAAXgUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					2,
					"left_delete",
					null,
					"AgAAAF4FAAAAAAAAXgUAAAAAAAABAAAAPl0FAAAAAAAAXQUAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGMFAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwUAAAAAAABjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQFAAAAAAAAZQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAGUFAAAAAAAAhAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQUAAAAAAABlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					3,
					"left_delete",
					null,
					"AwAAAJsEAAAAAAAAmwQAAAAAAAABAAAALpoEAAAAAAAAmgQAAAAAAAABAAAALpkEAAAAAAAAmQQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAnAQAAAAAAACcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					3,
					"left_delete",
					null,
					"AwAAANgEAAAAAAAA2AQAAAAAAAABAAAALtcEAAAAAAAA1wQAAAAAAAABAAAALtYEAAAAAAAA1gQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA2QQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "Index"
					},
					"BgAAAJoEAAAAAAAAmwQAAAAAAAAAAAAAmwQAAAAAAACbBAAAAAAAAAcAAABJbmRleGVzmwQAAAAAAACcBAAAAAAAAAAAAACcBAAAAAAAAJ0EAAAAAAAAAAAAAJ0EAAAAAAAAngQAAAAAAAAAAAAAngQAAAAAAACfBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"paste",
					null,
					"AgAAANUEAAAAAAAA2gQAAAAAAAAAAAAA2gQAAAAAAADaBAAAAAAAAAcAAABJbmRleGVz",
					"AQAAAAAAAAABAAAA1QQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"cut",
					null,
					"AQAAAFsFAAAAAAAAWwUAAAAAAAAfAAAAdGQ6Om1ha2VfaW5kZXhfc2VxdWVuY2U8Tj57fS4uLg",
					"AQAAAAAAAAABAAAAWwUAAAAAAAB6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					2,
					"left_delete",
					null,
					"AgAAAFoFAAAAAAAAWgUAAAAAAAABAAAAIFkFAAAAAAAAWQUAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWwUAAAAAAABbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAFMFAAAAAAAAVAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"paste",
					null,
					"AQAAAFQFAAAAAAAAcwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAUAAAAAAABUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAHMFAAAAAAAAdAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwUAAAAAAABzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "{{"
					},
					"AgAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": " }}"
					},
					"AwAAAH0FAAAAAAAAfgUAAAAAAAAAAAAAfgUAAAAAAAB/BQAAAAAAAAAAAAB/BQAAAAAAAIAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQUAAAAAAAB9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					3,
					"left_delete",
					null,
					"AwAAAH8FAAAAAAAAfwUAAAAAAAABAAAAfX4FAAAAAAAAfgUAAAAAAAABAAAAfX0FAAAAAAAAfQUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAgAUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					2,
					"left_delete",
					null,
					"AgAAAEQFAAAAAAAARAUAAAAAAAABAAAAe0MFAAAAAAAAQwUAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAARQUAAAAAAABFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACbBAAAAAAAAAAAAACbBAAAAAAAAJwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQQAAAAAAACZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAANcEAAAAAAAA2AQAAAAAAAAAAAAA2AQAAAAAAADZBAAAAAAAAAAAAADZBAAAAAAAANoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wQAAAAAAADXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAKIEAAAAAAAAowQAAAAAAAAAAAAAowQAAAAAAACkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogQAAAAAAACiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"paste",
					null,
					"AgAAAN0EAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADkBAAAAAAAAAUAAABJbmRleA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"cut",
					null,
					"AQAAAF4FAAAAAAAAXgUAAAAAAAAfAAAAdGQ6Om1ha2VfaW5kZXhfc2VxdWVuY2U8Tj57fS4uLg",
					"AQAAAAAAAAABAAAAfQUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					2,
					"left_delete",
					null,
					"AgAAAF4FAAAAAAAAXgUAAAAAAAABAAAAPl0FAAAAAAAAXQUAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGMFAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwUAAAAAAABjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQFAAAAAAAAZQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"paste",
					null,
					"AQAAAGUFAAAAAAAAhAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQUAAAAAAABlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": "{{"
					},
					"AgAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA8QQAAAAAAADyBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "}}"
					},
					"AgAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AQAAAAAAAD4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"left_delete",
					null,
					"AQAAAPgEAAAAAAAA+AQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": "constesxp"
					},
					"CQAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAB7BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAB+BAAAAAAAAH8EAAAAAAAAAAAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAAAA"
				],
				[
					338,
					4,
					"left_delete",
					null,
					"BAAAAIEEAAAAAAAAgQQAAAAAAAABAAAAcIAEAAAAAAAAgAQAAAAAAAABAAAAeH8EAAAAAAAAfwQAAAAAAAABAAAAc34EAAAAAAAAfgQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAggQAAAAAAACCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": "expr"
					},
					"BAAAAH4EAAAAAAAAfwQAAAAAAAAAAAAAfwQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIEEAAAAAAAAAAAAAIEEAAAAAAAAggQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " auto"
					},
					"BQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIUEAAAAAAAAAAAAAIUEAAAAAAAAhgQAAAAAAAAAAAAAhgQAAAAAAACHBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggQAAAAAAACCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": " unpac"
					},
					"BgAAAIcEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACJBAAAAAAAAAAAAACJBAAAAAAAAIoEAAAAAAAAAAAAAIoEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACMBAAAAAAAAAAAAACMBAAAAAAAAI0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwQAAAAAAACHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "k_"
					},
					"AgAAAI0EAAAAAAAAjgQAAAAAAAAAAAAAjgQAAAAAAACPBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					7,
					"left_delete",
					null,
					"BwAAAI4EAAAAAAAAjgQAAAAAAAABAAAAX40EAAAAAAAAjQQAAAAAAAABAAAAa4wEAAAAAAAAjAQAAAAAAAABAAAAY4sEAAAAAAAAiwQAAAAAAAABAAAAYYoEAAAAAAAAigQAAAAAAAABAAAAcIkEAAAAAAAAiQQAAAAAAAABAAAAbogEAAAAAAAAiAQAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAjwQAAAAAAACPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAIgEAAAAAAAAiQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAQAAAAAAACIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkEAAAAAAAAiwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQQAAAAAAACJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHgEAAAAAAAAeQQAAAAAAAAAAAAAeQQAAAAAAAB6BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"paste",
					null,
					"AQAAAHoEAAAAAAAApgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					4,
					"left_delete",
					null,
					"BAAAAJ0EAAAAAAAAnQQAAAAAAAABAAAAIJwEAAAAAAAAnAQAAAAAAAABAAAALpsEAAAAAAAAmwQAAAAAAAABAAAALpoEAAAAAAAAmgQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAngQAAAAAAACeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoEAAAAAAAAmwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgQAAAAAAACaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					2,
					"left_delete",
					null,
					"AgAAAKEEAAAAAAAAoQQAAAAAAAABAAAAc6AEAAAAAAAAoAQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAogQAAAAAAACiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQEAAAAAAAAtQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAQAAAAAAAC0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALUEAAAAAAAAtwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC4BAAAAAAAAAAAAAC3BAAAAAAAALgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgQAAAAAAAC2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "Value"
					},
					"BgAAALMEAAAAAAAAtAQAAAAAAAAAAAAAuAQAAAAAAAC4BAAAAAAAAAEAAAAJtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswQAAAAAAACzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAALgEAAAAAAAAuQQAAAAAAAAAAAAAuQQAAAAAAAC6BAAAAAAAAAAAAAC6BAAAAAAAALsEAAAAAAAAAAAAALsEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAAC9BAAAAAAAAAAAAAC9BAAAAAAAAL4EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"reindent",
					null,
					"AQAAAMIEAAAAAAAAwwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAADFBAAAAAAAAMYEAAAAAAAAAAAAAMYEAAAAAAAAxwQAAAAAAAAAAAAAxwQAAAAAAADIBAAAAAAAAAAAAADIBAAAAAAAAMkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " value;"
					},
					"BwAAAMkEAAAAAAAAygQAAAAAAAAAAAAAygQAAAAAAADLBAAAAAAAAAAAAADLBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAADOBAAAAAAAAM8EAAAAAAAAAAAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQQAAAAAAADJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "t<>"
					},
					"AwAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAUAAAAAAABMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "Indexes"
					},
					"BwAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAABTBQAAAAAAAAAAAABTBQAAAAAAAFQFAAAAAAAAAAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAFYFAAAAAAAAVwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgUAAAAAAABWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFwFAAAAAAAAXQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAANEIAAAAAAAA0ggAAAAAAAAAAAAA0ggAAAAAAADTCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QgAAAAAAADRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAANIIAAAAAAAA0wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0ggAAAAAAADSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"left_delete",
					null,
					"AQAAAJ0IAAAAAAAAnQgAAAAAAAAWAAAAeyJDdXJyZW50IiwgIlZvbHRhZ2UifQ",
					"AQAAAAAAAAABAAAAnQgAAAAAAACzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAJ0IAAAAAAAAnggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ4IAAAAAAAAnwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"left_delete",
					null,
					"AQAAAJ4IAAAAAAAAnggAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnwgAAAAAAACfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAJ4IAAAAAAAAnwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJ4IAAAAAAAAoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAJ8IAAAAAAAAoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwgAAAAAAACfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKEIAAAAAAAAoggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQgAAAAAAAChCAAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIIAAAAAAAAowgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoggAAAAAAACiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKMIAAAAAAAApQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowgAAAAAAACjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKQIAAAAAAAApQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAgAAAAAAACkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKYIAAAAAAAApwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApggAAAAAAACmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKcIAAAAAAAAqAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwgAAAAAAACnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKgIAAAAAAAAqggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAgAAAAAAACoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKkIAAAAAAAAqggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQgAAAAAAACpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"left_delete",
					null,
					"AQAAAKkIAAAAAAAAqQgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAqggAAAAAAACqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAKkIAAAAAAAAqggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQgAAAAAAACpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKsIAAAAAAAArAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwgAAAAAAACrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwIAAAAAAAArQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAgAAAAAAACsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAK0IAAAAAAAArwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQgAAAAAAACtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAK4IAAAAAAAArwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArggAAAAAAACuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALAIAAAAAAAAsQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAgAAAAAAACwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEIAAAAAAAAsggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQgAAAAAAACxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALIIAAAAAAAAtAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsggAAAAAAACyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAALMIAAAAAAAAtAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswgAAAAAAACzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALUIAAAAAAAAtggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQgAAAAAAAC1CAAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYIAAAAAAAAtwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtggAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALcIAAAAAAAAuQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwgAAAAAAAC3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAALgIAAAAAAAAuQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAgAAAAAAAC4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALoIAAAAAAAAuwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuggAAAAAAAC6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALsIAAAAAAAAvAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwgAAAAAAAC7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALwIAAAAAAAAvggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAL0IAAAAAAAAvggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQgAAAAAAAC9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL8IAAAAAAAAwAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwgAAAAAAAC/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMAIAAAAAAAAwQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAgAAAAAAADACAAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMEIAAAAAAAAwwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQgAAAAAAADBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAMIIAAAAAAAAwwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"left_delete",
					null,
					"AQAAAMIIAAAAAAAAwggAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAwwgAAAAAAADDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAAMIIAAAAAAAAwwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMQIAAAAAAAAxQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAgAAAAAAADECAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMUIAAAAAAAAxggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQgAAAAAAADFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMYIAAAAAAAAyAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAMcIAAAAAAAAyAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwgAAAAAAADHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					5,
					"left_delete",
					null,
					"BQAAAB4JAAAAAAAAHgkAAAAAAAABAAAAXR0JAAAAAAAAHQkAAAAAAAABAAAAcBwJAAAAAAAAHAkAAAAAAAABAAAAcxsJAAAAAAAAGwkAAAAAAAABAAAAWxoJAAAAAAAAGgkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAHwkAAAAAAAAfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": "\n\\"
					},
					"AwAAABwJAAAAAAAAHQkAAAAAAAAAAAAAHQkAAAAAAAAfCQAAAAAAAAAAAAAfCQAAAAAAACAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAkAAAAAAAAcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"paste",
					null,
					"AQAAACAJAAAAAAAAPgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAkAAAAAAAAgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"left_delete",
					null,
					"AQAAAB8JAAAAAAAAHwkAAAAAAAADAAAAXAkJ",
					"AQAAAAAAAAABAAAAIgkAAAAAAAAfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": "sp"
					},
					"AwAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAvCQAAAAAAAAoAAABMb2NhbCBUaW1lLwkAAAAAAAAwCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABoJAAAAAAAAGwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgkAAAAAAAAaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"left_delete",
					null,
					"AQAAAE8JAAAAAAAATwkAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"left_delete",
					null,
					"AQAAAEgJAAAAAAAASAkAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFAJAAAAAAAAUQkAAAAAAAAAAAAAUQkAAAAAAABTCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"paste",
					null,
					"AQAAAFMJAAAAAAAAcQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwkAAAAAAABTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"left_delete",
					null,
					"AQAAAGMJAAAAAAAAYwkAAAAAAAAEAAAAW3VBXQ",
					"AQAAAAAAAAABAAAAZwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					7,
					"left_delete",
					null,
					"BwAAAGoJAAAAAAAAagkAAAAAAAABAAAAImkJAAAAAAAAaQkAAAAAAAABAAAAXWgJAAAAAAAAaAkAAAAAAAABAAAAVmcJAAAAAAAAZwkAAAAAAAABAAAAW2YJAAAAAAAAZgkAAAAAAAABAAAAImUJAAAAAAAAZQkAAAAAAAABAAAAIGQJAAAAAAAAZAkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAawkAAAAAAABrCQAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABpCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgkAAAAAAABmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"paste",
					null,
					"AQAAAGkJAAAAAAAAjAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQkAAAAAAABpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"left_delete",
					null,
					"AQAAAIsJAAAAAAAAiwkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAjAkAAAAAAACMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAIsJAAAAAAAAjAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwkAAAAAAACLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFAJAAAAAAAAUQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI0JAAAAAAAAjgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI4JAAAAAAAAjwkAAAAAAAAAAAAAjwkAAAAAAACRCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					1,
					"paste",
					null,
					"AQAAAJEJAAAAAAAAtwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQkAAAAAAACRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAALcJAAAAAAAAuAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwkAAAAAAAC3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"cut",
					null,
					"AQAAAH4FAAAAAAAAfgUAAAAAAAAKAAAALCBzaXplX3QgTg",
					"AQAAAAAAAAABAAAAiAUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"paste",
					null,
					"AgAAAHAFAAAAAAAAegUAAAAAAAAAAAAAegUAAAAAAAB6BQAAAAAAAAEAAAB0",
					"AQAAAAAAAAABAAAAcAUAAAAAAABxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					2,
					"left_delete",
					null,
					"AgAAAHEFAAAAAAAAcQUAAAAAAAABAAAAIHAFAAAAAAAAcAUAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAHkFAAAAAAAAegUAAAAAAAAAAAAAegUAAAAAAAB7BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQUAAAAAAAB5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANIFAAAAAAAA0wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gUAAAAAAADSBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/gui_windows/ControlList.hpp",
			"settings":
			{
				"buffer_size": 4395,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAArEQAAI2lmbmRlZiBDT05UUk9MTElTVF9oCiNkZWZpbmUgQ09OVFJPTExJU1RfaAojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9pbWd1aV9oZWxwZXJzLmhwcCIKI2luY2x1ZGUgPHVub3JkZXJlZF9tYXA+CiNwcmFnbWEgb25jZQoKLy8gQyBTVEQgaW5jbHVkZXMKLy8gQyAzcmQgcGFydHkgaW5jbHVkZXMKLy8gQysrIFNURCBpbmNsdWRlcwojaW5jbHVkZSA8dHVwbGU+CgovLyBDKysgM3JkIHBhcnR5IGluY2x1ZGVzCi8vIE15IGluY2x1ZGVzCiNpbmNsdWRlICJzYmNxdWVlbnMtZ3VpL2hhcmR3YXJlX2hlbHBlcnMvU2lQTUFjcXVpc2l0aW9uRGF0YS5ocHAiCiNpbmNsdWRlICJzYmNxdWVlbnMtZ3VpL2hhcmR3YXJlX2hlbHBlcnMvVGVlbnN5Q29udHJvbGxlckRhdGEuaHBwIgojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9oYXJkd2FyZV9oZWxwZXJzL1Nsb3dEQVFEYXRhLmhwcCIKCm5hbWVzcGFjZSBTQkNRdWVlbnMgewoKLy8gSGVyZSB5b3UgZmluZCBhbGwgdGhlIGNvbXBpbGUgYXZhaWxhYmxlIGNvbnRyb2xzLgpjb25zdGV4cHIgc3RhdGljIGF1dG8gU2lQTUdVSUNvbnRyb2xzID0gc3RkOjptYWtlX3R1cGxlKAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiQ0FFTiBQb3J0Ij57IiIsICJVc3VhbGx5IDAgYXMgbG9uZyBhcyB0aGVyZSBpcyBubyAiCiAgICAgICAgICAgICJvdGhlciBDQUVOIGRpZ2l0aXplcnMgY29ubmVjdGVkLiBJZiB0aGVyZSBhcmUgbW9yZSwgIgogICAgICAgICAgICAidGhlIHBvcnQgaW5jcmVhc2VzIGFzIHRoZXkgd2VyZSBjb25uZWN0ZWQgdG8gdGhlICIKICAgICAgICAgICAgImNvbXB1dGVyLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkNvbWJvQm94LCAiQ29ubmVjdGlvbiBUeXBlIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkNvbWJvQm94LCAiTW9kZWwiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMzIsICJWTUUgQWRkcmVzcyI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dFRleHQsICJLZWl0aGxleSBDT00gUG9ydCI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDb25uZWN0IyNDQUVOIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI0NBRU4iPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMzIsICJNYXggRXZlbnRzIFBlciBSZWFkIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VUlOVDMyLCAiUmVjb3JkIExlbmd0aCBbc3BdIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VUlOVDMyLCAiUG9zdC1UcmlnZ2VyIEJ1ZmZlciBbJV0iPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJUUkctSU4gYXMgR2F0ZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIkV4dGVybmFsIFRyaWdnZXIgTW9kZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIlNvZnR3YXJlIFRyaWdnZXIgTW9kZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIlRyaWdnZXIgUG9sYXJpdHkiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q29tYm9Cb3gsICJJL08gTGV2ZWwiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiU29mdHdhcmUgVHJpZ2dlciI+eyIiLCAiRm9yY2VzIGEgdHJpZ2dlciBpbiAiCiAgICAgICAgICAgICJ0aGUgZGlnaXRpemVyIGlmIHRoZSBmZWF0dXJlIGlzIGVuYWJsZWQifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJSZXNldCBDQUVOIj57IiIsICJSZXNldHMgdGhlIENBRU4gZGlnaXRpemVyICIKICAgICAgICAgICAgIndpdGggbmV3IHZhbHVlcyBmb3VuZCBpbiB0aGUgY29udHJvbCB0YWJzLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiU2lQTSBJRCI+eyIiLCAiVGhpcyBpcyB0aGUgU2lQTSBJRCAiCiAgICAiYXMgc3BlY2lmaWVkLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiU2lQTSBDZWxsIj57IiIsICJUaGlzIGlzIHRoZSBTaVBNIGNlbGwgIgogICAgICAgICAgICAiYmVpbmcgdGVzdGVkLiAgQmUgbWluZGZ1bCB0aGF0IHRoZSBudW1iZXIgb24gdGhlICIKICAgICAgICAgICAgImZlZWR0aHJvdWdoIGNvcnJlc3BvbmRzIHRvIGRpZmZlcmVudCBTaVBNcyBhbmQgdGhlaXIgY2VsbHMuIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJQUyBFbmFibGUiPnsiIiwgIkVuYWJsZXMgb3IgZGlzYWJsZWQgdGhlICIKICAgICAgICAgICAgIlNpUE0gcG93ZXIgc3VwcGx5LiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0RmxvYXQsICJTaVBNIFZvbHRhZ2UiPnsiIiwKICAgICAgICAgICAgIk1heCB2b2x0YWdlIGFsbG93ZWQgaXMgNjBWIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiUnVuIE1lYXN1cmVtZW50IFJvdXRpbmUiPnsiIiwKICAgICAgICAgICAgIlN0YXJ0cyB0aGUgbG9naWMgdG8gYXR0ZW1wdCBhIFZCRCBjYWxjdWxhdGlvbiwgYW5kIgogICAgICAgICAgICAidGhlbiB0YWtlcyB0aGUgcHVsc2UgZGF0YS4gXG5cbiIKICAgICAgICAgICAgIkl0IGRpc2FibGVzIHRoZSBhYmlsaXR5IHRvIGNoYW5nZSB0aGUgdm9sdGFnZS4gIgogICAgICAgICAgICAiSWYgaXQgZmFpbHMsIGl0IHdpbGwgcmV0cnkuIENhbmNlbCBieSBwcmVzc2luZyBDYW5jZWwgcm91dGluZS4ifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDYW5jZWwgTWVhc3VyZW1lbnQgUm91dGluZSI+eyIiLCAiQ2FuY2VscyBhbnkgIgogICAgICAgICAgICAib25nb2luZyBtZWFzdXJlbWVudCByb3V0aW5lLiJ9LAoKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRUZXh0LCAiVGVlbnN5IENPTSBQb3J0Ij57IiJ9LAogICAgVGVlbnN5Q29udHJvbGxlckNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDb25uZWN0IyNUZWVuc3kiPnsiIn0sCiAgICBUZWVuc3lDb250cm9sbGVyQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI1RlZW5zeSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJQZWx0aWVyIE9OL09GRiI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMTYsICJQSUQgUlREIj57IiJ9LAogICAgVGVlbnN5Q29udHJvbGxlckNvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dFVJTlQzMiwgIlVwZGF0ZSBQZXJpb2QgKG1zKSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBlbHRpZXIgVHJpcCBQb2ludCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBlbHRpZXIgVCBTZXRwb2ludCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBLcCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBUaSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBUZCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiUmVzZXQgUFBJRCI+eyIifSwKCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VGV4dCwgIlBGRUlGRkVSIFBvcnQiPnsiIn0sCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkNvbm5lY3QjI1NMT1dEQVEiPnsiIn0sCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI1NMT1dEQVEiPnsiIn0KKTsKCn0gLy8gbmFtZXNwYWNlIFNCQ1F1ZWVucwoKI2VuZGlmAAAAAAAAAAArEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAArEQAAI2lmbmRlZiBDT05UUk9MTElTVF9oCiNkZWZpbmUgQ09OVFJPTExJU1RfaAojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9pbWd1aV9oZWxwZXJzLmhwcCIKI2luY2x1ZGUgPHVub3JkZXJlZF9tYXA+CiNwcmFnbWEgb25jZQoKLy8gQyBTVEQgaW5jbHVkZXMKLy8gQyAzcmQgcGFydHkgaW5jbHVkZXMKLy8gQysrIFNURCBpbmNsdWRlcwojaW5jbHVkZSA8dHVwbGU+CgovLyBDKysgM3JkIHBhcnR5IGluY2x1ZGVzCi8vIE15IGluY2x1ZGVzCiNpbmNsdWRlICJzYmNxdWVlbnMtZ3VpL2hhcmR3YXJlX2hlbHBlcnMvU2lQTUFjcXVpc2l0aW9uRGF0YS5ocHAiCiNpbmNsdWRlICJzYmNxdWVlbnMtZ3VpL2hhcmR3YXJlX2hlbHBlcnMvVGVlbnN5Q29udHJvbGxlckRhdGEuaHBwIgojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9oYXJkd2FyZV9oZWxwZXJzL1Nsb3dEQVFEYXRhLmhwcCIKCm5hbWVzcGFjZSBTQkNRdWVlbnMgewoKLy8gSGVyZSB5b3UgZmluZCBhbGwgdGhlIGNvbXBpbGUgYXZhaWxhYmxlIGNvbnRyb2xzLgpjb25zdGV4cHIgc3RhdGljIGF1dG8gU2lQTUdVSUNvbnRyb2xzID0gc3RkOjptYWtlX3R1cGxlKAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiQ0FFTiBQb3J0Ij57IiIsICJVc3VhbGx5IDAgYXMgbG9uZyBhcyB0aGVyZSBpcyBubyAiCiAgICAgICAgICAgICJvdGhlciBDQUVOIGRpZ2l0aXplcnMgY29ubmVjdGVkLiBJZiB0aGVyZSBhcmUgbW9yZSwgIgogICAgICAgICAgICAidGhlIHBvcnQgaW5jcmVhc2VzIGFzIHRoZXkgd2VyZSBjb25uZWN0ZWQgdG8gdGhlICIKICAgICAgICAgICAgImNvbXB1dGVyLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkNvbWJvQm94LCAiQ29ubmVjdGlvbiBUeXBlIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkNvbWJvQm94LCAiTW9kZWwiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMzIsICJWTUUgQWRkcmVzcyI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dFRleHQsICJLZWl0aGxleSBDT00gUG9ydCI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDb25uZWN0IyNDQUVOIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI0NBRU4iPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMzIsICJNYXggRXZlbnRzIFBlciBSZWFkIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VUlOVDMyLCAiUmVjb3JkIExlbmd0aCBbc3BdIj57IiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VUlOVDMyLCAiUG9zdC1UcmlnZ2VyIEJ1ZmZlciBbJV0iPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJUUkctSU4gYXMgR2F0ZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIkV4dGVybmFsIFRyaWdnZXIgTW9kZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIlNvZnR3YXJlIFRyaWdnZXIgTW9kZSI+eyIifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpDb21ib0JveCwgIlRyaWdnZXIgUG9sYXJpdHkiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q29tYm9Cb3gsICJJL08gTGV2ZWwiPnsiIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiU29mdHdhcmUgVHJpZ2dlciI+eyIiLCAiRm9yY2VzIGEgdHJpZ2dlciBpbiAiCiAgICAgICAgICAgICJ0aGUgZGlnaXRpemVyIGlmIHRoZSBmZWF0dXJlIGlzIGVuYWJsZWQifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJSZXNldCBDQUVOIj57IiIsICJSZXNldHMgdGhlIENBRU4gZGlnaXRpemVyICIKICAgICAgICAgICAgIndpdGggbmV3IHZhbHVlcyBmb3VuZCBpbiB0aGUgY29udHJvbCB0YWJzLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiU2lQTSBJRCI+eyIiLCAiVGhpcyBpcyB0aGUgU2lQTSBJRCAiCiAgICAiYXMgc3BlY2lmaWVkLiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0SW50LCAiU2lQTSBDZWxsIj57IiIsICJUaGlzIGlzIHRoZSBTaVBNIGNlbGwgIgogICAgICAgICAgICAiYmVpbmcgdGVzdGVkLiAgQmUgbWluZGZ1bCB0aGF0IHRoZSBudW1iZXIgb24gdGhlICIKICAgICAgICAgICAgImZlZWR0aHJvdWdoIGNvcnJlc3BvbmRzIHRvIGRpZmZlcmVudCBTaVBNcyBhbmQgdGhlaXIgY2VsbHMuIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJQUyBFbmFibGUiPnsiIiwgIkVuYWJsZXMgb3IgZGlzYWJsZWQgdGhlICIKICAgICAgICAgICAgIlNpUE0gcG93ZXIgc3VwcGx5LiJ9LAogICAgU2lQTUFjcXVpc2l0aW9uQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0RmxvYXQsICJTaVBNIFZvbHRhZ2UiPnsiIiwKICAgICAgICAgICAgIk1heCB2b2x0YWdlIGFsbG93ZWQgaXMgNjBWIn0sCiAgICBTaVBNQWNxdWlzaXRpb25Db250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiUnVuIE1lYXN1cmVtZW50IFJvdXRpbmUiPnsiIiwKICAgICAgICAgICAgIlN0YXJ0cyB0aGUgbG9naWMgdG8gYXR0ZW1wdCBhIFZCRCBjYWxjdWxhdGlvbiwgYW5kIgogICAgICAgICAgICAidGhlbiB0YWtlcyB0aGUgcHVsc2UgZGF0YS4gXG5cbiIKICAgICAgICAgICAgIkl0IGRpc2FibGVzIHRoZSBhYmlsaXR5IHRvIGNoYW5nZSB0aGUgdm9sdGFnZS4gIgogICAgICAgICAgICAiSWYgaXQgZmFpbHMsIGl0IHdpbGwgcmV0cnkuIENhbmNlbCBieSBwcmVzc2luZyBDYW5jZWwgcm91dGluZS4ifSwKICAgIFNpUE1BY3F1aXNpdGlvbkNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDYW5jZWwgTWVhc3VyZW1lbnQgUm91dGluZSI+eyIiLCAiQ2FuY2VscyBhbnkgIgogICAgICAgICAgICAib25nb2luZyBtZWFzdXJlbWVudCByb3V0aW5lLiJ9LAoKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRUZXh0LCAiVGVlbnN5IENPTSBQb3J0Ij57IiJ9LAogICAgVGVlbnN5Q29udHJvbGxlckNvbnRyb2w8Q29udHJvbFR5cGVzOjpCdXR0b24sICJDb25uZWN0IyNUZWVuc3kiPnsiIn0sCiAgICBUZWVuc3lDb250cm9sbGVyQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI1RlZW5zeSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6Q2hlY2tib3gsICJQZWx0aWVyIE9OL09GRiI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRVSU5UMTYsICJQSUQgUlREIj57IiJ9LAogICAgVGVlbnN5Q29udHJvbGxlckNvbnRyb2w8Q29udHJvbFR5cGVzOjpJbnB1dFVJTlQzMiwgIlVwZGF0ZSBQZXJpb2QgKG1zKSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBlbHRpZXIgVHJpcCBQb2ludCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBlbHRpZXIgVCBTZXRwb2ludCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBLcCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBUaSI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6SW5wdXRGbG9hdCwgIlBUZCI+eyIifSwKICAgIFRlZW5zeUNvbnRyb2xsZXJDb250cm9sPENvbnRyb2xUeXBlczo6QnV0dG9uLCAiUmVzZXQgUFBJRCI+eyIifSwKCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OklucHV0VGV4dCwgIlBGRUlGRkVSIFBvcnQiPnsiIn0sCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkNvbm5lY3QjI1NMT1dEQVEiPnsiIn0sCiAgICBTbG93REFRQ29udHJvbDxDb250cm9sVHlwZXM6OkJ1dHRvbiwgIkRpc2Nvbm5lY3QjI1NMT1dEQVEiPnsiIn0KKTsKCn0gLy8gbmFtZXNwYWNlIFNCQ1F1ZWVucwoKI2VuZGlmAAAAAAAAAAArEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
			"settings":
			{
				"buffer_size": 18941,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhRkAAAAAAAAMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhRkAAAAAAAAMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAN8WAAAAAAAA3xYAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAChcAAAAAAAAKFwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n}"
					},
					"CQAAAAcXAAAAAAAACBcAAAAAAAAAAAAACBcAAAAAAAAQFwAAAAAAAAAAAAAQFwAAAAAAABQXAAAAAAAAAAAAABQXAAAAAAAAFRcAAAAAAAAAAAAAFRcAAAAAAAAhFwAAAAAAAAAAAAAIFwAAAAAAAAgXAAAAAAAADAAAACAgICAgICAgICAgIBUXAAAAAAAAFhcAAAAAAAAAAAAACRcAAAAAAAAJFwAAAAAAAAwAAAAgICAgICAgICAgICAJFwAAAAAAABEXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxcAAAAAAAAHFwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"reindent",
					null,
					"AQAAAAgXAAAAAAAAFBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBcAAAAAAAAIFwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAABQXAAAAAAAAFRcAAAAAAAAAAAAAFRcAAAAAAAAWFwAAAAAAAAAAAAAWFwAAAAAAABcXAAAAAAAAAAAAABcXAAAAAAAAGBcAAAAAAAAAAAAAGBcAAAAAAAAZFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBcAAAAAAAAUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					4,
					"left_delete",
					null,
					"BAAAABgXAAAAAAAAGBcAAAAAAAABAAAAdBcXAAAAAAAAFxcAAAAAAAABAAAAcxYXAAAAAAAAFhcAAAAAAAABAAAAbhUXAAAAAAAAFRcAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAGRcAAAAAAAAZFwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAABUXAAAAAAAAFhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRcAAAAAAAAVFwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAABUXAAAAAAAAFRcAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAFhcAAAAAAAAWFwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "onstexpr"
					},
					"CAAAABUXAAAAAAAAFhcAAAAAAAAAAAAAFhcAAAAAAAAXFwAAAAAAAAAAAAAXFwAAAAAAABgXAAAAAAAAAAAAABgXAAAAAAAAGRcAAAAAAAAAAAAAGRcAAAAAAAAaFwAAAAAAAAAAAAAaFwAAAAAAABsXAAAAAAAAAAAAABsXAAAAAAAAHBcAAAAAAAAAAAAAHBcAAAAAAAAdFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRcAAAAAAAAVFwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " aut"
					},
					"BAAAAB0XAAAAAAAAHhcAAAAAAAAAAAAAHhcAAAAAAAAfFwAAAAAAAAAAAAAfFwAAAAAAACAXAAAAAAAAAAAAACAXAAAAAAAAIRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRcAAAAAAAAdFwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAACEXAAAAAAAAIhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRcAAAAAAAAhFwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " test"
					},
					"BQAAACIXAAAAAAAAIxcAAAAAAAAAAAAAIxcAAAAAAAAkFwAAAAAAAAAAAAAkFwAAAAAAACUXAAAAAAAAAAAAACUXAAAAAAAAJhcAAAAAAAAAAAAAJhcAAAAAAAAnFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhcAAAAAAAAiFwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "_plot"
					},
					"BQAAACcXAAAAAAAAKBcAAAAAAAAAAAAAKBcAAAAAAAApFwAAAAAAAAAAAAApFwAAAAAAACoXAAAAAAAAAAAAACoXAAAAAAAAKxcAAAAAAAAAAAAAKxcAAAAAAAAsFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxcAAAAAAAAnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACwXAAAAAAAALRcAAAAAAAAAAAAALRcAAAAAAAAuFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBcAAAAAAAAsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4XAAAAAAAALxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhcAAAAAAAAuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAC4XAAAAAAAALhcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4XAAAAAAAALxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhcAAAAAAAAuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAC8XAAAAAAAANxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAADcXAAAAAAAAOBcAAAAAAAAAAAAAOBcAAAAAAAA5FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxcAAAAAAAA3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAADgXAAAAAAAAQxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBcAAAAAAAA4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEQXAAAAAAAARhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBcAAAAAAABEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAEUXAAAAAAAATRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRcAAAAAAABFFwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE4XAAAAAAAATxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThcAAAAAAABOFwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAE8XAAAAAAAAUBcAAAAAAAAAAAAAUBcAAAAAAABcFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATxcAAAAAAABPFwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAFAXAAAAAAAAUBcAAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAXBcAAAAAAABcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUBcAAAAAAABQFwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUBcAAAAAAABQFwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUBcAAAAAAABQFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/gui_windows/ControlWindow.cpp",
			"settings":
			{
				"buffer_size": 2773,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADVCgAAI2luY2x1ZGUgInNiY3F1ZWVucy1ndWkvZ3VpX3dpbmRvd3MvQ29udHJvbFdpbmRvdy5ocHAiCgpuYW1lc3BhY2UgU0JDUXVlZW5zIHsKCnZvaWQgQ29udHJvbFdpbmRvdzo6aW5pdF93aW5kb3coY29uc3QgdG9tbDo6dGFibGUmIHRiKSB7CiAgICBhdXRvIHRfY29uZiA9IHRiWyJUZWVuc3kiXTsKICAgIGF1dG8gQ0FFTl9jb25mID0gdGJbIkNBRU4iXTsKICAgIGF1dG8gb3RoZXJfY29uZiA9IHRiWyJPdGhlciJdOwogICAgYXV0byBmaWxlX2NvbmYgPSB0YlsiRmlsZSJdOwoKCiAgICAvLy8gVGVlbnN5IGNvbmZpZwogICAgLy8gVGVlbnN5IGluaXRpYWwgc3RhdGUKICAgIF90ZWVuc3lfZG9lLkN1cnJlbnRTdGF0ZSA9IFRlZW5zeUNvbnRyb2xsZXJTdGF0ZXM6OlN0YW5kYnk7CgogICAgLy8vIENBRU4gY29uZmlnCiAgICAvLyBDQUVOIGluaXRpYWwgc3RhdGUKICAgIF9zaXBtX2RvZS5DdXJyZW50U3RhdGUgPSBTaVBNQWNxdWlzaXRpb25TdGF0ZXM6OlN0YW5kYnk7CgogICAgLy8vIENBRU4gbW9kZWwgY29uZmlncwoKICAgIC8vIFdlIGNoZWNrIGhvdyBtYW55IENBRU4uZ3JvdXBYIHRoZXJlIGFyZSBhbmQgY3JlYXRlIHRoYXQgbWFueQogICAgLy8gZ3JvdXBzLgogICAgLy8gY29uc3QgdWludDhfdCBjX01BWF9DSEFOTkVMUyA9IDY0OwogICAgLy8gZm9yICh1aW50OF90IGNoID0gMDsgY2ggPCBjX01BWF9DSEFOTkVMUzsgY2grKykgewogICAgLy8gICAgIHN0ZDo6c3RyaW5nIGNoX3RvbWwgPSAiZ3JvdXAiICsgc3RkOjp0b19zdHJpbmcoY2gpOwogICAgLy8gICAgIGlmIChDQUVOX2NvbmZbY2hfdG9tbF0uYXNfdGFibGUoKSkgewogICAgLy8gICAgICAgICBfc2lwbV9kb2UuR3JvdXBDb25maWdzLmVtcGxhY2VfYmFjaygKICAgIC8vICAgICAgICAgICAgIENBRU5Hcm91cENvbmZpZ3sKICAgIC8vICAgICAgICAgICAgICAgICBjaCwgIC8vIE51bWJlciB1aW50OF90CiAgICAvLyAgICAgICAgICAgICAgICAgQ0FFTl9jb25mW2NoX3RvbWxdWyJUcmdNYXNrIl0udmFsdWVfb3IoMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJNYXNrIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIkFjcU1hc2siXS52YWx1ZV9vcigwdSksCiAgICAvLyAgICAgICAgICAgICAgICAgLy8gQWNxdWlzaXRpb25NYXNrIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIk9mZnNldCJdLnZhbHVlX29yKDB4ODAwMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIERDT2Zmc2V0IHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx1aW50OF90PigpLCAgLy8gRENDb3JyZWN0aW9ucwogICAgLy8gICAgICAgICAgICAgICAgIC8vIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIlJhbmdlIl0udmFsdWVfb3IoMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIERDUmFuZ2UKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIlRocmVzaG9sZCJdLnZhbHVlX29yKDB4ODAwMHUpCiAgICAvLyAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlclRocmVzaG9sZAoKICAgIC8vICAgICAgICAgICAgIH0pOwoKICAgIC8vICAgICAgICAgaWYgKHRvbWw6OmFycmF5KiBhcnIgPSBDQUVOX2NvbmZbY2hfdG9tbF1bIkNvcnJlY3Rpb25zIl0uYXNfYXJyYXkoKSkgewogICAgLy8gICAgICAgICAgICAgc3BkbG9nOjppbmZvKCJDb3JyZWN0aW9ucyBleGlzdCIpOwogICAgLy8gICAgICAgICAgICAgc2l6ZV90IGogPSAwOwogICAgLy8gICAgICAgICAgICAgQ0FFTkdyb3VwQ29uZmlnJiBsYXN0X2NvbmZpZyA9IF9zaXBtX2RvZS5Hcm91cENvbmZpZ3MuYmFjaygpOwogICAgLy8gICAgICAgICAgICAgZm9yICh0b21sOjpub2RlJiBlbGVtIDogKmFycikgewogICAgLy8gICAgICAgICAgICAgICAgIC8vIE1heCBudW1iZXIgb2YgY2hhbm5lbHMgcGVyIGdyb3VwIHRoZXJlIGNhbiBiZSBpcyA4CiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGogPCA4KXsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGFzdF9jb25maWcuRENDb3JyZWN0aW9ucy5lbXBsYWNlX2JhY2soCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlX29yKDB1KSk7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGorKzsKICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICB9CiAgICAvLyB9CgogICAgLy8vIE90aGVyIFBGRUlGRkVSU2luZ2xlR2F1Z2UKICAgIF9zbG93ZGFxX2RvZS5QRkVJRkZFUlNpbmdsZUdhdWdlRW5hYmxlCiAgICAgICAgPSBvdGhlcl9jb25mWyJQRkVJRkZFUlNpbmdsZUdhdWdlIl1bIkVuYWJsZWQiXS52YWx1ZV9vcihmYWxzZSk7CiAgICBfc2xvd2RhcV9kb2UuUEZFSUZGRVJTaW5nbGVHYXVnZVVwZGF0ZVNwZWVkCiAgICAgICAgPSBzdGF0aWNfY2FzdDxQRkVJRkZFUlNpbmdsZUdhdWdlU1A+KAogICAgICAgICAgICBvdGhlcl9jb25mWyJQRkVJRkZFUlNpbmdsZUdhdWdlIl1bIkVuYWJsZWQiXS52YWx1ZV9vcigwKSk7Cn0KCnZvaWQgQ29udHJvbFdpbmRvdzo6ZHJhdygpIHsKICAgIC8vIE5vdGhpbmcgaGVyZSByZWFsbHkuIEV2ZXJ5dGhpbmcgaXMgbWFuYWdlZCBieSB0aGUgdGFicy4KICAgIC8vIEJ1dCB0aGlzIGlzIGFuIGVtcHR5IGNhbnZhcyEgRHJhdyBzb21ldGhpbmchCn0KCn0gLy8gbmFtZXNwYWNlIFNCQ1F1ZWVucwAAAAAAAAAAKkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADVCgAAI2luY2x1ZGUgInNiY3F1ZWVucy1ndWkvZ3VpX3dpbmRvd3MvQ29udHJvbFdpbmRvdy5ocHAiCgpuYW1lc3BhY2UgU0JDUXVlZW5zIHsKCnZvaWQgQ29udHJvbFdpbmRvdzo6aW5pdF93aW5kb3coY29uc3QgdG9tbDo6dGFibGUmIHRiKSB7CiAgICBhdXRvIHRfY29uZiA9IHRiWyJUZWVuc3kiXTsKICAgIGF1dG8gQ0FFTl9jb25mID0gdGJbIkNBRU4iXTsKICAgIGF1dG8gb3RoZXJfY29uZiA9IHRiWyJPdGhlciJdOwogICAgYXV0byBmaWxlX2NvbmYgPSB0YlsiRmlsZSJdOwoKCiAgICAvLy8gVGVlbnN5IGNvbmZpZwogICAgLy8gVGVlbnN5IGluaXRpYWwgc3RhdGUKICAgIF90ZWVuc3lfZG9lLkN1cnJlbnRTdGF0ZSA9IFRlZW5zeUNvbnRyb2xsZXJTdGF0ZXM6OlN0YW5kYnk7CgogICAgLy8vIENBRU4gY29uZmlnCiAgICAvLyBDQUVOIGluaXRpYWwgc3RhdGUKICAgIF9zaXBtX2RvZS5DdXJyZW50U3RhdGUgPSBTaVBNQWNxdWlzaXRpb25TdGF0ZXM6OlN0YW5kYnk7CgogICAgLy8vIENBRU4gbW9kZWwgY29uZmlncwoKICAgIC8vIFdlIGNoZWNrIGhvdyBtYW55IENBRU4uZ3JvdXBYIHRoZXJlIGFyZSBhbmQgY3JlYXRlIHRoYXQgbWFueQogICAgLy8gZ3JvdXBzLgogICAgLy8gY29uc3QgdWludDhfdCBjX01BWF9DSEFOTkVMUyA9IDY0OwogICAgLy8gZm9yICh1aW50OF90IGNoID0gMDsgY2ggPCBjX01BWF9DSEFOTkVMUzsgY2grKykgewogICAgLy8gICAgIHN0ZDo6c3RyaW5nIGNoX3RvbWwgPSAiZ3JvdXAiICsgc3RkOjp0b19zdHJpbmcoY2gpOwogICAgLy8gICAgIGlmIChDQUVOX2NvbmZbY2hfdG9tbF0uYXNfdGFibGUoKSkgewogICAgLy8gICAgICAgICBfc2lwbV9kb2UuR3JvdXBDb25maWdzLmVtcGxhY2VfYmFjaygKICAgIC8vICAgICAgICAgICAgIENBRU5Hcm91cENvbmZpZ3sKICAgIC8vICAgICAgICAgICAgICAgICBjaCwgIC8vIE51bWJlciB1aW50OF90CiAgICAvLyAgICAgICAgICAgICAgICAgQ0FFTl9jb25mW2NoX3RvbWxdWyJUcmdNYXNrIl0udmFsdWVfb3IoMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJNYXNrIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIkFjcU1hc2siXS52YWx1ZV9vcigwdSksCiAgICAvLyAgICAgICAgICAgICAgICAgLy8gQWNxdWlzaXRpb25NYXNrIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIk9mZnNldCJdLnZhbHVlX29yKDB4ODAwMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIERDT2Zmc2V0IHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBzdGQ6OnZlY3Rvcjx1aW50OF90PigpLCAgLy8gRENDb3JyZWN0aW9ucwogICAgLy8gICAgICAgICAgICAgICAgIC8vIHVpbnQ4X3QKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIlJhbmdlIl0udmFsdWVfb3IoMHUpLAogICAgLy8gICAgICAgICAgICAgICAgIC8vIERDUmFuZ2UKICAgIC8vICAgICAgICAgICAgICAgICBDQUVOX2NvbmZbY2hfdG9tbF1bIlRocmVzaG9sZCJdLnZhbHVlX29yKDB4ODAwMHUpCiAgICAvLyAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlclRocmVzaG9sZAoKICAgIC8vICAgICAgICAgICAgIH0pOwoKICAgIC8vICAgICAgICAgaWYgKHRvbWw6OmFycmF5KiBhcnIgPSBDQUVOX2NvbmZbY2hfdG9tbF1bIkNvcnJlY3Rpb25zIl0uYXNfYXJyYXkoKSkgewogICAgLy8gICAgICAgICAgICAgc3BkbG9nOjppbmZvKCJDb3JyZWN0aW9ucyBleGlzdCIpOwogICAgLy8gICAgICAgICAgICAgc2l6ZV90IGogPSAwOwogICAgLy8gICAgICAgICAgICAgQ0FFTkdyb3VwQ29uZmlnJiBsYXN0X2NvbmZpZyA9IF9zaXBtX2RvZS5Hcm91cENvbmZpZ3MuYmFjaygpOwogICAgLy8gICAgICAgICAgICAgZm9yICh0b21sOjpub2RlJiBlbGVtIDogKmFycikgewogICAgLy8gICAgICAgICAgICAgICAgIC8vIE1heCBudW1iZXIgb2YgY2hhbm5lbHMgcGVyIGdyb3VwIHRoZXJlIGNhbiBiZSBpcyA4CiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGogPCA4KXsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGFzdF9jb25maWcuRENDb3JyZWN0aW9ucy5lbXBsYWNlX2JhY2soCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlX29yKDB1KSk7CiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGorKzsKICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgICAgICB9CiAgICAvLyAgICAgICAgIH0KICAgIC8vICAgICB9CiAgICAvLyB9CgogICAgLy8vIE90aGVyIFBGRUlGRkVSU2luZ2xlR2F1Z2UKICAgIF9zbG93ZGFxX2RvZS5QRkVJRkZFUlNpbmdsZUdhdWdlRW5hYmxlCiAgICAgICAgPSBvdGhlcl9jb25mWyJQRkVJRkZFUlNpbmdsZUdhdWdlIl1bIkVuYWJsZWQiXS52YWx1ZV9vcihmYWxzZSk7CiAgICBfc2xvd2RhcV9kb2UuUEZFSUZGRVJTaW5nbGVHYXVnZVVwZGF0ZVNwZWVkCiAgICAgICAgPSBzdGF0aWNfY2FzdDxQRkVJRkZFUlNpbmdsZUdhdWdlU1A+KAogICAgICAgICAgICBvdGhlcl9jb25mWyJQRkVJRkZFUlNpbmdsZUdhdWdlIl1bIkVuYWJsZWQiXS52YWx1ZV9vcigwKSk7Cn0KCnZvaWQgQ29udHJvbFdpbmRvdzo6ZHJhdygpIHsKICAgIC8vIE5vdGhpbmcgaGVyZSByZWFsbHkuIEV2ZXJ5dGhpbmcgaXMgbWFuYWdlZCBieSB0aGUgdGFicy4KICAgIC8vIEJ1dCB0aGlzIGlzIGFuIGVtcHR5IGNhbnZhcyEgRHJhdyBzb21ldGhpbmchCn0KCn0gLy8gbmFtZXNwYWNlIFNCQ1F1ZWVucwAAAAAAAAAAKkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				],
				[
					"Packages/User/Latex-build.sublime-build",
					""
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				],
				[
					"Packages/User/Latex-build.sublime-build",
					""
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"LSP",
				"LSP: Enable Language Server in Project"
			],
			[
				"Package Control: IN",
				"Package Control: Install Package"
			],
			[
				"LSP: Ena",
				"LSP: Enable Language Server Globally"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"LSP: Enable",
				"LSP: Enable Language Server Globally"
			],
			[
				"package Contro l",
				"Package Control: Install Package"
			],
			[
				"upda",
				"Package Control: Upgrade Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"Install Package",
				"Package Control: Install Package"
			],
			[
				"Install",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 175.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/imgui-src",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/hardware_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone"
	],
	"file_history":
	[
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/IndicatorWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/TeensyTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/multithreading_helpers/Pipe.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/SiPMControlWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/RunTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/implot-src/implot.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone/main.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake/Dependencies.cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/CAENDigitizerInterface.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/spdlog-src/include/spdlog/fmt/bundled/core.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/implot-src/implot.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/ControlList.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/IndicatorList.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/imgui-src/imgui.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/implot_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers/glfw_vulkan_wrapper.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers/glfw_opengl3_wrapper.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SlowDAQManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/IndicatorWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/SiPMControlWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SlowDAQData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/concurrentqueue-src/concurrentqueue.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/imgui_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/ThreadKeys.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/BreakDownRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/multithreading_helpers/ThreadManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/CMakeLists.txt",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/ControlWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/indicators.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerInterface.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/hardware_helpers/TeensyControllerInterface.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/BreakDownRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/file_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/sipm_control_gui.sublime-project",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/gui_setup.toml",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/README.md",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/AcquisitionRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/CAENInterfaceData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake/CompilerWarnings.cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/caen_helper.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/caen_helper.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone/CMakeLists.txt",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/ClientController.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/ControlWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/CAENTabs.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/AcquisitionRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/AcquisitonRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/AcquistionRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/serial_helper.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/C",
		"/home/sbc-queens-linux/Desktop/tmp/Python-3.11.1/setup.py",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/Setting Up SublimeText for C++ in WINDOWS.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/TeensyControllerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/indicators.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/ControlWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/ClientController.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/rendering_wrappers/glfw_opengl3_wrapper.h",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/rendering_wrappers/glfw_vulkan_wrapper.h",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/standalone/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/source/gui_test.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/caen_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/all/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/standalone/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/file_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/caen_helper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/serial_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/implot_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/hardware_helpers/TeensyControllerInterface.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/CAENTabs.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/CAENDigitizerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/imgui_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/build/compile_commands.json",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/Calibration.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/armadillo_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/IndicatorWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/cmake/Dependencies.cmake",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/sipm_control_gui.sublime-project",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/README.md",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/armadillo_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/TeensyControllerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/caen_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/GUI/IndicatorWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/rendering_wrappers/glfw_vulkan_wrapper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/hardware_helpers/Calibration.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/TeensyTabs.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/SiPMControlWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/serial_helper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/armadillo_helpers.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/SlowDAQInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/TeensyTabs.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/SiPMControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/IndicatorWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/ControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/CAENTabs.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/source/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/TeensyControllerInterface.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/file_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/indicators.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/GUI/SiPMControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/GUIManager.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/CAENDigitizerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/implot_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/imgui_helpers.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/HardwareHelpers/ClientController.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/HardwareHelpers/Calibration.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/caen_helper.cpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/indicators.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/cmake/Dependencies.cmake",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/README.md",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/GUI/IndicatorWindow.cpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/caen_helper.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/sipm_control_gui.sublime-project",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/CMakeLists.txt",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/CAENDigitizerInterface.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/GUIManager.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/GUI/ControlWindow.cpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/gui_setup.toml",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/GUI/SiPMControlWindow.cpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/HardwareHelpers/Calibration.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 122.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ImGuiDataType",
			"InputText",
			"std::cout",
			"is_floating_point_v",
			"constexpr",
			");\n",
			"indicator",
			"NumGraphs",
			"NumYAxis",
			"ImPlotScale_",
			"ImPlotScale_SymLog",
			"ImPlotScale",
			"ImPlotAxisFlags_",
			"Plot",
			"Indicator",
			"CurrentIndex",
			"Size",
			"Start",
			"ControlSize",
			"ControlActiveColor",
			"ControlHoveredColor",
			"ControlColor",
			"std",
			"size_t",
			"fill",
			"inline",
			"Color",
			"GUIProducerKey",
			"closeFunc",
			"TeensyControllerKey",
			"TokenType",
			"__draw_similar_begin",
			"control",
			"indicator",
			"retrieve_bmes",
			"LatestAcquiredWaveforms",
			"TriggeredWaveforms",
			"_processing_evts",
			";\n",
			"_processing_evts",
			"TriggeredWaveforms",
			"SavedWaveforms",
			"_latest_num_events",
			"TriggeredWaveforms",
			"SavedWaveforms",
			"_latest_num_events",
			"            _indicator_sender(IndicatorNames::CALCULATING_GAIN, true);",
			"_analysis",
			"disconnected_mod",
			"Connect",
			"prev_event",
			"current_event",
			"filter_data",
			";\n",
			"_vbe_analysis",
			"_spe_analysis",
			"_analysis",
			"retrieve_data_until_n_events",
			"_latest_num_events",
			"_processing_evts",
			"VBDData",
			"VBDData\n",
			"VBDData",
			"prev_event",
			"Analysis",
			"analysis",
			"Analysis",
			"analysis",
			"Analysis",
			"_current_voltage",
			"_close_sipm_file",
			"_current_voltage",
			"();\n",
			"_osc_event",
			"_adj_osc_event",
			"_vbd_routine",
			"_pulse_file",
			"_processing_evts",
			"process_data_for_gui",
			"run_mode",
			"release",
			"CAENDigitizerModelsConstants_map",
			"CAENDigitizerModels_map",
			"acquisition",
			"ac",
			"_caen_constants",
			"_vbd_routine",
			"attempt",
			"_osc_event",
			"_processing_evts",
			"TriggeredWaveforms",
			"_processing_evts",
			"process_data_for_gui",
			"retrieve_data",
			"_processing_evts",
			"_processing_evts[k - 1]",
			"_processing_evts[k]",
			"_processing_evts[k - 1]",
			"_processing_evts[k]",
			"GainVoltages",
			"_current_voltage",
			"GainVoltages",
			"AcquisitionRoutine",
			"AcquistionRoutine",
			"_saveinfo_file",
			"make_",
			"_vbe_analysis_out",
			"Process",
			"isVoltageChanged",
			"LatestMeasure",
			"SiPMVoltageSysVoltage",
			"SiPMVoltageSysChange",
			"_is_voltage_changed",
			"_current_voltage",
			"Hello",
			"_current_color",
			"Start",
			"CURRENT_STABILIZED",
			"_dbm",
			"-dbm",
			"TeensyIndicatorSender",
			"i_run_name",
			"DataPulses",
			"show_demo_window",
			"SiPMParameters",
			"Sipmanalysis",
			"_initFunc",
			"_closeFunc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			" ",
			"\\n/MuonVeto/Gun/AddEnergyPhiPoint ",
			"e",
			"hh>",
			"<G",
			"static const",
			"statis const"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "include/sbcqueens-gui/imgui_helpers.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26297,
						"regions":
						{
						},
						"selection":
						[
							[
								9806,
								9806
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/imgui_helpers.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4964.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/sbcqueens-gui/implot_helpers.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20842,
						"regions":
						{
						},
						"selection":
						[
							[
								7779,
								7743
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/implot_helpers.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3789.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/sbcqueens-gui/gui_windows/IndicatorList.hpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2530,
						"regions":
						{
						},
						"selection":
						[
							[
								1491,
								1491
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "include/sbcqueens-gui/gui_windows/ControlList.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4395,
						"regions":
						{
						},
						"selection":
						[
							[
								460,
								460
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/ControlList.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18941,
						"regions":
						{
						},
						"selection":
						[
							[
								5968,
								5968
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2977.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/gui_windows/ControlWindow.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2773,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/ControlWindow.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 174.0
	},
	"output.diagnostics":
	{
		"height": 187.0
	},
	"output.exec":
	{
		"height": 254.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 138.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 138.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Build GUI",
	"project": "sipm_control_gui.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 368.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
