{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CAENG",
				"CAENGroupConfig"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"con",
				"ConcurrentQueue"
			],
			[
				"CAENDigiti",
				"CAENDigitizerModelConstants"
			],
			[
				"TextPosi",
				"TextPositionEnum"
			],
			[
				"T",
				"TextPosition"
			],
			[
				"for",
				"for_each"
			],
			[
				"channel",
				"channel_to_modify"
			],
			[
				"Trig",
				"TriggerMask"
			],
			[
				"Grou",
				"GroupData"
			],
			[
				"GR",
				"GroupConfigs"
			],
			[
				"Dra",
				"DrawingOptions"
			],
			[
				"namesp",
				"namespace"
			],
			[
				"C",
				"CAENPerGroupConfigTab.hpp\""
			],
			[
				"CAENDi",
				"CAENDigitizerFamilies"
			],
			[
				"CAEN",
				"CAENDigitizerModel"
			],
			[
				"CAENDI",
				"CAENDigitizerFamilies"
			],
			[
				"Glo",
				"CAENGlobalConfig"
			],
			[
				"Draw",
				"DrawingOptions"
			],
			[
				"_te",
				"_teensy_doe"
			],
			[
				"IsI",
				"IsItemToggledSelection"
			],
			[
				"IsIte",
				"IsItemEdited"
			],
			[
				"unord",
				"unordered_map"
			],
			[
				"Plot",
				"PlotIndicator"
			],
			[
				"forma",
				"format_string"
			],
			[
				"X",
				"XAxisLabel"
			],
			[
				"clear",
				"clear_data"
			],
			[
				"PipeEnd",
				"PipeEndType"
			],
			[
				"SiPM",
				"SiPMAcquisitionData"
			],
			[
				"_slowda",
				"_slowdaq_pipe_end"
			],
			[
				"_teens",
				"_teensy_pipe_end"
			],
			[
				"is_samev",
				"is_same_v"
			],
			[
				"INdica",
				"IndicatorTypes"
			],
			[
				"Indicat",
				"IndicatorTypes"
			],
			[
				"Indi",
				"IndicatorTypes"
			],
			[
				"Indicato",
				"IndicatorTypes"
			],
			[
				"PlotType",
				"PlotTypeEnum"
			],
			[
				"BR",
				"BREAKDOWN_ROUTINE_ONGOING"
			],
			[
				"caen",
				"caenEvent"
			],
			[
				"_cu",
				"_current_voltage"
			],
			[
				"Br",
				"BreakdownRoutineState"
			],
			[
				"_vol",
				"_has_voltage_changed"
			],
			[
				"_cae",
				"_caen_port"
			],
			[
				"_ca",
				"_caen_port"
			],
			[
				"_pro",
				"_processing_evts"
			],
			[
				"Bre",
				"BreakdownRoutine"
			],
			[
				"make",
				"make_shared"
			],
			[
				"_l",
				"_latest_breakdown_voltage"
			],
			[
				"_has",
				"_has_finished"
			],
			[
				"has",
				"hasNewGainMeasurement"
			],
			[
				"getCur",
				"getCurrentVoltage"
			],
			[
				"c",
				"cgui_state"
			],
			[
				"_port",
				"_port_mutex"
			],
			[
				"mill",
				"milliseconds"
			],
			[
				"arma",
				"armadillo_helpers"
			],
			[
				"main",
				"main_loop_state"
			],
			[
				"cell",
				"CellNumber"
			],
			[
				"Model",
				"ModelConstants"
			],
			[
				"Num",
				"NumberOfGroups"
			],
			[
				"name",
				"namespace"
			],
			[
				"off",
				"offColor"
			],
			[
				"node_",
				"node_view"
			],
			[
				"Pelte",
				"PeltierPidUpdatePeriod"
			],
			[
				"Teensy",
				"TeensySystemPars"
			],
			[
				"Get",
				"GetSystemParameters"
			],
			[
				"Pel",
				"PeltierPidRTD"
			],
			[
				"photon",
				"photon_hits_tree"
			],
			[
				"nhi",
				"nhit_prime"
			],
			[
				"total",
				"totalbiny"
			],
			[
				"G4",
				"G4cout"
			],
			[
				"pa",
				"particleType"
			],
			[
				"Cr",
				"CreateNtupleIColumn"
			],
			[
				"_",
				"_histo_length"
			],
			[
				"_hi",
				"_histo_depth"
			],
			[
				"_min",
				"_min_val"
			],
			[
				"log",
				"logEnergy"
			],
			[
				"_max",
				"_max_val"
			],
			[
				"_his",
				"_histo_depth"
			],
			[
				"_hiso",
				"_histo_length"
			],
			[
				"his",
				"_histo_depth"
			],
			[
				"_histo",
				"_histo_length"
			],
			[
				"ene",
				"energyParticle"
			],
			[
				"_ci",
				"_circle_orientation"
			],
			[
				"verbo",
				"_verbosity"
			],
			[
				"temp",
				"temp0C_mod"
			],
			[
				"time",
				"time0C"
			],
			[
				"_get",
				"_get_reflectivity"
			],
			[
				"tyve",
				"tyvek_energies"
			],
			[
				"df",
				"df2000ma_wave"
			],
			[
				"mini",
				"miniclean_reflectivies"
			],
			[
				"min",
				"miniclean_energies"
			],
			[
				"pmt",
				"pmtsEff"
			],
			[
				"_ref",
				"_reflectroCover"
			],
			[
				"_refl",
				"_reflectorMaterial"
			],
			[
				"Stee",
				"SteelOP"
			],
			[
				"stee",
				"steel_properties"
			],
			[
				"DF",
				"DF2000MA_pt"
			],
			[
				"DF2",
				"DF2000MAReflector"
			],
			[
				"diele",
				"dielectric_metal"
			],
			[
				"of",
				"offsetY"
			],
			[
				"out",
				"out_data"
			],
			[
				"G4OpBounds",
				"G4OpBoundaryProcess"
			],
			[
				"h",
				"hfile"
			],
			[
				"tyvek",
				"tyvek_pt"
			],
			[
				"inc",
				"INCHES_TO_CM"
			],
			[
				"_moteh",
				"_motherPhys"
			],
			[
				"_world",
				"_worldPhys"
			],
			[
				"_main",
				"_mainPhys"
			],
			[
				"_da",
				"_daughter"
			],
			[
				"_mother",
				"_motherConstruction"
			],
			[
				"water",
				"water_tank_log-"
			],
			[
				"pico_ER",
				"PICO_reflector_log"
			],
			[
				"Diff",
				"DiffuseReflector"
			],
			[
				"reflec",
				"reflector_energies"
			],
			[
				"Add",
				"AddProperty"
			],
			[
				"wate",
				"water_energies"
			],
			[
				"PVC",
				"PVCOP"
			],
			[
				"string",
				"string\tstandard header"
			],
			[
				"vector",
				"vector\tstandard header"
			],
			[
				"eneg",
				"energies"
			],
			[
				"Find",
				"FindOrBuildMaterial"
			],
			[
				"trans",
				"transform"
			],
			[
				"anal",
				"analysisManager"
			],
			[
				"PMT",
				"PMTDISTRIBUTION"
			],
			[
				"G4Tr",
				"G4Transform3D"
			],
			[
				"tran",
				"transMatrix"
			],
			[
				"radi",
				"radiusCylinder"
			],
			[
				"top_ta",
				"top_tank_height"
			]
		]
	},
	"buffers":
	[
		{
			"file": "include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionManager.hpp",
			"settings":
			{
				"buffer_size": 30038,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					355,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAZC8AAAAAAABkLwAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAZC8AAAAAAABkLwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/sipm_helpers/SBCBinaryFormat.hpp",
			"settings":
			{
				"buffer_size": 17905,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3553,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALkyAAAAAAAAuzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuTIAAAAAAAC5MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3565,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAALoyAAAAAAAAuzIAAAAAAAAAAAAAuzIAAAAAAAC8MgAAAAAAAAAAAAC8MgAAAAAAAL0yAAAAAAAAAAAAAL0yAAAAAAAAvjIAAAAAAAAAAAAAvjIAAAAAAAC/MgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAujIAAAAAAAC6MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3566,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL8yAAAAAAAAwDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvzIAAAAAAAC/MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3567,
					1,
					"paste",
					null,
					"AQAAAMAyAAAAAAAAzzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwDIAAAAAAADAMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3568,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAM8yAAAAAAAA0DIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzzIAAAAAAADPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3569,
					1,
					"insert",
					{
						"characters": " config"
					},
					"BwAAANAyAAAAAAAA0TIAAAAAAAAAAAAA0TIAAAAAAADSMgAAAAAAAAAAAADSMgAAAAAAANMyAAAAAAAAAAAAANMyAAAAAAAA1DIAAAAAAAAAAAAA1DIAAAAAAADVMgAAAAAAAAAAAADVMgAAAAAAANYyAAAAAAAAAAAAANYyAAAAAAAA1zIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0DIAAAAAAADQMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3571,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANgyAAAAAAAA2TIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2DIAAAAAAADYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3572,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANkyAAAAAAAA2zIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2TIAAAAAAADZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3573,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAANoyAAAAAAAA2zIAAAAAAAAAAAAA2zIAAAAAAADjMgAAAAAAAAAAAADjMgAAAAAAAOQyAAAAAAAAAAAAAOQyAAAAAAAA7DIAAAAAAAAAAAAA2zIAAAAAAADbMgAAAAAAAAgAAAAgICAgICAgINsyAAAAAAAA5zIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2jIAAAAAAADaMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3576,
					1,
					"insert",
					{
						"characters": "\n\t\t"
					},
					"BwAAALcyAAAAAAAAuDIAAAAAAAAAAAAAuDIAAAAAAADAMgAAAAAAAAAAAADkMgAAAAAAAOQyAAAAAAAADAAAACAgICAgICAgICAgILgyAAAAAAAAuDIAAAAAAAAIAAAAICAgICAgICC4MgAAAAAAAMQyAAAAAAAAAAAAAMQyAAAAAAAAyDIAAAAAAAAAAAAAyDIAAAAAAADMMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtzIAAAAAAAC3MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3577,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAMwyAAAAAAAAzTIAAAAAAAAAAAAAzTIAAAAAAADOMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzDIAAAAAAADMMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3581,
					1,
					"insert",
					{
						"characters": "\n\t\t"
					},
					"BgAAAKgyAAAAAAAAqTIAAAAAAAAAAAAAqTIAAAAAAACxMgAAAAAAAAAAAACpMgAAAAAAAKkyAAAAAAAACAAAACAgICAgICAgqTIAAAAAAAC1MgAAAAAAAAAAAAC1MgAAAAAAALkyAAAAAAAAAAAAALkyAAAAAAAAvTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqDIAAAAAAACoMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3582,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAL0yAAAAAAAAvjIAAAAAAAAAAAAAvjIAAAAAAAC/MgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvTIAAAAAAAC9MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3584,
					1,
					"trim_trailing_white_space",
					null,
					"AgAAAM0yAAAAAAAAzTIAAAAAAAABAAAAIKcyAAAAAAAApzIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvzIAAAAAAAC/MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3587,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABIzAAAAAAAAEzMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEjMAAAAAAAASMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3590,
					1,
					"reindent",
					null,
					"AQAAAAczAAAAAAAAHzMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABzMAAAAAAAAHMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3591,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAB8zAAAAAAAAIDMAAAAAAAAAAAAAIDMAAAAAAAAhMwAAAAAAAAAAAAAhMwAAAAAAACIzAAAAAAAAAAAAACIzAAAAAAAAIzMAAAAAAAAAAAAAIzMAAAAAAAAkMwAAAAAAAAAAAAAkMwAAAAAAACUzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHzMAAAAAAAAfMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3592,
					1,
					"insert",
					{
						"characters": " config.E"
					},
					"CQAAACUzAAAAAAAAJjMAAAAAAAAAAAAAJjMAAAAAAAAnMwAAAAAAAAAAAAAnMwAAAAAAACgzAAAAAAAAAAAAACgzAAAAAAAAKTMAAAAAAAAAAAAAKTMAAAAAAAAqMwAAAAAAAAAAAAAqMwAAAAAAACszAAAAAAAAAAAAACszAAAAAAAALDMAAAAAAAAAAAAALDMAAAAAAAAtMwAAAAAAAAAAAAAtMwAAAAAAAC4zAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJTMAAAAAAAAlMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3593,
					1,
					"insert",
					{
						"characters": "nabled;"
					},
					"BwAAAC4zAAAAAAAALzMAAAAAAAAAAAAALzMAAAAAAAAwMwAAAAAAAAAAAAAwMwAAAAAAADEzAAAAAAAAAAAAADEzAAAAAAAAMjMAAAAAAAAAAAAAMjMAAAAAAAAzMwAAAAAAAAAAAAAzMwAAAAAAADQzAAAAAAAAAAAAADQzAAAAAAAANTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALjMAAAAAAAAuMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3598,
					1,
					"left_delete",
					null,
					"AQAAAEIzAAAAAAAAQjMAAAAAAAB3AAAAICAgICAgICBmb3IoYXV0byBjb25maWcgOiBjb25maWdzKSB7CiAgICAgICAgICAgIGlmKGNvbmZpZy5FbmFibGVkKSB7CiAgICAgICAgICAgICAgICBlbl9jaHMrKzsKICAgICAgICAgICAgfQogICAgICAgIH0",
					"AQAAAAAAAAABAAAAuTMAAAAAAABCMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3601,
					1,
					"cut",
					null,
					"AQAAAGwyAAAAAAAAbDIAAAAAAAAQAAAAdWludDMyX3QgZW5fY2hzIA",
					"AQAAAAAAAAABAAAAfDIAAAAAAABsMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3604,
					1,
					"paste",
					null,
					"AQAAAHkyAAAAAAAAiTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeTIAAAAAAAB5MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3605,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIkyAAAAAAAAijIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiTIAAAAAAACJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3606,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoyAAAAAAAAizIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAijIAAAAAAACKMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3612,
					2,
					"left_delete",
					null,
					"AgAAAGQyAAAAAAAAZDIAAAAAAAAMAAAAICAgICAgICA9IDA7YzIAAAAAAABjMgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAcDIAAAAAAABkMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3618,
					1,
					"insert",
					{
						"characters": "\n#include"
					},
					"CQAAAGoBAAAAAAAAawEAAAAAAAAAAAAAawEAAAAAAABsAQAAAAAAAAAAAABsAQAAAAAAAG0BAAAAAAAAAAAAAG0BAAAAAAAAbgEAAAAAAAAAAAAAbgEAAAAAAABvAQAAAAAAAAAAAABvAQAAAAAAAHABAAAAAAAAAAAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAByAQAAAAAAAHMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3619,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMBAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwEAAAAAAABzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3620,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAHQBAAAAAAAAdgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAEAAAAAAAB0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					3621,
					1,
					"insert",
					{
						"characters": "algor"
					},
					"BQAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					3622,
					1,
					"insert_completion",
					{
						"completion": "algorithm",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "algorithm"
					},
					"AgAAAHUBAAAAAAAAdQEAAAAAAAAFAAAAYWxnb3J1AQAAAAAAAH4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegEAAAAAAAB6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					3627,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAMgyAAAAAAAAyjIAAAAAAAAAAAAAyjIAAAAAAADOMgAAAAAAAAAAAADOMgAAAAAAANIyAAAAAAAAAAAAANIyAAAAAAAA1jIAAAAAAAAAAAAA1jIAAAAAAADaMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyDIAAAAAAADIMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3635,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAP8yAAAAAAAAATMAAAAAAAAAAAAAATMAAAAAAAAFMwAAAAAAAAAAAAAFMwAAAAAAAAkzAAAAAAAAAAAAAAkzAAAAAAAADTMAAAAAAAAAAAAADTMAAAAAAAARMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/zIAAAAAAAD/MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3640,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAE0zAAAAAAAAUTMAAAAAAAAAAAAAUTMAAAAAAABVMwAAAAAAAAAAAABVMwAAAAAAAFkzAAAAAAAAAAAAAFkzAAAAAAAAXTMAAAAAAAAAAAAAXTMAAAAAAABhMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTMAAAAAAABNMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3643,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIEzAAAAAAAAgjMAAAAAAAAAAAAAgjMAAAAAAACKMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgTMAAAAAAACBMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3646,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t\t"
					},
					"CAAAAIAzAAAAAAAAhDMAAAAAAAAAAAAAhDMAAAAAAACIMwAAAAAAAAAAAACIMwAAAAAAAIwzAAAAAAAAAAAAAIwzAAAAAAAAkDMAAAAAAAAAAAAAkDMAAAAAAACUMwAAAAAAAAAAAACUMwAAAAAAAJgzAAAAAAAAAAAAAJgzAAAAAAAAnDMAAAAAAAAAAAAAnDMAAAAAAACgMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgDMAAAAAAACAMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3657,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEQsAAAAAAAARSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARCwAAAAAAABELAAAAAAAAAAAAAAAAPC/"
				],
				[
					3658,
					1,
					"reindent",
					null,
					"AQAAAEUsAAAAAAAAZSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSwAAAAAAABFLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3659,
					7,
					"left_delete",
					null,
					"BwAAAGEsAAAAAAAAYSwAAAAAAAAEAAAAICAgIF0sAAAAAAAAXSwAAAAAAAAEAAAAICAgIFksAAAAAAAAWSwAAAAAAAAEAAAAICAgIFUsAAAAAAAAVSwAAAAAAAAEAAAAICAgIFEsAAAAAAAAUSwAAAAAAAAEAAAAICAgIE0sAAAAAAAATSwAAAAAAAAEAAAAICAgIEksAAAAAAAASSwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAZSwAAAAAAABlLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3660,
					1,
					"insert",
					{
						"characters": "uint"
					},
					"BAAAAEksAAAAAAAASiwAAAAAAAAAAAAASiwAAAAAAABLLAAAAAAAAAAAAABLLAAAAAAAAEwsAAAAAAAAAAAAAEwsAAAAAAAATSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSwAAAAAAABJLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3661,
					4,
					"left_delete",
					null,
					"BAAAAEwsAAAAAAAATCwAAAAAAAABAAAAdEssAAAAAAAASywAAAAAAAABAAAAbkosAAAAAAAASiwAAAAAAAABAAAAaUksAAAAAAAASSwAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAATSwAAAAAAABNLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3662,
					1,
					"insert",
					{
						"characters": "std::size_t"
					},
					"CwAAAEksAAAAAAAASiwAAAAAAAAAAAAASiwAAAAAAABLLAAAAAAAAAAAAABLLAAAAAAAAEwsAAAAAAAAAAAAAEwsAAAAAAAATSwAAAAAAAAAAAAATSwAAAAAAABOLAAAAAAAAAAAAABOLAAAAAAAAE8sAAAAAAAAAAAAAE8sAAAAAAAAUCwAAAAAAAAAAAAAUCwAAAAAAABRLAAAAAAAAAAAAABRLAAAAAAAAFIsAAAAAAAAAAAAAFIsAAAAAAAAUywAAAAAAAAAAAAAUywAAAAAAABULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSwAAAAAAABJLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3663,
					1,
					"insert",
					{
						"characters": " en"
					},
					"AwAAAFQsAAAAAAAAVSwAAAAAAAAAAAAAVSwAAAAAAABWLAAAAAAAAAAAAABWLAAAAAAAAFcsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVCwAAAAAAABULAAAAAAAAAAAAAAAAPC/"
				],
				[
					3664,
					2,
					"left_delete",
					null,
					"AgAAAFYsAAAAAAAAViwAAAAAAAABAAAAblUsAAAAAAAAVSwAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAVywAAAAAAABXLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3665,
					1,
					"insert",
					{
						"characters": "num_en"
					},
					"BgAAAFUsAAAAAAAAViwAAAAAAAAAAAAAViwAAAAAAABXLAAAAAAAAAAAAABXLAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAWSwAAAAAAAAAAAAAWSwAAAAAAABaLAAAAAAAAAAAAABaLAAAAAAAAFssAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSwAAAAAAABVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3666,
					1,
					"insert",
					{
						"characters": "_chs;"
					},
					"BQAAAFssAAAAAAAAXCwAAAAAAAAAAAAAXCwAAAAAAABdLAAAAAAAAAAAAABdLAAAAAAAAF4sAAAAAAAAAAAAAF4sAAAAAAAAXywAAAAAAAAAAAAAXywAAAAAAABgLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWywAAAAAAABbLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3680,
					1,
					"insert",
					{
						"characters": "std:;siz"
					},
					"CQAAAEUyAAAAAAAARjIAAAAAAAAAAAAARjIAAAAAAABGMgAAAAAAAAgAAAB1aW50MzJfdEYyAAAAAAAARzIAAAAAAAAAAAAARzIAAAAAAABIMgAAAAAAAAAAAABIMgAAAAAAAEkyAAAAAAAAAAAAAEkyAAAAAAAASjIAAAAAAAAAAAAASjIAAAAAAABLMgAAAAAAAAAAAABLMgAAAAAAAEwyAAAAAAAAAAAAAEwyAAAAAAAATTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTIAAAAAAABNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3681,
					4,
					"left_delete",
					null,
					"BAAAAEwyAAAAAAAATDIAAAAAAAABAAAAeksyAAAAAAAASzIAAAAAAAABAAAAaUoyAAAAAAAASjIAAAAAAAABAAAAc0kyAAAAAAAASTIAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAATTIAAAAAAABNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3682,
					1,
					"insert",
					{
						"characters": ":size_t"
					},
					"BwAAAEkyAAAAAAAASjIAAAAAAAAAAAAASjIAAAAAAABLMgAAAAAAAAAAAABLMgAAAAAAAEwyAAAAAAAAAAAAAEwyAAAAAAAATTIAAAAAAAAAAAAATTIAAAAAAABOMgAAAAAAAAAAAABOMgAAAAAAAE8yAAAAAAAAAAAAAE8yAAAAAAAAUDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASTIAAAAAAABJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3699,
					1,
					"paste",
					null,
					"AgAAAKAyAAAAAAAAqzIAAAAAAAAAAAAAqzIAAAAAAACrMgAAAAAAAAgAAAB1aW50MzJfdA",
					"AQAAAAAAAAABAAAAoDIAAAAAAACoMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3707,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPwyAAAAAAAAADMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/DIAAAAAAAD8MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3708,
					1,
					"left_delete",
					null,
					"AQAAAPwyAAAAAAAA/DIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAADMAAAAAAAAAMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3709,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAAPwyAAAAAAAA/TIAAAAAAAAAAAAA/TIAAAAAAAD+MgAAAAAAAAAAAAD+MgAAAAAAAP8yAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/DIAAAAAAAD8MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3712,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAADYzAAAAAAAANzMAAAAAAAAAAAAANzMAAAAAAAA4MwAAAAAAAAAAAAA4MwAAAAAAADkzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANjMAAAAAAAA2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					3715,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIkzAAAAAAAAjTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiTMAAAAAAACJMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3718,
					1,
					"insert",
					{
						"characters": "    "
					},
					"BAAAAMwzAAAAAAAAzTMAAAAAAAAAAAAAzTMAAAAAAADOMwAAAAAAAAAAAADOMwAAAAAAAM8zAAAAAAAAAAAAAM8zAAAAAAAA0DMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzDMAAAAAAADMMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3729,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4xAAAAAAAA7zEAAAAAAAAAAAAA7zEAAAAAAAD3MQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7jEAAAAAAADuMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3740,
					1,
					"paste",
					null,
					"AQAAAO4xAAAAAAAA+DEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7jEAAAAAAADuMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3741,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPgxAAAAAAAA+jEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+DEAAAAAAAD4MQAAAAAAAAAAAAAAAPC/"
				],
				[
					3744,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAFUsAAAAAAAAViwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSwAAAAAAABVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3747,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAO8xAAAAAAAA8DEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7zEAAAAAAADvMQAAAAAAAAAAAAAAAPC/"
				],
				[
					3758,
					1,
					"paste",
					null,
					"AQAAAPsxAAAAAAAADzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+zEAAAAAAAD7MQAAAAAAAAAAAAAAAPC/"
				],
				[
					3759,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA8yAAAAAAAAETIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADzIAAAAAAAAPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3769,
					1,
					"paste",
					null,
					"AQAAABAyAAAAAAAAIjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEDIAAAAAAAAQMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3772,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACQyAAAAAAAAJTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJDIAAAAAAAAkMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3786,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADo0AAAAAAAAOzQAAAAAAAAAAAAAOzQAAAAAAAA/NAAAAAAAAAAAAAA/NAAAAAAAAEA0AAAAAAAAAAAAAEA0AAAAAAAARDQAAAAAAAAAAAAAOzQAAAAAAAA7NAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAOjQAAAAAAAA6NAAAAAAAAAAAAAAAAPC/"
				],
				[
					3802,
					1,
					"insert",
					{
						"characters": "\n\nuint32_ty"
					},
					"DwAAAEYtAAAAAAAARy0AAAAAAAAAAAAARy0AAAAAAABLLQAAAAAAAAAAAABBNAAAAAAAAEE0AAAAAAAABAAAACAgICBLLQAAAAAAAEwtAAAAAAAAAAAAAEwtAAAAAAAAUC0AAAAAAAAAAAAARy0AAAAAAABHLQAAAAAAAAQAAAAgICAgTC0AAAAAAABNLQAAAAAAAAAAAABNLQAAAAAAAE4tAAAAAAAAAAAAAE4tAAAAAAAATy0AAAAAAAAAAAAATy0AAAAAAABQLQAAAAAAAAAAAABQLQAAAAAAAFEtAAAAAAAAAAAAAFEtAAAAAAAAUi0AAAAAAAAAAAAAUi0AAAAAAABTLQAAAAAAAAAAAABTLQAAAAAAAFQtAAAAAAAAAAAAAFQtAAAAAAAAVS0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARi0AAAAAAABGLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3803,
					2,
					"left_delete",
					null,
					"AgAAAFQtAAAAAAAAVC0AAAAAAAABAAAAeVMtAAAAAAAAUy0AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAVS0AAAAAAABVLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3804,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAFMtAAAAAAAAVC0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUy0AAAAAAABTLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3805,
					1,
					"insert",
					{
						"characters": " rec"
					},
					"BAAAAFQtAAAAAAAAVS0AAAAAAAAAAAAAVS0AAAAAAABWLQAAAAAAAAAAAABWLQAAAAAAAFctAAAAAAAAAAAAAFctAAAAAAAAWC0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVC0AAAAAAABULQAAAAAAAAAAAAAAAPC/"
				],
				[
					3806,
					4,
					"left_delete",
					null,
					"BAAAAFctAAAAAAAAVy0AAAAAAAABAAAAY1YtAAAAAAAAVi0AAAAAAAABAAAAZVUtAAAAAAAAVS0AAAAAAAABAAAAclQtAAAAAAAAVC0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAWC0AAAAAAABYLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3807,
					1,
					"insert",
					{
						"characters": " _record_le"
					},
					"CwAAAFQtAAAAAAAAVS0AAAAAAAAAAAAAVS0AAAAAAABWLQAAAAAAAAAAAABWLQAAAAAAAFctAAAAAAAAAAAAAFctAAAAAAAAWC0AAAAAAAAAAAAAWC0AAAAAAABZLQAAAAAAAAAAAABZLQAAAAAAAFotAAAAAAAAAAAAAFotAAAAAAAAWy0AAAAAAAAAAAAAWy0AAAAAAABcLQAAAAAAAAAAAABcLQAAAAAAAF0tAAAAAAAAAAAAAF0tAAAAAAAAXi0AAAAAAAAAAAAAXi0AAAAAAABfLQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVC0AAAAAAABULQAAAAAAAAAAAAAAAPC/"
				],
				[
					3808,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAF8tAAAAAAAAYC0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXy0AAAAAAABfLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3809,
					1,
					"left_delete",
					null,
					"AQAAAF8tAAAAAAAAXy0AAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAYC0AAAAAAABgLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3810,
					1,
					"insert",
					{
						"characters": "ngth;"
					},
					"BQAAAF8tAAAAAAAAYC0AAAAAAAAAAAAAYC0AAAAAAABhLQAAAAAAAAAAAABhLQAAAAAAAGItAAAAAAAAAAAAAGItAAAAAAAAYy0AAAAAAAAAAAAAYy0AAAAAAABkLQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXy0AAAAAAABfLQAAAAAAAAAAAAAAAPC/"
				],
				[
					3821,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGIyAAAAAAAAYzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYjIAAAAAAABiMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3822,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMyAAAAAAAAZDIAAAAAAAAAAAAAZDIAAAAAAABsMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzIAAAAAAABjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3823,
					1,
					"paste",
					null,
					"AQAAAGwyAAAAAAAAejIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbDIAAAAAAABsMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3824,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHoyAAAAAAAAfDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAejIAAAAAAAB6MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3825,
					1,
					"insert",
					{
						"characters": "caen"
					},
					"BAAAAHsyAAAAAAAAfDIAAAAAAAAAAAAAfDIAAAAAAAB9MgAAAAAAAAAAAAB9MgAAAAAAAH4yAAAAAAAAAAAAAH4yAAAAAAAAfzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAezIAAAAAAAB7MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3826,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"detail\":\"const CAENGlobalConfig &\",\"label\":\" caen_global_config\",\"sortText\":\"3f7304cbcaen_global_config\",\"kind\":6,\"textEdit\":{\"newText\":\"caen_global_config\",\"range\":{\"end\":{\"character\":27,\"line\":360},\"start\":{\"character\":23,\"line\":360}}},\"insertTextFormat\":1,\"filterText\":\"caen_global_config\",\"insertText\":\"caen_global_config\",\"score\":4.405664920806885},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							2728,
							3825,
							4
						],
						"trigger": "caen_global_config"
					},
					"AgAAAHsyAAAAAAAAezIAAAAAAAAEAAAAY2FlbnsyAAAAAAAAjTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfzIAAAAAAAB/MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3827,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAI0yAAAAAAAAjjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjTIAAAAAAACNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3828,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"detail\":\"uint32_t\",\"label\":\" RecordLength\",\"sortText\":\"404ff44eRecordLength\",\"kind\":5,\"textEdit\":{\"newText\":\"RecordLength\",\"range\":{\"end\":{\"character\":42,\"line\":360},\"start\":{\"character\":42,\"line\":360}}},\"insertTextFormat\":1,\"filterText\":\"RecordLength\",\"insertText\":\"RecordLength\",\"score\":1.375356912612915},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							2730,
							3827,
							1
						],
						"trigger": "RecordLength"
					},
					"AQAAAI4yAAAAAAAAmjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjjIAAAAAAACOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3833,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMyAAAAAAAAZDIAAAAAAAAAAAAAZDIAAAAAAABsMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzIAAAAAAABjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3835,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAGQyAAAAAAAAZDIAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAbDIAAAAAAABsMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3838,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAPwyAAAAAAAA/TIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/DIAAAAAAAD8MgAAAAAAAAAAAAAAAPC/"
				],
				[
					3848,
					1,
					"paste",
					null,
					"AgAAABkyAAAAAAAALjIAAAAAAAAAAAAALjIAAAAAAAAuMgAAAAAAABQAAABfZ2V0X2VuYWJsZWRfY2hhbm5lcw",
					"AQAAAAAAAAABAAAAGTIAAAAAAAAtMgAAAAAAAAAAAAAAAPC/"
				],
				[
					3855,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJQ0AAAAAAAAlTQAAAAAAAAAAAAAlTQAAAAAAACZNAAAAAAAAAAAAACZNAAAAAAAAJo0AAAAAAAAAAAAAJo0AAAAAAAAnjQAAAAAAAAAAAAAlTQAAAAAAACVNAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAlDQAAAAAAACUNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3856,
					1,
					"insert",
					{
						"characters": "std::ar"
					},
					"BwAAAJo0AAAAAAAAmzQAAAAAAAAAAAAAmzQAAAAAAACcNAAAAAAAAAAAAACcNAAAAAAAAJ00AAAAAAAAAAAAAJ00AAAAAAAAnjQAAAAAAAAAAAAAnjQAAAAAAACfNAAAAAAAAAAAAACfNAAAAAAAAKA0AAAAAAAAAAAAAKA0AAAAAAAAoTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmjQAAAAAAACaNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3857,
					1,
					"insert",
					{
						"characters": "ray<>"
					},
					"BQAAAKE0AAAAAAAAojQAAAAAAAAAAAAAojQAAAAAAACjNAAAAAAAAAAAAACjNAAAAAAAAKQ0AAAAAAAAAAAAAKQ0AAAAAAAApTQAAAAAAAAAAAAApTQAAAAAAACmNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoTQAAAAAAAChNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3861,
					1,
					"left_delete",
					null,
					"AQAAAJo0AAAAAAAAmjQAAAAAAAAMAAAAc3RkOjphcnJheTw+",
					"AQAAAAAAAAABAAAApjQAAAAAAACaNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3862,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAJo0AAAAAAAAmzQAAAAAAAAAAAAAmzQAAAAAAACcNAAAAAAAAAAAAACcNAAAAAAAAJ00AAAAAAAAAAAAAJ00AAAAAAAAnjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmjQAAAAAAACaNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3863,
					1,
					"insert",
					{
						"characters": " _d"
					},
					"AwAAAJ40AAAAAAAAnzQAAAAAAAAAAAAAnzQAAAAAAACgNAAAAAAAAAAAAACgNAAAAAAAAKE0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnjQAAAAAAACeNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3864,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKE0AAAAAAAAojQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoTQAAAAAAAChNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3865,
					2,
					"left_delete",
					null,
					"AgAAAKE0AAAAAAAAoTQAAAAAAAABAAAAZqA0AAAAAAAAoDQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAojQAAAAAAACiNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3866,
					1,
					"insert",
					{
						"characters": "form_ranks"
					},
					"CgAAAKA0AAAAAAAAoTQAAAAAAAAAAAAAoTQAAAAAAACiNAAAAAAAAAAAAACiNAAAAAAAAKM0AAAAAAAAAAAAAKM0AAAAAAAApDQAAAAAAAAAAAAApDQAAAAAAAClNAAAAAAAAAAAAAClNAAAAAAAAKY0AAAAAAAAAAAAAKY0AAAAAAAApzQAAAAAAAAAAAAApzQAAAAAAACoNAAAAAAAAAAAAACoNAAAAAAAAKk0AAAAAAAAAAAAAKk0AAAAAAAAqjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoDQAAAAAAACgNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3867,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKo0AAAAAAAArDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqjQAAAAAAACqNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3874,
					1,
					"paste",
					null,
					"AQAAAKs0AAAAAAAAJjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqzQAAAAAAACrNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3877,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACc1AAAAAAAAKDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJzUAAAAAAAAnNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3878,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACg1AAAAAAAAKjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKDUAAAAAAAAoNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3879,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"CAAAACk1AAAAAAAAKjUAAAAAAAAAAAAAKjUAAAAAAABANQAAAAAAAAAAAABANQAAAAAAAEE1AAAAAAAAAAAAAEE1AAAAAAAAVzUAAAAAAAAAAAAAKjUAAAAAAAAqNQAAAAAAABYAAAAgICAgICAgICAgICAgICAgICAgICAgKzUAAAAAAAArNQAAAAAAABYAAAAgICAgICAgICAgICAgICAgICAgICAgKzUAAAAAAAAvNQAAAAAAAAAAAAAqNQAAAAAAADI1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKTUAAAAAAAApNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3882,
					1,
					"left_delete",
					null,
					"AgAAAOs0AAAAAAAA6zQAAAAAAAACAAAAICAoNQAAAAAAACg1AAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA7TQAAAAAAADtNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3883,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOs0AAAAAAAA7DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6zQAAAAAAADrNAAAAAAAAAAAAAAAAPC/"
				],
				[
					3888,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACk1AAAAAAAAKjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKTUAAAAAAAApNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3891,
					1,
					"reindent",
					null,
					"AQAAACo1AAAAAAAAMjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKjUAAAAAAAAqNQAAAAAAAAAAAAAAAAAA"
				],
				[
					3892,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAADI1AAAAAAAAMzUAAAAAAAAAAAAAMzUAAAAAAAA0NQAAAAAAAAAAAAA0NQAAAAAAADU1AAAAAAAAAAAAADU1AAAAAAAANjUAAAAAAAAAAAAANjUAAAAAAAA3NQAAAAAAAAAAAAA3NQAAAAAAADg1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMjUAAAAAAAAyNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3893,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADg1AAAAAAAAOTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODUAAAAAAAA4NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3894,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADk1AAAAAAAAOzUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOTUAAAAAAAA5NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3895,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAADo1AAAAAAAAOzUAAAAAAAAAAAAAOzUAAAAAAAA8NQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOjUAAAAAAAA6NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3896,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAADw1AAAAAAAAPTUAAAAAAAAAAAAAPTUAAAAAAAA+NQAAAAAAAAAAAAA+NQAAAAAAAD81AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPDUAAAAAAAA8NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3897,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAD81AAAAAAAAQDUAAAAAAAAAAAAAQDUAAAAAAABBNQAAAAAAAAAAAABBNQAAAAAAAEI1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPzUAAAAAAAA/NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3898,
					1,
					"insert",
					{
						"characters": " ,1"
					},
					"AwAAAEI1AAAAAAAAQzUAAAAAAAAAAAAAQzUAAAAAAABENQAAAAAAAAAAAABENQAAAAAAAEU1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQjUAAAAAAABCNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3899,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEU1AAAAAAAARjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTUAAAAAAABFNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3900,
					3,
					"left_delete",
					null,
					"AwAAAEU1AAAAAAAARTUAAAAAAAABAAAAIEQ1AAAAAAAARDUAAAAAAAABAAAAMUM1AAAAAAAAQzUAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAARjUAAAAAAABGNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3901,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAAEM1AAAAAAAARDUAAAAAAAAAAAAARDUAAAAAAABFNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQzUAAAAAAABDNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3902,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEU1AAAAAAAARjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTUAAAAAAABFNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3903,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAAEY1AAAAAAAARzUAAAAAAAAAAAAARzUAAAAAAABINQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARjUAAAAAAABGNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3904,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAEg1AAAAAAAASTUAAAAAAAAAAAAASTUAAAAAAABKNQAAAAAAAAAAAABKNQAAAAAAAEs1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASDUAAAAAAABINQAAAAAAAAAAAAAAAPC/"
				],
				[
					3905,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAEs1AAAAAAAATDUAAAAAAAAAAAAATDUAAAAAAABNNQAAAAAAAAAAAABNNQAAAAAAAE41AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASzUAAAAAAABLNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3906,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAE41AAAAAAAATzUAAAAAAAAAAAAATzUAAAAAAABQNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjUAAAAAAABONQAAAAAAAAAAAAAAAPC/"
				],
				[
					3907,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFA1AAAAAAAAUTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUDUAAAAAAABQNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3908,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAFE1AAAAAAAAUjUAAAAAAAAAAAAAUjUAAAAAAABTNQAAAAAAAAAAAABTNQAAAAAAAFQ1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUTUAAAAAAABRNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3909,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQ1AAAAAAAAVTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVDUAAAAAAABUNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3911,
					1,
					"insert",
					{
						"characters": "23"
					},
					"AgAAAFU1AAAAAAAAVjUAAAAAAAAAAAAAVjUAAAAAAABXNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVTUAAAAAAABVNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3914,
					1,
					"left_delete",
					null,
					"AQAAAFU1AAAAAAAAVTUAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAVjUAAAAAAABWNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3916,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFc1AAAAAAAAWDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzUAAAAAAABXNQAAAAAAAAAAAAAAAPC/"
				],
				[
					3921,
					1,
					"cut",
					null,
					"AQAAADk1AAAAAAAAOTUAAAAAAAAfAAAAezEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDN9Ow",
					"AQAAAAAAAAABAAAAWDUAAAAAAAA5NQAAAAAAAAAAAAAAAPC/"
				],
				[
					3924,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAEMsAAAAAAAARCwAAAAAAAAAAAAARCwAAAAAAABkLAAAAAAAAAAAAABkLAAAAAAAAGUsAAAAAAAAAAAAAGUsAAAAAAAAhSwAAAAAAAAAAAAARCwAAAAAAABELAAAAAAAACAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAQywAAAAAAABDLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3925,
					8,
					"left_delete",
					null,
					"CAAAAGEsAAAAAAAAYSwAAAAAAAAEAAAAICAgIF0sAAAAAAAAXSwAAAAAAAAEAAAAICAgIFksAAAAAAAAWSwAAAAAAAAEAAAAICAgIFUsAAAAAAAAVSwAAAAAAAAEAAAAICAgIFEsAAAAAAAAUSwAAAAAAAAEAAAAICAgIE0sAAAAAAAATSwAAAAAAAAEAAAAICAgIEksAAAAAAAASSwAAAAAAAAEAAAAICAgIEUsAAAAAAAARSwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAZSwAAAAAAABlLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3926,
					1,
					"reindent",
					null,
					"AQAAAEUsAAAAAAAAZSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSwAAAAAAABFLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3927,
					7,
					"left_delete",
					null,
					"BwAAAGEsAAAAAAAAYSwAAAAAAAAEAAAAICAgIF0sAAAAAAAAXSwAAAAAAAAEAAAAICAgIFksAAAAAAAAWSwAAAAAAAAEAAAAICAgIFUsAAAAAAAAVSwAAAAAAAAEAAAAICAgIFEsAAAAAAAAUSwAAAAAAAAEAAAAICAgIE0sAAAAAAAATSwAAAAAAAAEAAAAICAgIEksAAAAAAAASSwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAZSwAAAAAAABlLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3928,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAEksAAAAAAAASiwAAAAAAAAAAAAASiwAAAAAAABLLAAAAAAAAAAAAABLLAAAAAAAAEwsAAAAAAAAAAAAAEwsAAAAAAAATSwAAAAAAAAAAAAATSwAAAAAAABOLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSwAAAAAAABJLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3929,
					1,
					"insert",
					{
						"characters": " sipmdw"
					},
					"BwAAAE4sAAAAAAAATywAAAAAAAAAAAAATywAAAAAAABQLAAAAAAAAAAAAABQLAAAAAAAAFEsAAAAAAAAAAAAAFEsAAAAAAAAUiwAAAAAAAAAAAAAUiwAAAAAAABTLAAAAAAAAAAAAABTLAAAAAAAAFQsAAAAAAAAAAAAAFQsAAAAAAAAVSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiwAAAAAAABOLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3930,
					1,
					"insert",
					{
						"characters": "_ranks"
					},
					"BgAAAFUsAAAAAAAAViwAAAAAAAAAAAAAViwAAAAAAABXLAAAAAAAAAAAAABXLAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAWSwAAAAAAAAAAAAAWSwAAAAAAABaLAAAAAAAAAAAAABaLAAAAAAAAFssAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSwAAAAAAABVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3931,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFssAAAAAAAAXCwAAAAAAAAAAAAAXCwAAAAAAABdLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWywAAAAAAABbLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3932,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF0sAAAAAAAAXiwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSwAAAAAAABdLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3933,
					1,
					"paste",
					null,
					"AQAAAF4sAAAAAAAAfSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXiwAAAAAAABeLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3937,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAE8sAAAAAAAAUCwAAAAAAAAAAAAAUCwAAAAAAABRLAAAAAAAAAAAAABRLAAAAAAAAFIsAAAAAAAAAAAAAFIsAAAAAAAAUywAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATywAAAAAAABPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3938,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFMsAAAAAAAAVCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUywAAAAAAABTLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3941,
					1,
					"insert",
					{
						"characters": "std::to_"
					},
					"CAAAAGMsAAAAAAAAZCwAAAAAAAAAAAAAZCwAAAAAAABlLAAAAAAAAAAAAABlLAAAAAAAAGYsAAAAAAAAAAAAAGYsAAAAAAAAZywAAAAAAAAAAAAAZywAAAAAAABoLAAAAAAAAAAAAABoLAAAAAAAAGksAAAAAAAAAAAAAGksAAAAAAAAaiwAAAAAAAAAAAAAaiwAAAAAAABrLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYywAAAAAAABjLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3944,
					1,
					"insert",
					{
						"characters": "array"
					},
					"BQAAAGssAAAAAAAAbCwAAAAAAAAAAAAAbCwAAAAAAABtLAAAAAAAAAAAAABtLAAAAAAAAG4sAAAAAAAAAAAAAG4sAAAAAAAAbywAAAAAAAAAAAAAbywAAAAAAABwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaywAAAAAAABrLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3945,
					1,
					"insert",
					{
						"characters": "*("
					},
					"AgAAAHAsAAAAAAAAcSwAAAAAAAAAAAAAcSwAAAAAAAByLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcCwAAAAAAABwLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3946,
					2,
					"left_delete",
					null,
					"AgAAAHEsAAAAAAAAcSwAAAAAAAABAAAAKHAsAAAAAAAAcCwAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAciwAAAAAAAByLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3947,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAHAsAAAAAAAAcSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcCwAAAAAAABwLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3950,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAI8sAAAAAAAAkCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjywAAAAAAACPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3952,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAIY1AAAAAAAAhjUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAkCwAAAAAAACQLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3957,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAAE8sAAAAAAAAUCwAAAAAAAAAAAAAUCwAAAAAAABRLAAAAAAAAAAAAABRLAAAAAAAAFIsAAAAAAAAAAAAAFIsAAAAAAAAUywAAAAAAAAAAAAAUywAAAAAAABULAAAAAAAAAAAAABULAAAAAAAAFUsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATywAAAAAAABPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3958,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUsAAAAAAAAViwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSwAAAAAAABVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3965,
					1,
					"left_delete",
					null,
					"AQAAAJQsAAAAAAAAlCwAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAlSwAAAAAAACVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3966,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAJQsAAAAAAAAlSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlCwAAAAAAACULAAAAAAAAAAAAAAAAPC/"
				],
				[
					3977,
					1,
					"insert",
					{
						"characters": "\n#include"
					},
					"CQAAAH8BAAAAAAAAgAEAAAAAAAAAAAAAgAEAAAAAAACBAQAAAAAAAAAAAACBAQAAAAAAAIIBAAAAAAAAAAAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACEAQAAAAAAAAAAAACEAQAAAAAAAIUBAAAAAAAAAAAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAACHAQAAAAAAAIgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					3978,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgBAAAAAAAAiQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3979,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAIkBAAAAAAAAiwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3980,
					1,
					"insert",
					{
						"characters": "array"
					},
					"BQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3992,
					1,
					"insert",
					{
						"characters": "std::array"
					},
					"CwAAAGcsAAAAAAAAaCwAAAAAAAAAAAAAaCwAAAAAAABoLAAAAAAAAAQAAABhdXRvaCwAAAAAAABpLAAAAAAAAAAAAABpLAAAAAAAAGosAAAAAAAAAAAAAGosAAAAAAAAaywAAAAAAAAAAAAAaywAAAAAAABsLAAAAAAAAAAAAABsLAAAAAAAAG0sAAAAAAAAAAAAAG0sAAAAAAAAbiwAAAAAAAAAAAAAbiwAAAAAAABvLAAAAAAAAAAAAABvLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAcSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZywAAAAAAABrLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3993,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAAHEsAAAAAAAAciwAAAAAAAAAAAAAciwAAAAAAABzLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcSwAAAAAAABxLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3995,
					1,
					"insert",
					{
						"characters": "std::size_"
					},
					"CgAAAHIsAAAAAAAAcywAAAAAAAAAAAAAcywAAAAAAAB0LAAAAAAAAAAAAAB0LAAAAAAAAHUsAAAAAAAAAAAAAHUsAAAAAAAAdiwAAAAAAAAAAAAAdiwAAAAAAAB3LAAAAAAAAAAAAAB3LAAAAAAAAHgsAAAAAAAAAAAAAHgsAAAAAAAAeSwAAAAAAAAAAAAAeSwAAAAAAAB6LAAAAAAAAAAAAAB6LAAAAAAAAHssAAAAAAAAAAAAAHssAAAAAAAAfCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAciwAAAAAAAByLAAAAAAAAAAAAAAAAPC/"
				],
				[
					3996,
					1,
					"insert",
					{
						"characters": "t,"
					},
					"AgAAAHwsAAAAAAAAfSwAAAAAAAAAAAAAfSwAAAAAAAB+LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfCwAAAAAAAB8LAAAAAAAAAAAAAAAAPC/"
				],
				[
					3997,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4sAAAAAAAAfywAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfiwAAAAAAAB+LAAAAAAAAAAAAAAAAPC/"
				],
				[
					4003,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAAH8sAAAAAAAAgCwAAAAAAAAAAAAAgCwAAAAAAACBLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfywAAAAAAAB/LAAAAAAAAAAAAAAAAPC/"
				],
				[
					4007,
					1,
					"left_delete",
					null,
					"AQAAAJIsAAAAAAAAkiwAAAAAAAAOAAAAc3RkOjp0b19hcnJheSg",
					"AQAAAAAAAAABAAAAkiwAAAAAAACgLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4008,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJIsAAAAAAAAkywAAAAAAAAAAAAAkywAAAAAAACXLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkiwAAAAAAACSLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4011,
					1,
					"left_delete",
					null,
					"AQAAALUsAAAAAAAAtSwAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAtiwAAAAAAAC2LAAAAAAAAAAAAAAAAPC/"
				],
				[
					4014,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t\t"
					},
					"CAAAAJcsAAAAAAAAmywAAAAAAAAAAAAAmywAAAAAAACfLAAAAAAAAAAAAACfLAAAAAAAAKMsAAAAAAAAAAAAAKMsAAAAAAAApywAAAAAAAAAAAAApywAAAAAAACrLAAAAAAAAAAAAACrLAAAAAAAAK8sAAAAAAAAAAAAAK8sAAAAAAAAsywAAAAAAAAAAAAAsywAAAAAAAC3LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlywAAAAAAACXLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4016,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAJEsAAAAAAAAkSwAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtywAAAAAAAC3LAAAAAAAAAAAAAAAAPC/"
				],
				[
					4028,
					1,
					"paste",
					null,
					"AgAAAH8sAAAAAAAAhSwAAAAAAAAAAAAAhSwAAAAAAACFLAAAAAAAAAIAAAAxMA",
					"AQAAAAAAAAABAAAAfywAAAAAAACBLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4029,
					1,
					"insert",
					{
						"characters": "::nu"
					},
					"BAAAAIUsAAAAAAAAhiwAAAAAAAAAAAAAhiwAAAAAAACHLAAAAAAAAAAAAACHLAAAAAAAAIgsAAAAAAAAAAAAAIgsAAAAAAAAiSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSwAAAAAAACFLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4030,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIksAAAAAAAAiiwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSwAAAAAAACJLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4031,
					3,
					"left_delete",
					null,
					"AwAAAIksAAAAAAAAiSwAAAAAAAABAAAAbYgsAAAAAAAAiCwAAAAAAAABAAAAdYcsAAAAAAAAhywAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAiiwAAAAAAACKLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4032,
					2,
					"left_delete",
					null,
					"AgAAAIYsAAAAAAAAhiwAAAAAAAABAAAAOoUsAAAAAAAAhSwAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAhywAAAAAAACHLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4033,
					1,
					"insert",
					{
						"characters": ".num"
					},
					"BAAAAIUsAAAAAAAAhiwAAAAAAAAAAAAAhiwAAAAAAACHLAAAAAAAAAAAAACHLAAAAAAAAIgsAAAAAAAAAAAAAIgsAAAAAAAAiSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSwAAAAAAACFLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4034,
					1,
					"insert",
					{
						"characters": "_colos"
					},
					"BgAAAIksAAAAAAAAiiwAAAAAAAAAAAAAiiwAAAAAAACLLAAAAAAAAAAAAACLLAAAAAAAAIwsAAAAAAAAAAAAAIwsAAAAAAAAjSwAAAAAAAAAAAAAjSwAAAAAAACOLAAAAAAAAAAAAACOLAAAAAAAAI8sAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSwAAAAAAACJLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4035,
					2,
					"left_delete",
					null,
					"AgAAAI4sAAAAAAAAjiwAAAAAAAABAAAAc40sAAAAAAAAjSwAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAjywAAAAAAACPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4036,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAI0sAAAAAAAAjiwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSwAAAAAAACNLAAAAAAAAAAAAAAAAPC/"
				],
				[
					4052,
					1,
					"paste",
					null,
					"AQAAAAEzAAAAAAAADTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAATMAAAAAAAABMwAAAAAAAAAAAAAAAPC/"
				],
				[
					4053,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA0zAAAAAAAADjMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADTMAAAAAAAANMwAAAAAAAAAAAAAAAPC/"
				],
				[
					4054,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4zAAAAAAAADzMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADjMAAAAAAAAOMwAAAAAAAAAAAAAAAPC/"
				],
				[
					4059,
					1,
					"cut",
					null,
					"AQAAAAEtAAAAAAAAAS0AAAAAAAAVAAAAICAgIFNpUE1EVyBfc3RyZWFtZXI7",
					"AQAAAAAAAAABAAAAFi0AAAAAAAABLQAAAAAAAAAAAAAAAPC/"
				],
				[
					4060,
					1,
					"left_delete",
					null,
					"AQAAAAAtAAAAAAAAAC0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAS0AAAAAAAABLQAAAAAAAAAAAAAAAPC/"
				],
				[
					4069,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO0tAAAAAAAA7i0AAAAAAAAAAAAA7i0AAAAAAADyLQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7S0AAAAAAADtLQAAAAAAAAAAAAAAAPC/"
				],
				[
					4070,
					1,
					"paste",
					null,
					"AQAAAPItAAAAAAAABy4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8i0AAAAAAADyLQAAAAAAAAAAAAAAAPC/"
				],
				[
					4077,
					1,
					"unindent",
					null,
					"AQAAAO4tAAAAAAAA7i0AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA9i0AAAAAAAD2LQAAAAAAAAAAAAAAAPC/"
				],
				[
					4091,
					1,
					"insert",
					{
						"characters": "sizes"
					},
					"BgAAAFI1AAAAAAAAUzUAAAAAAAAAAAAAUzUAAAAAAABTNQAAAAAAAAUAAAByYW5rc1M1AAAAAAAAVDUAAAAAAAAAAAAAVDUAAAAAAABVNQAAAAAAAAAAAABVNQAAAAAAAFY1AAAAAAAAAAAAAFY1AAAAAAAAVzUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzUAAAAAAABSNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4096,
					2,
					"left_delete",
					null,
					"AgAAANc1AAAAAAAA1zUAAAAAAAAOAAAAICAgICAgICByZXR1cm7WNQAAAAAAANY1AAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA5TUAAAAAAADXNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4097,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANY1AAAAAAAA1zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1jUAAAAAAADWNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4099,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANY1AAAAAAAA1zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1jUAAAAAAADWNQAAAAAAAAAAAAAAAAAA"
				],
				[
					4100,
					1,
					"reindent",
					null,
					"AQAAANc1AAAAAAAA3zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1zUAAAAAAADXNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4105,
					1,
					"insert",
					{
						"characters": "std::array<"
					},
					"DQAAAEc1AAAAAAAASDUAAAAAAAAAAAAASDUAAAAAAABINQAAAAAAAAQAAABhdXRv1DUAAAAAAADUNQAAAAAAAAgAAAAgICAgICAgIEg1AAAAAAAASTUAAAAAAAAAAAAASTUAAAAAAABKNQAAAAAAAAAAAABKNQAAAAAAAEs1AAAAAAAAAAAAAEs1AAAAAAAATDUAAAAAAAAAAAAATDUAAAAAAABNNQAAAAAAAAAAAABNNQAAAAAAAE41AAAAAAAAAAAAAE41AAAAAAAATzUAAAAAAAAAAAAATzUAAAAAAABQNQAAAAAAAAAAAABQNQAAAAAAAFE1AAAAAAAAAAAAAFE1AAAAAAAAUjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARzUAAAAAAABLNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4106,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAFI1AAAAAAAAUzUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjUAAAAAAABSNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4108,
					1,
					"insert",
					{
						"characters": "std::size_t"
					},
					"CwAAAFI1AAAAAAAAUzUAAAAAAAAAAAAAUzUAAAAAAABUNQAAAAAAAAAAAABUNQAAAAAAAFU1AAAAAAAAAAAAAFU1AAAAAAAAVjUAAAAAAAAAAAAAVjUAAAAAAABXNQAAAAAAAAAAAABXNQAAAAAAAFg1AAAAAAAAAAAAAFg1AAAAAAAAWTUAAAAAAAAAAAAAWTUAAAAAAABaNQAAAAAAAAAAAABaNQAAAAAAAFs1AAAAAAAAAAAAAFs1AAAAAAAAXDUAAAAAAAAAAAAAXDUAAAAAAABdNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjUAAAAAAABSNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4109,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF01AAAAAAAAXjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXTUAAAAAAABdNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4110,
					1,
					"insert",
					{
						"characters": " SiPM"
					},
					"BQAAAF41AAAAAAAAXzUAAAAAAAAAAAAAXzUAAAAAAABgNQAAAAAAAAAAAABgNQAAAAAAAGE1AAAAAAAAAAAAAGE1AAAAAAAAYjUAAAAAAAAAAAAAYjUAAAAAAABjNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjUAAAAAAABeNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4118,
					2,
					"left_delete",
					null,
					"AgAAAF81AAAAAAAAXzUAAAAAAAAEAAAAU2lQTV41AAAAAAAAXjUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXzUAAAAAAABjNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4119,
					1,
					"paste",
					null,
					"AQAAAF41AAAAAAAAbjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjUAAAAAAABeNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4122,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAHw1AAAAAAAAfTUAAAAAAAAAAAAAfTUAAAAAAACBNQAAAAAAAAAAAAB9NQAAAAAAAH01AAAAAAAABAAAACAgICB9NQAAAAAAAIU1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfDUAAAAAAAB8NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4127,
					4,
					"unindent",
					null,
					"BAAAALE1AAAAAAAAsTUAAAAAAAAEAAAAICAgILE1AAAAAAAAsTUAAAAAAAAEAAAAICAgILE1AAAAAAAAsTUAAAAAAAAEAAAAICAgILE1AAAAAAAAsTUAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAxjUAAAAAAADGNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4128,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALY1AAAAAAAAuTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtjUAAAAAAAC2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4135,
					1,
					"reindent",
					null,
					"AQAAAPc1AAAAAAAA/zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9zUAAAAAAAD3NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4136,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAP81AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAABNgAAAAAAAAAAAAABNgAAAAAAAAI2AAAAAAAAAAAAAAI2AAAAAAAAAzYAAAAAAAAAAAAAAzYAAAAAAAAENgAAAAAAAAAAAAAENgAAAAAAAAU2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/zUAAAAAAAD/NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAU2AAAAAAAABjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABTYAAAAAAAAFNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4138,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAY2AAAAAAAACDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABjYAAAAAAAAGNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4139,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAAAc2AAAAAAAACDYAAAAAAAAAAAAACDYAAAAAAAAJNgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABzYAAAAAAAAHNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAk2AAAAAAAACjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACTYAAAAAAAAJNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4150,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPY1AAAAAAAA9zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9jUAAAAAAAD2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4151,
					1,
					"reindent",
					null,
					"AQAAAPc1AAAAAAAA/zUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9zUAAAAAAAD3NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4152,
					1,
					"paste",
					null,
					"AQAAAP81AAAAAAAAFDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/zUAAAAAAAD/NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4153,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABQ2AAAAAAAAFjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFDYAAAAAAAAUNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4161,
					1,
					"paste",
					null,
					"AQAAABU2AAAAAAAAJzYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFTYAAAAAAAAVNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4163,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACg2AAAAAAAAKTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKDYAAAAAAAAoNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4166,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAP81AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAABNgAAAAAAAAAAAAABNgAAAAAAAAI2AAAAAAAAAAAAAAI2AAAAAAAAAzYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/zUAAAAAAAD/NQAAAAAAAAAAAAAAAPC/"
				],
				[
					4167,
					1,
					"insert",
					{
						"characters": " num_en"
					},
					"BwAAAAM2AAAAAAAABDYAAAAAAAAAAAAABDYAAAAAAAAFNgAAAAAAAAAAAAAFNgAAAAAAAAY2AAAAAAAAAAAAAAY2AAAAAAAABzYAAAAAAAAAAAAABzYAAAAAAAAINgAAAAAAAAAAAAAINgAAAAAAAAk2AAAAAAAAAAAAAAk2AAAAAAAACjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAzYAAAAAAAADNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4168,
					1,
					"insert",
					{
						"characters": "_chs"
					},
					"BAAAAAo2AAAAAAAACzYAAAAAAAAAAAAACzYAAAAAAAAMNgAAAAAAAAAAAAAMNgAAAAAAAA02AAAAAAAAAAAAAA02AAAAAAAADjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACjYAAAAAAAAKNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4169,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA42AAAAAAAADzYAAAAAAAAAAAAADzYAAAAAAAAQNgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADjYAAAAAAAAONgAAAAAAAAAAAAAAAPC/"
				],
				[
					4170,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABA2AAAAAAAAETYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEDYAAAAAAAAQNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4182,
					1,
					"paste",
					null,
					"AQAAAE82AAAAAAAAWTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATzYAAAAAAABPNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4183,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFk2AAAAAAAAWjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWTYAAAAAAABZNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4184,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAFo2AAAAAAAAWzYAAAAAAAAAAAAAWzYAAAAAAABcNgAAAAAAAAAAAABcNgAAAAAAAF02AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjYAAAAAAABaNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4185,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF02AAAAAAAAXjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXTYAAAAAAABdNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4186,
					1,
					"paste",
					null,
					"AQAAAF42AAAAAAAAaDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjYAAAAAAABeNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4187,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGg2AAAAAAAAaTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaDYAAAAAAABoNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4188,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGk2AAAAAAAAajYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaTYAAAAAAABpNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4189,
					1,
					"paste",
					null,
					"AQAAAGo2AAAAAAAAdDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAajYAAAAAAABqNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4190,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHQ2AAAAAAAAdTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdDYAAAAAAAB0NgAAAAAAAAAAAAAAAPC/"
				],
				[
					4191,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHU2AAAAAAAAdjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdTYAAAAAAAB1NgAAAAAAAAAAAAAAAPC/"
				],
				[
					4192,
					1,
					"paste",
					null,
					"AQAAAHY2AAAAAAAAgDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdjYAAAAAAAB2NgAAAAAAAAAAAAAAAPC/"
				],
				[
					4194,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIA2AAAAAAAAgTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgDYAAAAAAACANgAAAAAAAAAAAAAAAPC/"
				],
				[
					4195,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIE2AAAAAAAAgjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgTYAAAAAAACBNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4196,
					1,
					"paste",
					null,
					"AQAAAII2AAAAAAAAjDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgjYAAAAAAACCNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4200,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIw2AAAAAAAAjTYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjDYAAAAAAACMNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4201,
					1,
					"insert",
					{
						"characters": "\n\t\t\t1,"
					},
					"CQAAAI02AAAAAAAAjjYAAAAAAAAAAAAAjjYAAAAAAACWNgAAAAAAAAAAAACONgAAAAAAAI42AAAAAAAACAAAACAgICAgICAgjjYAAAAAAACSNgAAAAAAAAAAAACSNgAAAAAAAJY2AAAAAAAAAAAAAJY2AAAAAAAAmjYAAAAAAAAAAAAAmjYAAAAAAACeNgAAAAAAAAAAAACeNgAAAAAAAJ82AAAAAAAAAAAAAJ82AAAAAAAAoDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjTYAAAAAAACNNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4202,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAKA2AAAAAAAAoTYAAAAAAAAAAAAAoTYAAAAAAACiNgAAAAAAAAAAAACiNgAAAAAAAKM2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoDYAAAAAAACgNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4203,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKM2AAAAAAAApDYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAozYAAAAAAACjNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4204,
					1,
					"paste",
					null,
					"AQAAAKQ2AAAAAAAArjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApDYAAAAAAACkNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4205,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK42AAAAAAAArzYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArjYAAAAAAACuNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4206,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAK82AAAAAAAAsDYAAAAAAAAAAAAAsDYAAAAAAACxNgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArzYAAAAAAACvNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4207,
					1,
					"left_delete",
					null,
					"AQAAALA2AAAAAAAAsDYAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAsTYAAAAAAACxNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4217,
					1,
					"paste",
					null,
					"AQAAALA2AAAAAAAAwjYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsDYAAAAAAACwNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4219,
					1,
					"insert",
					{
						"characters": ".R"
					},
					"AgAAAMI2AAAAAAAAwzYAAAAAAAAAAAAAwzYAAAAAAADENgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwjYAAAAAAADCNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4220,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"detail\":\"uint32_t\",\"label\":\" RecordLength\",\"sortText\":\"40677879RecordLength\",\"kind\":5,\"textEdit\":{\"newText\":\"RecordLength\",\"range\":{\"end\":{\"character\":53,\"line\":393},\"start\":{\"character\":53,\"line\":393}}},\"insertTextFormat\":1,\"filterText\":\"RecordLength\",\"insertText\":\"RecordLength\",\"score\":1.1916359663009644},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3019,
							4219,
							1
						],
						"trigger": "RecordLength"
					},
					"AgAAAMM2AAAAAAAAwzYAAAAAAAABAAAAUsM2AAAAAAAAzzYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxDYAAAAAAADENgAAAAAAAAAAAAAAAPC/"
				],
				[
					4222,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANA2AAAAAAAA0TYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0DYAAAAAAADQNgAAAAAAAAAAAAAAAPC/"
				],
				[
					4232,
					1,
					"paste",
					null,
					"AQAAAA8zAAAAAAAAGjMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADzMAAAAAAAAPMwAAAAAAAAAAAAAAAPC/"
				],
				[
					4233,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABozAAAAAAAAHDMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjMAAAAAAAAaMwAAAAAAAAAAAAAAAPC/"
				],
				[
					4239,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAAPQzAAAAAAAA9TMAAAAAAAAAAAAA9TMAAAAAAAD1MwAAAAAAABQAAABzdGQ6OnNpemVfdCBlbl9jaHMgPfUzAAAAAAAA9jMAAAAAAAAAAAAA9jMAAAAAAAD3MwAAAAAAAAAAAAD3MwAAAAAAAPgzAAAAAAAAAAAAAPgzAAAAAAAA+TMAAAAAAAAAAAAA+TMAAAAAAAD6MwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACDQAAAAAAAD0MwAAAAAAAAAAAAAAAPC/"
				],
				[
					4244,
					2,
					"left_delete",
					null,
					"AgAAACM1AAAAAAAAIzUAAAAAAAAXAAAACiAgICAgICAgcmV0dXJuIGVuX2NoczsiNQAAAAAAACI1AAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAOjUAAAAAAAAjNQAAAAAAAAAAAAAAAPC/"
				],
				[
					4249,
					4,
					"unindent",
					null,
					"EAAAABo0AAAAAAAAGjQAAAAAAAAEAAAAICAgIFA0AAAAAAAAUDQAAAAAAAAEAAAAICAgIJs0AAAAAAAAmzQAAAAAAAAEAAAAICAgIN40AAAAAAAA3jQAAAAAAAAEAAAAICAgIBo0AAAAAAAAGjQAAAAAAAAEAAAAICAgIEw0AAAAAAAATDQAAAAAAAAEAAAAICAgIJM0AAAAAAAAkzQAAAAAAAAEAAAAICAgINI0AAAAAAAA0jQAAAAAAAAEAAAAICAgIBo0AAAAAAAAGjQAAAAAAAAEAAAAICAgIEg0AAAAAAAASDQAAAAAAAAEAAAAICAgIIs0AAAAAAAAizQAAAAAAAAEAAAAICAgIMY0AAAAAAAAxjQAAAAAAAAEAAAAICAgIBo0AAAAAAAAGjQAAAAAAAAEAAAAICAgIEQ0AAAAAAAARDQAAAAAAAAEAAAAICAgIIM0AAAAAAAAgzQAAAAAAAAEAAAAICAgILo0AAAAAAAAujQAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAFzUAAAAAAAAaNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4257,
					1,
					"insert",
					{
						"characters": "  "
					},
					"CAAAANU0AAAAAAAA1jQAAAAAAAAAAAAAnjQAAAAAAACfNAAAAAAAAAAAAABfNAAAAAAAAGA0AAAAAAAAAAAAADU0AAAAAAAANjQAAAAAAAAAAAAA2TQAAAAAAADaNAAAAAAAAAAAAAChNAAAAAAAAKI0AAAAAAAAAAAAAGE0AAAAAAAAYjQAAAAAAAAAAAAANjQAAAAAAAA3NAAAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAANTQAAAAAAAA1NAAAAAAAAAAAAAAAAPC/XzQAAAAAAABfNAAAAAAAAAAAAAAAAPC/njQAAAAAAACeNAAAAAAAAAAAAAAAAPC/1TQAAAAAAADVNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4265,
					1,
					"left_delete",
					null,
					"AQAAANw0AAAAAAAA3DQAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA3jQAAAAAAADeNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4266,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANw0AAAAAAAA3TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3DQAAAAAAADcNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4269,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN00AAAAAAAA3jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3TQAAAAAAADdNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4272,
					1,
					"left_delete",
					null,
					"AQAAANw0AAAAAAAA3DQAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA3jQAAAAAAADeNAAAAAAAAAAAAAAAAPC/"
				],
				[
					4290,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAygoAAAAAAADKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					4301,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYAsAAAAAAABgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					4302,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADsPwAALy8KLy8gQ3JlYXRlZCBieSBIZWN0b3IgSGF3bGV5IEhlcnJlcmEgb24gMjAyMy0wMi0xOS4KLy8KCiNpZm5kZWYgU0JDQklOQVJZRk9STUFUX0gKI2RlZmluZSBTQkNCSU5BUllGT1JNQVRfSAojaW5jbHVkZSA8YWxnb3JpdGhtPgojaW5jbHVkZSA8Y3N0ZGludD4KI2luY2x1ZGUgPHR1cGxlPgojcHJhZ21hIG9uY2UKCi8vIEMgU1REIGluY2x1ZGVzCi8vIEMgM3JkIHBhcnR5IGluY2x1ZGVzCi8vIEMrKyBTVEQgaW5jbHVkZXMKI2luY2x1ZGUgPGJpdD4KI2luY2x1ZGUgPGludHR5cGVzLmg+CiNpbmNsdWRlIDxudW1lcmljPgojaW5jbHVkZSA8ZnN0cmVhbT4KI2luY2x1ZGUgPHR5cGVfdHJhaXRzPgojaW5jbHVkZSA8ZmlsZXN5c3RlbT4KI2luY2x1ZGUgPGFsZ29yaXRobT4KI2luY2x1ZGUgPGFycmF5PgoKLy8gQysrIDNyZCBwYXJ0eSBpbmNsdWRlcwojaW5jbHVkZSA8Y29uY3VycmVudHF1ZXVlLmg+CiNpbmNsdWRlIDxzcGRsb2cvc3BkbG9nLmg+CgovLyBteSBpbmNsdWRlcwojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9maWxlX2hlbHBlcnMuaHBwIgojaW5jbHVkZSAic2JjcXVlZW5zLWd1aS9jYWVuX2hlbHBlci5ocHAiCgpuYW1lc3BhY2UgU0JDUXVlZW5zIHsKbmFtZXNwYWNlIEJpbmFyeUZvcm1hdCB7Cm5hbWVzcGFjZSBUb29scyB7CgogICAgLy8gVGhlIEJpbmFyeUZvcm1hdCBvbmx5IGFjY2VwdHMgYXJpdGhtZXRoaWMgcG9pbnRlcnMuCiAgICAvLyBleDogY29uc3QgY2hhciogcmV0dXJucyB0cnVlCiAgICAvLyAgICAgIHN0ZDo6c3RyaW5nIHJldHVybiBmYWxzZQogICAgLy8gICAgICBkb3VibGUqIHJldHVybiB0cnVlOwogICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KICAgIGNvbmNlcHQgaXNfYXJpdGhtZXRoaWNfcHRyID0gc3RkOjppc19hcml0aG1ldGljX3Y8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGQ6OnJlbW92ZV9jdnJlZl90PAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpyZW1vdmVfcG9pbnRlcl90PFQ+Pj4gYW5kIG5vdCBzdGQ6OmlzX3BvaW50ZXJfdjxUPjsKCgogICAgdGVtcGxhdGU8dHlwZW5hbWUuLi4gVD4KICAgIGNvbmNlcHQgaXNfYXJpdGhtZXRpY19wdHJfdW5wYWNrID0gcmVxdWlyZXMoVCB4KSB7CiAgICAgICAgICAgICguLi4gYW5kIGlzX2FyaXRobWV0aGljX3B0cjxUPik7IH07CgogICAgdGVtcGxhdGU8dHlwZW5hbWUgVD4KICAgIHJlcXVpcmVzIGlzX2FyaXRobWV0aGljX3B0cjxUPgogICAgY29uc3RleHByIHN0YXRpYyBzdGQ6OnN0cmluZ192aWV3IHR5cGVfdG9fc3RyaW5nKCkgewogICAgICAgIC8vIFdlIGdldCB0aGUgbW9zdCBwdXJlIGVzc2VuY2Ugb2YgVDogbm8gY29uc3RzLCBubyByZWZlcmVuY2VzLAogICAgICAgIC8vIGFuZCBubyBbXQogICAgICAgIHVzaW5nIFRfbm9fY29uc3QgPSBzdGQ6OnJlbW92ZV9wb2ludGVyX3Q8c3RkOjpyZW1vdmVfYWxsX2V4dGVudHNfdDwKICAgICAgICAgICAgICAgIHN0ZDo6cmVtb3ZlX3JlZmVyZW5jZV90PHN0ZDo6cmVtb3ZlX2NvbnN0X3Q8VD4+Pj47CiAgICAgICAgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCBjaGFyPikgewogICAgICAgICAgICByZXR1cm4gImNoYXIiOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKHN0ZDo6aXNfc2FtZV92PFRfbm9fY29uc3QsIHVpbnQ4X3Q+KSB7CiAgICAgICAgICAgIHJldHVybiAidWludDgiOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKHN0ZDo6aXNfc2FtZV92PFRfbm9fY29uc3QsIHVpbnQxNl90PikgewogICAgICAgICAgICByZXR1cm4gInVpbnQxNiI7CiAgICAgICAgfSBlbHNlIGlmIGNvbnN0ZXhwciAoc3RkOjppc19zYW1lX3Y8VF9ub19jb25zdCwgdWludDMyX3Q+KSB7CiAgICAgICAgICAgIHJldHVybiAidWludDMyIjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCB1aW50NjRfdD4pIHsKICAgICAgICAgICAgcmV0dXJuICJ1aW50NjQiOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKHN0ZDo6aXNfc2FtZV92PFRfbm9fY29uc3QsIGludDhfdD4pIHsKICAgICAgICAgICAgcmV0dXJuICJpbnQ4IjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCBpbnQxNl90PikgewogICAgICAgICAgICByZXR1cm4gImludDE2IjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCBpbnQzMl90PikgewogICAgICAgICAgICByZXR1cm4gImludDMyIjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCBpbnQ2NF90PikgewogICAgICAgICAgICByZXR1cm4gImludDY0IjsKICAgICAgICB9IGVsc2UgaWYgY29uc3RleHByIChzdGQ6OmlzX3NhbWVfdjxUX25vX2NvbnN0LCBmbG9hdD4pIHsKICAgICAgICAgICAgcmV0dXJuICJzaW5nbGUiOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKHN0ZDo6aXNfc2FtZV92PFRfbm9fY29uc3QsIGRvdWJsZT4pIHsKICAgICAgICAgICAgcmV0dXJuICJkb3VibGUiOwogICAgICAgIH0gZWxzZSBpZiBjb25zdGV4cHIgKHN0ZDo6aXNfc2FtZV92PFRfbm9fY29uc3QsIGxvbmcgZG91YmxlPikgewogICAgICAgICAgICByZXR1cm4gImZsb2F0MTI4IjsKICAgICAgICB9CiAgICAgICAgLy8gVE9ETyhBbGwpOiBtYXliZSB0aGUgZGVmYXVsdCBzaG91bGQgYmUgdWludDMyPyBvciBubyBkZWZhdWx0PwogICAgfQoKfSAvLyBuYW1lc3BhY2UgVG9vbHMKCnRlbXBsYXRlPHR5cGVuYW1lLi4uIERhdGFUeXBlcz4KcmVxdWlyZXMgVG9vbHM6OmlzX2FyaXRobWV0aWNfcHRyX3VucGFjazxEYXRhVHlwZXMuLi4+CnN0cnVjdCBEeW5hbWljV3JpdGVyIHsKICAgIC8qIFRPRE8oQW55KTogdGhpcyB3cml0ZXIgaXMgdW5zYWZlLiBJdCB1c2VzIHJhdyBwb2ludGVycy4KICAgICAqIG1heWJlIGNoYW5nZSBpdCB0byB0YWtlIG5vcm1hbCB0eXBlcyBhbmQgdGhlbiBpbnRlcm5hbGx5CiAgICAgKiB1c2Ugc3BhbnM/ICovCiAgICB1c2luZyB0dXBsZV90eXBlID0gc3RkOjp0dXBsZTxzdGQ6OnNwYW48RGF0YVR5cGVzPi4uLj47CiAgICBjb25zdGV4cHIgc3RhdGljIHN0ZDo6c2l6ZV90IG5fY29scyA9IHNpemVvZi4uLihEYXRhVHlwZXMpOwogICAgY29uc3RleHByIHN0YXRpYyBzdGQ6OmFycmF5PHN0ZDo6c2l6ZV90LCBuX2NvbHM+IHNpemVfb2ZfdHlwZXMgPSB7IHNpemVvZihEYXRhVHlwZXMpLi4uIH07CiAgICBjb25zdGV4cHIgc3RhdGljIHN0ZDo6YXJyYXk8c3RkOjpzdHJpbmdfdmlldywgbl9jb2xzPiBwYXJhbWV0ZXJzX3R5cGVzX3N0ciA9IHsgVG9vbHM6OnR5cGVfdG9fc3RyaW5nPERhdGFUeXBlcz4oKS4uLiB9OwoKcHJpdmF0ZToKICAgIGNvbnN0IHN0ZDo6c3RyaW5nIF9maWxlX25hbWU7CiAgICBjb25zdCBzdGQ6OmFycmF5PHN0ZDo6c3RyaW5nLCBuX2NvbHM+IF9uYW1lczsKICAgIGNvbnN0IHN0ZDo6YXJyYXk8c3RkOjpzaXplX3QsIG5fY29scz4gX3JhbmtzOwogICAgY29uc3Qgc3RkOjp2ZWN0b3I8c3RkOjpzaXplX3Q+IF9zaXplczsKCiAgICBzdGQ6OnNpemVfdCB0b3RhbF9yYW5rcyA9IDA7CiAgICBib29sIF9vcGVuID0gZmFsc2U7CiAgICBzdGQ6Om9mc3RyZWFtIF9zdHJlYW07CgogICAgc3RkOjpzaXplX3QgX2xpbmVfYnl0ZV9zaXplID0gMDsKICAgIHN0ZDo6c2l6ZV90IF9saW5lX3BhcmFtX29yZGVyID0gMDsKICAgIHN0ZDo6c2l6ZV90IF9saW5lX2J1ZmZlcl9sb2MgPSAwOwogICAgc3RkOjpzdHJpbmcgX2xpbmVfYnVmZmVyOwoKICAgIHRlbXBsYXRlPHR5cGVuYW1lIFQ+CiAgICB2b2lkIF9jb3B5X251bWJlcl90b19idWZmKGNvbnN0IFQmIG51bSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzdHJpbmcmIGJ1ZmZlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzaXplX3QmIGxvYywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RkOjpzaXplX3QmIHNpemUgPSBzaXplb2YoVCkpIHsKICAgICAgICBjb25zdCBjaGFyKiB0bXBzdHIgPSByZWludGVycHJldF9jYXN0PGNvbnN0IGNoYXIqPigmbnVtKTsKICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaSA9IDA7IGkgPCBzaXplOyBpKyspIHsKICAgICAgICAgICAgYnVmZmVyW2kgKyBsb2NdID0gdG1wc3RyW2ldOwogICAgICAgIH0KCiAgICAgICAgbG9jICs9IHNpemU7CiAgICB9CgogICAgdm9pZCBfY29weV9zdHJfdG9fYnVmZihzdGQ6OnN0cmluZ192aWV3IHNvdXJjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzdHJpbmcmIGJ1ZmZlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkOjpzaXplX3QmIGxvYykgewogICAgICAgIHNvdXJjZS5jb3B5KCZidWZmZXJbbG9jXSwgc291cmNlLmxlbmd0aCgpLCAwKTsKICAgICAgICBsb2MgKz0gc291cmNlLmxlbmd0aCgpOwogICAgfQoKICAgIHZvaWQgX2NyZWF0ZV9maWxlKCkgewoKICAgICAgICAvKiAgU0JDIEJpbmFyeSBIZWFkZXIgZGVzY3JpcHRpb246CiAgICAgICAgICogSGVhZGVyIG9mIGEgYmluYXJ5IGZvcm1hdCBpcyBkaXZpZGVkIGluIDQgcGFydHM6CiAgICAgICAgICogMS4tIEVkaWFuZXNzICAgICAgICAgICAgLSBhbHdheXMgNCBiaXRzIGxvbmcgKHVpbnQzMl90KQogICAgICAgICAqIDIuLSBEYXRhIEhlYWRlciBzaXplICAgIC0gYWx3YXlzIDIgYml0cyBsb25nICh1aW50MTZfdCkKICAgICAgICAgKiBhbmQgaXMgdGhlIGxlbmd0aCBvZiB0aGUgbmV4dCBiaXQgb2YgZGF0YQogICAgICAgICAqIDMuLSBIZWFkZXIgICAgICAgICAgICAgIC0gaXMgZGF0YSBoZWFkZXIgbG9uZy4KICAgICAgICAgKiBDb250YWlucyB0aGUgc3RydWN0dXJlIG9mIGVhY2ggbGluZS4gSXQgaXMgYWx3YXlzIGZvdW5kIGFzIGEgcmF3CiAgICAgICAgICogc3RyaW5nIGluIHRoZSBmb3JtICJ7bmFtZV9jb2x9O3t0eXBlX2NvbH07e3NpemUxfSx7c2l6ZTJ9Li4uOy4uLjsKICAgICAgICAgKiBDYW5ub3QgYmUgbG9uZ2VyIHRoYW4gNjU1MzYgYnl0ZXMuCiAgICAgICAgICogNC4tIE51bWJlciBvZiBsaW5lcyAgICAgLSBhbHdheXMgNCBiaXRzIGxvbmcgKGludDMyX3QpCiAgICAgICAgICogTnVtYmVyIG9mIGxpbmVzIGluIHRoZSBmaWxlLiBJZiAwLCBpdCBpcyBpbmRlZmluaXRlbHkgbG9uZy4KICAgICAgICAqLwogICAgICAgIC8vIEVkaWFuZXNzIGZpcnN0CiAgICAgICAgdWludDMyX3QgZW5kaWFuZXNzID0gMHgwMTAyMDMwNDsKICAgICAgICBpZiBjb25zdGV4cHIgKHN0ZDo6ZW5kaWFuOjpuYXRpdmUgPT0gc3RkOjplbmRpYW46OmJpZykgewogICAgICAgICAgICBlbmRpYW5lc3MgPSAweDA0MDMwMjAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVuZGlhbmVzcyA9IDB4MDEwMjAzMDQ7CiAgICAgICAgfQoKICAgICAgICBzdGQ6OnNpemVfdCB0b3RhbF9oZWFkZXJfc2l6ZSA9IDA7CiAgICAgICAgLy8gaGFzIHRvIGJlIHVpbnQxNl90IGJlY2F1c2Ugd2UgYXJlIHNhdmluZyBpdCB0byB0aGUgZmlsZSBsYXRlcgogICAgICAgIHVpbnQxNl90IGJpbmFyeV9oZWFkZXJfc2l6ZSA9IDA7CiAgICAgICAgc3RkOjpzaXplX3QgdG90YWxfcmFua3Nfc29fZmFyID0gMDsKICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbl9jb2xzOyBpKyspIHsKICAgICAgICAgICAgYXV0byBjb2x1bW5fcmFuayA9IF9yYW5rc1tpXTsKICAgICAgICAgICAgLy8gKyAxIGZvciB0aGUgOyBjaGFyYWN0ZXIKICAgICAgICAgICAgYmluYXJ5X2hlYWRlcl9zaXplICs9IF9uYW1lc1tpXS5sZW5ndGgoKSArIDE7CiAgICAgICAgICAgIC8vICsgMSBmb3IgdGhlIDsgY2hhcmFjdGVyCiAgICAgICAgICAgIGJpbmFyeV9oZWFkZXJfc2l6ZSArPSBwYXJhbWV0ZXJzX3R5cGVzX3N0cltpXS5sZW5ndGgoKSArIDE7CgogICAgICAgICAgICBzdGQ6OnNpemVfdCB0b3RhbF9yYW5rX3NpemUgPSAwOwogICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgaiA9IDA7IGogPCBjb2x1bW5fcmFuazsgaiArKykgewogICAgICAgICAgICAgICAgYXV0byBzaXplID0gX3NpemVzW3RvdGFsX3JhbmtzX3NvX2ZhciArIGpdOwogICAgICAgICAgICAgICAgdG90YWxfcmFua19zaXplICs9IHNpemU7CiAgICAgICAgICAgICAgICAvLyBJdCBpcyBhbHdheXMgKyAxIGJlY2F1c2UgdGhlcmUgaXMgZWl0aGVyIGEgJywnIG9yIGEgJzsnCiAgICAgICAgICAgICAgICBiaW5hcnlfaGVhZGVyX3NpemUgKz0gc3RkOjp0b19zdHJpbmcoc2l6ZSkubGVuZ3RoKCkgKyAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0b3RhbF9yYW5rc19zb19mYXIgKz0gY29sdW1uX3Jhbms7CiAgICAgICAgICAgIF9saW5lX2J5dGVfc2l6ZSArPSBzaXplX29mX3R5cGVzW2ldKnRvdGFsX3Jhbmtfc2l6ZTsKICAgICAgICB9CiAgICAgICAgLy8gV2UgYWxzbyBjYWxjdWxhdGUgdGhlIGxpbmUgc2l6ZSB2ZXJ5IHVzZWZ1bCB3aGVuIHdlIHN0YXJ0IGRhdGEgc2F2aW5nCgogICAgICAgIHRvdGFsX2hlYWRlcl9zaXplICs9IHNpemVvZih1aW50MzJfdCk7IC8vIDEuCiAgICAgICAgdG90YWxfaGVhZGVyX3NpemUgKz0gc2l6ZW9mKHVpbnQxNl90KTsgLy8gMi4KICAgICAgICB0b3RhbF9oZWFkZXJfc2l6ZSArPSBiaW5hcnlfaGVhZGVyX3NpemU7IC8vIDMuCiAgICAgICAgdG90YWxfaGVhZGVyX3NpemUgKz0gc2l6ZW9mKGludDMyX3QpOyAvLyA0LgoKICAgICAgICAvLyBOb3cgd2UgYWxsb2NhdGUgdGhlIG1lbW9yeSEKICAgICAgICBzdGQ6OnNpemVfdCBidWZmZXJfbG9jID0gMDsKICAgICAgICBhdXRvIGJ1ZmZlciA9IHN0ZDo6c3RyaW5nKHRvdGFsX2hlYWRlcl9zaXplLCAnQScpOwogICAgICAgIF9saW5lX2J1ZmZlciA9IHN0ZDo6c3RyaW5nKF9saW5lX2J5dGVfc2l6ZSwgJ0EnKTsKCiAgICAgICAgLy8gTm93IHdlIGZpbGwgYnVmZmVyLgogICAgICAgIHRvdGFsX3JhbmtzX3NvX2ZhciA9IDA7CiAgICAgICAgX2NvcHlfbnVtYmVyX3RvX2J1ZmYoZW5kaWFuZXNzLCBidWZmZXIsIGJ1ZmZlcl9sb2MpOyAvLyAxLgogICAgICAgIF9jb3B5X251bWJlcl90b19idWZmKGJpbmFyeV9oZWFkZXJfc2l6ZSwgYnVmZmVyLCBidWZmZXJfbG9jKTsgLy8gMi4KICAgICAgICBmb3IgKHN0ZDo6c2l6ZV90IGkgPSAwOyBpIDwgbl9jb2xzOyBpKyspIHsgLy8gMy4KICAgICAgICAgICAgYXV0byBjb2x1bW5fbmFtZSA9IF9uYW1lc1tpXTsKICAgICAgICAgICAgYXV0byBjb2x1bW5fdHlwZSA9IHBhcmFtZXRlcnNfdHlwZXNfc3RyW2ldOwogICAgICAgICAgICBhdXRvIGNvbHVtbl9yYW5rID0gX3JhbmtzW2ldOwoKICAgICAgICAgICAgX2NvcHlfc3RyX3RvX2J1ZmYoY29sdW1uX25hbWUsIGJ1ZmZlciwgYnVmZmVyX2xvYyk7CiAgICAgICAgICAgIF9jb3B5X3N0cl90b19idWZmKCI7IiwgYnVmZmVyLCBidWZmZXJfbG9jKTsKICAgICAgICAgICAgX2NvcHlfc3RyX3RvX2J1ZmYoY29sdW1uX3R5cGUsIGJ1ZmZlciwgYnVmZmVyX2xvYyk7CiAgICAgICAgICAgIF9jb3B5X3N0cl90b19idWZmKCI7IiwgYnVmZmVyLCBidWZmZXJfbG9jKTsKICAgICAgICAgICAgZm9yKHN0ZDo6c2l6ZV90IHNpemVfaiA9IDA7IHNpemVfaiA8IGNvbHVtbl9yYW5rOyBzaXplX2orKykgewogICAgICAgICAgICAgICAgX2NvcHlfc3RyX3RvX2J1ZmYoc3RkOjp0b19zdHJpbmcoX3NpemVzW3RvdGFsX3JhbmtzX3NvX2ZhciArIHNpemVfal0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLCBidWZmZXJfbG9jKTsKCiAgICAgICAgICAgICAgICBpZihzaXplX2ogIT0gY29sdW1uX3JhbmsgLSAxKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvcHlfc3RyX3RvX2J1ZmYoIiwiLCBidWZmZXIsIGJ1ZmZlcl9sb2MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29weV9zdHJfdG9fYnVmZigiOyIsIGJ1ZmZlciwgYnVmZmVyX2xvYyk7CiAgICAgICAgICAgIHRvdGFsX3JhbmtzX3NvX2ZhciArPSBjb2x1bW5fcmFuazsKICAgICAgICB9CgogICAgICAgIGludDMyX3QgaiA9IDB4MDAwMDAwMDA7CiAgICAgICAgX2NvcHlfbnVtYmVyX3RvX2J1ZmYoaiwgYnVmZmVyLCBidWZmZXJfbG9jKTsgLy8gNC4KCiAgICAgICAgLy8gc2F2ZSB0byBmaWxlLgogICAgICAgIF9zdHJlYW0gPDwgYnVmZmVyOwogICAgfQoKICAgIC8vIFNhdmUgaXRlbSBmcm9tIHR1cGxlIGluIHBvc2l0aW9uIGkKICAgIHRlbXBsYXRlPHN0ZDo6c2l6ZV90IGk+CiAgICB2b2lkIF9zYXZlX2l0ZW0oY29uc3QgdHVwbGVfdHlwZSYgaXRlbXMsIHN0ZDo6c2l6ZV90JiBsb2MpIHsKICAgICAgICBhdXRvIGl0ZW0gPSBzdGQ6OmdldDxpPihpdGVtcyk7CiAgICAgICAgdXNpbmcgVCA9IGRlY2x0eXBlKGl0ZW0pOwoKICAgICAgICBhdXRvIHJhbmsgPSBfcmFua3NbaV07CiAgICAgICAgYXV0byB0b3RhbF9yYW5rX3VwX3RvX2kgPSBzdGQ6OmFjY3VtdWxhdGUoX3JhbmtzLmJlZ2luKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJl9yYW5rc1tpXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwKTsKCiAgICAgICAgY29uc3QgYXV0byYgc2l6ZV9pbmRleF9zdGFydCA9IHRvdGFsX3JhbmtfdXBfdG9faTsKICAgICAgICBjb25zdCBhdXRvJiBleHBlY3RlZF9zaXplID0gc3RkOjphY2N1bXVsYXRlKCZfc2l6ZXNbc2l6ZV9pbmRleF9zdGFydF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmX3NpemVzW3NpemVfaW5kZXhfc3RhcnQgKyByYW5rXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZDo6bXVsdGlwbGllczxzdGQ6OnNpemVfdD4oKSk7CgogICAgICAgIGlmIChleHBlY3RlZF9zaXplICE9IGl0ZW0uc2l6ZSgpKSB7CiAgICAgICAgICAgIHRocm93IHN0ZDo6b3V0X29mX3JhbmdlKCJtZW1vcnkgaXMgb3V0IG9mIHJhbmdlIik7CiAgICAgICAgfQoKICAgICAgICBzdGQ6Om1lbWNweSgmX2xpbmVfYnVmZmVyW2xvY10sIGl0ZW0uZGF0YSgpLCBpdGVtLnNpemVfYnl0ZXMoKSk7CiAgICAgICAgbG9jICs9IGl0ZW0uc2l6ZV9ieXRlcygpOwogICAgfQoKICAgIC8vIFRoaW5rIG9mIHQgaGlzIGZ1bmN0aW9uIGFzIGEgd3JhcHBlciBiZXR3ZWVuIF9zYXZlX2l0ZW0KICAgIC8vIGFuZCBfc2F2ZV9kYXRhCiAgICB0ZW1wbGF0ZTxzdGQ6OnNpemVfdC4uLiBJPgogICAgdm9pZCBfc2F2ZV9pdGVtX2hlbHBlcihjb25zdCB0dXBsZV90eXBlJiBkYXRhLCBzdGQ6OmluZGV4X3NlcXVlbmNlPEkuLi4+KSB7CiAgICAgICAgKF9zYXZlX2l0ZW08ST4oZGF0YSwgX2xpbmVfYnVmZmVyX2xvYyksLi4uKTsKICAgIH0KCiAgICB2b2lkIF9zYXZlX2V2ZW50KGNvbnN0IHR1cGxlX3R5cGUmIGRhdGEpIHsKICAgICAgICBfbGluZV9idWZmZXJfbG9jID0gMDsKICAgICAgICBfc2F2ZV9pdGVtX2hlbHBlcihkYXRhLCBzdGQ6Om1ha2VfaW5kZXhfc2VxdWVuY2U8bl9jb2xzPnt9KTsKICAgICAgICBfc3RyZWFtIDw8IF9saW5lX2J1ZmZlcjsKICAgIH0KCiBwdWJsaWM6CiAgICBEeW5hbWljV3JpdGVyKHN0ZDo6c3RyaW5nX3ZpZXcgZmlsZV9uYW1lLAogICAgICAgICAgICAgICAgICBjb25zdCBzdGQ6OmFycmF5PHN0ZDo6c3RyaW5nLCBuX2NvbHM+JiBjb2x1bW5zX25hbWVzLAogICAgICAgICAgICAgICAgICBjb25zdCBzdGQ6OmFycmF5PHN0ZDo6c2l6ZV90LCBuX2NvbHM+JiBjb2x1bW5zX3JhbmtzLAogICAgICAgICAgICAgICAgICBjb25zdCBzdGQ6OnZlY3RvcjxzdGQ6OnNpemVfdD4mIGNvbHVtbnNfc2l6ZXMpIDoKICAgICAgICBfZmlsZV9uYW1le2ZpbGVfbmFtZX0sCiAgICAgICAgX25hbWVze2NvbHVtbnNfbmFtZXN9LAogICAgICAgIF9yYW5rc3tjb2x1bW5zX3JhbmtzfSwKICAgICAgICBfc2l6ZXN7Y29sdW1uc19zaXplc30KICAgIHsKICAgICAgICB0b3RhbF9yYW5rcyA9IHN0ZDo6YWNjdW11bGF0ZShjb2x1bW5zX3JhbmtzLmJlZ2luKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uc19yYW5rcy5lbmQoKSwgMCk7CgogICAgICAgIF9zdHJlYW0ub3BlbihfZmlsZV9uYW1lLAogICAgICAgICAgICAgICAgICAgICBzdGQ6Om9mc3RyZWFtOjphcHAgfCBzdGQ6Om9mc3RyZWFtOjpiaW5hcnkpOwoKICAgICAgICBpZiAoX3N0cmVhbS5pc19vcGVuKCkpIHsKICAgICAgICAgICAgX29wZW4gPSB0cnVlOwogICAgICAgICAgICBpZiAoc3RkOjpmaWxlc3lzdGVtOjppc19lbXB0eShmaWxlX25hbWUpKSB7CiAgICAgICAgICAgICAgICBfY3JlYXRlX2ZpbGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICB+RHluYW1pY1dyaXRlcigpIHsKICAgICAgICBfb3BlbiA9IGZhbHNlOwogICAgICAgIF9zdHJlYW0uY2xvc2UoKTsKICAgIH0KCiAgICBib29sIHNhdmUoc3RkOjpzcGFuPERhdGFUeXBlcz4uLi4gZGF0YSkgbm9leGNlcHQgewogICAgICAgIF9zYXZlX2V2ZW50KHN0ZDo6bWFrZV90dXBsZShkYXRhLi4uKSk7CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9OwoKLy8gVE9ETyhIZWN0b3IpOiB3ZSBuZWVkIHRoaXMhCnRlbXBsYXRlPHR5cGVuYW1lLi4uIERhdGFUeXBlcz4Kc3RydWN0IFJlYWRlciB7CgoKCiBwcml2YXRlOgp9OwoKY2xhc3MgU2lQTUR5bmFtaWNXcml0ZXIgewogICAgdXNpbmcgU2lQTURXID0gRHluYW1pY1dyaXRlcjwgICBkb3VibGUsICAgIC8vIHNhbXBsZSByYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4X3QsICAgLy8gRW5hYmxlZCBDaGFubmVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50NjRfdCwgIC8vIFRyaWdnZXIgTWFzawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MTZfdCwgIC8vIFRocmVzaG9sZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDE2X3QsICAvLyBEQyBPZmZzZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQ4X3QsICAgLy8gREMgQ29ycmVjdGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQsICAgICAvLyBEQyBSYW5nZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MzJfdCwgIC8vIFRpbWUgc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWludDMyX3QsICAvLyBUcmlnZ2VyIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aW50MTZfdD47IC8vIFdhdmVmb3JtcwoKICAgIGNvbnN0ZXhwciBzdGF0aWMgc3RkOjpzaXplX3QgbnVtX2NvbHMgPSAxMDsKICAgIGNvbnN0ZXhwciBzdGF0aWMgc3RkOjphcnJheTxzdGQ6OnNpemVfdCwgbnVtX2NvbHM+IHNpcG1fcmFua3MgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7MSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMn07CiAgICBjb25zdCBpbmxpbmUgc3RhdGljIHN0ZDo6YXJyYXk8c3RkOjpzdHJpbmcsIG51bV9jb2xzPiBzaXBtX25hbWVzID0KICAgICAgICAgICAgeyJzYW1wbGVfcmF0ZSIsICJlbl9jaHMiLCAidHJnX21hc2siLCAidGhyZXNob2xkcyIsICJkY19vZmZzZXRzIiwKICAgICAgICAgICAgICJkY19jb3JyZWN0aW9ucyIsICJkY19yYW5nZSIsICJ0aW1lX3N0YW1wIiwgInRyZ19zb3VyY2UiLCAiZGF0YSJ9OwoKCiAgICBkb3VibGUgX3NhbXBsZV9yYXRlWzFdID0gezAuMH07CiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnVpbnQ4X3Q+IF9lbl9jaHM7CiAgICB1aW50NjRfdCBfdHJpZ2dlcl9tYXNrWzFdID0gezB9OwogICAgc3RkOjp2ZWN0b3I8dWludDE2X3Q+IF90aHJlc2hvbGRzOwogICAgc3RkOjp2ZWN0b3I8dWludDE2X3Q+IF9kY19vZmZzZXRzOwogICAgc3RkOjp2ZWN0b3I8dWludDhfdD4gX2RjX2NvcnJlY3Rpb25zOwogICAgc3RkOjp2ZWN0b3I8ZmxvYXQ+IF9kY19yYW5nZXM7CgogICAgdWludDMyX3QgX3RyaWdnZXJfdGFnWzFdID0gezB9OwogICAgdWludDMyX3QgX3RyaWdnZXJfc291cmNlWzFdID0gezB9OwoKICAgIHVpbnQzMl90IF9yZWNvcmRfbGVuZ3RoOwogICAgU2lQTURXIF9zdHJlYW1lcjsKIHB1YmxpYzoKICAgIC8qIERldGFpbHMgb2YgZWFjaCBwYXJhbWV0ZXJzOgogICAgTmFtZSAgICAgICAgICB8IHR5cGUgICAgICB8IGxlbmd0aCAoaW4gQnl0ZXMpIHwgaXMgYSBjb25zdGFudD98CiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIHNhbXBsZV9yYXRlICAgfCBkb3VibGUgICAgfCA4ICAgICAgICAgICAgICAgICB8IFkKICAgIGVuX2NocyAgICAgICAgfCB1aW50OCAgICAgfCAxKmNoX3NpemUgICAgICAgICB8IFkKICAgIHRyZ19tYXNrICAgICAgfCB1aW50NjQgICAgfCA4ICAgICAgICAgICAgICAgICB8IFkKICAgIHRocmVzaG9sZHMgICAgfCB1aW50MTYgICAgfCAyKmNoX3NpemUgICAgICAgICB8IFkKICAgIGRjX29mZnNldHMgICAgfCB1aW50MTYgICAgfCAyKmNoX3NpemUgICAgICAgICB8IFkKICAgIGRjX2NvcnJlY3Rpb25zfCB1aW50OCAgICAgfCAxKmNoX3NpemUgICAgICAgICB8IFkKICAgIGRjX3JhbmdlICAgICAgfCBzaW5nbGUgICAgfCA0KmNoX3NpemUgICAgICAgICB8IFkKICAgIHRpbWVfc3RhbXAgICAgfCB1aW50MzIgICAgfCA0ICAgICAgICAgICAgICAgICB8IE4KICAgIHRyZ19zb3VyY2UgICAgfCB1aW50MzIgICAgfCA0ICAgICAgICAgICAgICAgICB8IE4KICAgIGRhdGEgICAgICAgICAgfCB1aW50MTYgICAgfCAyKnJsKmNoX3NpemUgICAgICB8IE4KICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgcmwgLT4gcmVjb3JkIGxlbmd0aCBvZiB0aGUgd2F2ZWZvcm1zCiAgICBjaF9zaXplIC0+IG51bWJlciBvZiBlbmFibGVkIGNoYW5uZWxzCiAgICBlbl9jaHMgIC0+IHRoZSBjaGFubmVscyAjIHRoYXQgd2VyZSBlbmFibGVkCgogICAgVG90YWwgbGVuZ3RoID0gMjQgKyBjaF9zaXplKigxMCArIDIqcmVjb3JkX2xlbmd0aCkKICAgICovCgogICAgU2lQTUR5bmFtaWNXcml0ZXIoc3RkOjpzdHJpbmdfdmlldyBmaWxlX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBDQUVORGlnaXRpemVyTW9kZWxDb25zdGFudHMmIG1vZGVsX2NvbnN0cywKICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IENBRU5HbG9iYWxDb25maWcmIGdsb2JhbF9jb25maWcsCiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGQ6OmFycmF5PENBRU5Hcm91cENvbmZpZywgOD4mIGdyb3VwX2NvbmZpZ3MpIDoKICAgICAgICBfc2FtcGxlX3JhdGV7bW9kZWxfY29uc3RzLkFjcXVpc2l0aW9uUmF0ZX0sCiAgICAgICAgX2VuX2Noc3tfZ2V0X2VuX2Nocyhtb2RlbF9jb25zdHMsIGdyb3VwX2NvbmZpZ3MpfSwKICAgICAgICBfcmVjb3JkX2xlbmd0aHtnbG9iYWxfY29uZmlnLlJlY29yZExlbmd0aH0sCiAgICAgICAgX3N0cmVhbWVye2ZpbGVfbmFtZSwgc2lwbV9uYW1lcywgIHNpcG1fcmFua3MsIF9mb3JtX3NpemVzKGdsb2JhbF9jb25maWcpfQogICAgewogICAgICAgIGZvcihhdXRvIGNoIDogX2VuX2NocykgewogICAgICAgICAgICBDQUVOR3JvdXBDb25maWcgZ3JvdXA7CiAgICAgICAgICAgIGlmIChtb2RlbF9jb25zdHMuTnVtYmVyT2ZHcm91cHMgPT0gMCkgewogICAgICAgICAgICAgICAgZ3JvdXAgPSBncm91cF9jb25maWdzW2NoXTsKICAgICAgICAgICAgICAgIF9kY19jb3JyZWN0aW9ucy5wdXNoX2JhY2soZ3JvdXAuRENDb3JyZWN0aW9uc1swXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBncm91cCA9ICBncm91cF9jb25maWdzW2NoICUgOF07CiAgICAgICAgICAgICAgICBfZGNfY29ycmVjdGlvbnMucHVzaF9iYWNrKGdyb3VwLkRDQ29ycmVjdGlvbnNbY2ggJSA4XSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90cmlnZ2VyX21hc2tbMF0gfD0gKDEgPDwgY2gpOyAgLy8gZmxpcCB0aGUgYml0IGF0IHBvc2l0aW9uIGNoCiAgICAgICAgICAgIF90aHJlc2hvbGRzLnB1c2hfYmFjayhncm91cC5UcmlnZ2VyVGhyZXNob2xkKTsKICAgICAgICAgICAgX2RjX29mZnNldHMucHVzaF9iYWNrKGdyb3VwLkRDT2Zmc2V0KTsKICAgICAgICAgICAgX2RjX3Jhbmdlcy5wdXNoX2JhY2sobW9kZWxfY29uc3RzLlZvbHRhZ2VSYW5nZXMuYXQoZ3JvdXAuRENSYW5nZSkpOwogICAgICAgIH0KICAgIH0KCiAgICB+U2lQTUR5bmFtaWNXcml0ZXIoKSA9IGRlZmF1bHQ7CgogICAgdm9pZCBzYXZlX3dhdmVmb3JtKHN0ZDo6c2hhcmVkX3B0cjxDQUVOV2F2ZWZvcm1zPHVpbnQxNl90Pj4gd2F2ZWZvcm0pIHsKICAgICAgICBfdHJpZ2dlcl90YWdbMF0gPSB3YXZlZm9ybS0+Z2V0SW5mbygpLlRyaWdnZXJUaW1lVGFnOwogICAgICAgIF90cmlnZ2VyX3NvdXJjZVswXSA9IHdhdmVmb3JtLT5nZXRJbmZvKCkuUGF0dGVybjsKICAgICAgICBfc3RyZWFtZXIuc2F2ZShfc2FtcGxlX3JhdGUsCiAgICAgICAgICAgICAgICAgICAgICBfZW5fY2hzLAogICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJfbWFzaywKICAgICAgICAgICAgICAgICAgICAgIF90aHJlc2hvbGRzLAogICAgICAgICAgICAgICAgICAgICAgX2RjX29mZnNldHMsCiAgICAgICAgICAgICAgICAgICAgICBfZGNfY29ycmVjdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICBfZGNfcmFuZ2VzLAogICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJfdGFnLAogICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJfc291cmNlLAogICAgICAgICAgICAgICAgICAgICAgd2F2ZWZvcm0tPmdldERhdGEoKSk7CiAgICB9CgogcHJpdmF0ZToKCiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnNpemVfdD4gX2Zvcm1fc2l6ZXMoCiAgICAgICAgY29uc3QgQ0FFTkdsb2JhbENvbmZpZyYgY2Flbl9nbG9iYWxfY29uZmlnKSB7CgogICAgICAgIGF1dG8gbnVtX2VuX2NocyA9IF9lbl9jaHMuc2l6ZSgpOwogICAgICAgIHJldHVybiB7MSwgbnVtX2VuX2NocywgMSwgbnVtX2VuX2NocywgbnVtX2VuX2NocywgbnVtX2VuX2NocywgbnVtX2VuX2NocywKICAgICAgICAgICAgICAgIDEsIDEsIG51bV9lbl9jaHMsIGNhZW5fZ2xvYmFsX2NvbmZpZy5SZWNvcmRMZW5ndGh9OwogICAgfQoKICAgIHN0ZDo6dmVjdG9yPHN0ZDo6dWludDhfdD4gX2dldF9lbl9jaHMoCiAgICAgICAgICAgIGNvbnN0IENBRU5EaWdpdGl6ZXJNb2RlbENvbnN0YW50cyYgbW9kZWxfY29uc3RhbnRzLAogICAgICAgICAgICBjb25zdCBzdGQ6OmFycmF5PENBRU5Hcm91cENvbmZpZywgOD4mIGdyb3VwcykgewogICAgICAgIHN0ZDo6dmVjdG9yPHN0ZDo6dWludDhfdD4gb3V0OwogICAgICAgIGZvcihzdGQ6OnNpemVfdCBncm91cF9udW0gPSAwOyBncm91cF9udW0gPCBncm91cHMuc2l6ZSgpOyBncm91cF9udW0rKykgewogICAgICAgICAgICBjb25zdCBhdXRvJiBncm91cCA9IGdyb3Vwc1tncm91cF9udW1dOwogICAgICAgICAgICBpZiAobm90IGdyb3VwLkVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJZiB0aGUgZGlnaXRpemVyIGRvZXMgbm90IHN1cHBvcnQgZ3JvdXBzLCBncm91cF9udW0gPSBjaAogICAgICAgICAgICBpZihtb2RlbF9jb25zdGFudHMuTnVtYmVyT2ZHcm91cHMgPT0gMCkgewogICAgICAgICAgICAgICAgb3V0LnB1c2hfYmFjayhncm91cF9udW0pOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE90aGV3aXNlLCBjYWxjdWxhdGUgdXNpbmcgdGhlIEFjcXVpc2l0aW9uTWFzawogICAgICAgICAgICBmb3Ioc3RkOjpzaXplX3QgY2ggPSAwOyBjaCA8IG1vZGVsX2NvbnN0YW50cy5OdW1DaGFubmVsc1Blckdyb3VwOyBjaCsrKSB7CiAgICAgICAgICAgICAgICBpZihncm91cC5BY3F1aXNpdGlvbk1hc2suYXQoY2gpKSB7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2hfYmFjayhjaCArIG1vZGVsX2NvbnN0YW50cy5OdW1DaGFubmVsc1Blckdyb3VwICogZ3JvdXBfbnVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfQoKCn07Cgp9IC8vIG5hbWVzcGFjZSBCaW5hcnlGb3JtYXQKfSAvLyBuYW1lc3BhY2UgU0JDUXVlZW5zCgojZW5kaWYgLy9TQkNCSU5BUllGT1JNQVRfSAoAAAAAAAAAAJ5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAsAAAAAAABgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					4304,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYAsAAAAAAABgCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/file_helpers.hpp",
			"settings":
			{
				"buffer_size": 7258,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"paste",
					null,
					"AgAAAL4IAAAAAAAAdgkAAAAAAAAAAAAAdgkAAAAAAAB2CQAAAAAAALgAAAAgICAgICAgIGF1dG8gYXBwcm94X2xlbmd0aCA9IF9xdWV1ZS5zaXplX2FwcHJveCgpOwogICAgICAgIGF1dG8gZGF0YSA9IHN0ZDo6dmVjdG9yPFQ+KGFwcHJveF9sZW5ndGgpOwogICAgICAgIF9xdWV1ZS50cnlfZGVxdWV1ZV9idWxrKGRhdGEuZGF0YSgpLCBhcHByb3hfbGVuZ3RoKTsKCiAgICAgICAgcmV0dXJuIGRhdGE7",
					"AQAAAAAAAAABAAAAdgkAAAAAAAC+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdgkAAAAAAAC+CAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
			"settings":
			{
				"buffer_size": 21169,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"unindent",
					null,
					"AQAAAKIKAAAAAAAAogoAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAqgoAAAAAAACqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD4TAAAAAAAAPxMAAAAAAAAAAAAAPxMAAAAAAABHEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhMAAAAAAAA+EwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAEcTAAAAAAAAYxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGwSAAAAAAAAbRIAAAAAAAAAAAAAbRIAAAAAAAB1EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBIAAAAAAABsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAHUSAAAAAAAAjhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRIAAAAAAAB1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKMRAAAAAAAApBEAAAAAAAAAAAAApBEAAAAAAACoEQAAAAAAAAAAAACoEQAAAAAAAKwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxEAAAAAAACjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAAKwRAAAAAAAAxxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBEAAAAAAACsEQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5g8AAAAAAADmDwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA5g8AAAAAAADmDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "include/sbcqueens-gui/caen_helper.hpp",
			"settings":
			{
				"buffer_size": 55109,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					743,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYjUAAAAAAABiNQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/caen_helper.cpp",
			"settings":
			{
				"buffer_size": 42507,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				],
				[
					"Packages/User/Latex-build.sublime-build",
					""
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					""
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Traditional"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - PdfLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - XeLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Basic Builder - LuaLaTeX"
				],
				[
					"Packages/LaTeXTools/LaTeX.sublime-build",
					"Script Builder"
				],
				[
					"Packages/User/Latex-build.sublime-build",
					""
				]
			],
			[
				"Packages/LaTeXTools/LaTeX.sublime-build",
				"PdfLaTeX"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"LSP",
				"LSP: Enable Language Server in Project"
			],
			[
				"Package Control: IN",
				"Package Control: Install Package"
			],
			[
				"LSP: Ena",
				"LSP: Enable Language Server Globally"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"LSP: Enable",
				"LSP: Enable Language Server Globally"
			],
			[
				"package Contro l",
				"Package Control: Install Package"
			],
			[
				"upda",
				"Package Control: Upgrade Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"Install Package",
				"Package Control: Install Package"
			],
			[
				"Install",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 175.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/multithreading_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/hardware_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/test",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/test/source"
	],
	"file_history":
	[
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/ClientController.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/standalone/out.bin",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/caen_helper.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/ControlWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/CAENGeneralConfigTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/RunTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SlowDAQManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/armadillo_helpers.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/SBCBinaryFormat.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/test/caen_file_test.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/gui_setup.toml",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/caen_helper.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/ControlList.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/CAENPerGroupConfigTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/AcquisitionRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/SiPMControlWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/file_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/AcquisitionRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/BreakDownRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/BreakDownRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/armadillo_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/implot_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/IndicatorWindow.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/IndicatorList.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/ControlWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/imgui_helpers.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/CAENGeneralConfigTab.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/CAENPerGroupConfigTab.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/IndicatorWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/RunTab.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/imgui-src/imgui_demo.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/TeensyTab.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/multithreading_helpers/Pipe.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/implot-src/implot.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone/main.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake/Dependencies.cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/CAENDigitizerInterface.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/spdlog-src/include/spdlog/fmt/bundled/core.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/implot-src/implot.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/imgui-src/imgui.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers/glfw_vulkan_wrapper.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/rendering_wrappers/glfw_opengl3_wrapper.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/gui_windows/SiPMControlWindow.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SlowDAQData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/build/_deps/concurrentqueue-src/concurrentqueue.h",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/ThreadKeys.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/multithreading_helpers/ThreadManager.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/CMakeLists.txt",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/indicators.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/TeensyControllerInterface.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/hardware_helpers/TeensyControllerInterface.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/sipm_control_gui.sublime-project",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/README.md",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/CAENInterfaceData.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/cmake/CompilerWarnings.cmake",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/standalone/CMakeLists.txt",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/gui_windows/CAENTabs.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/AcquisitonRoutine.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/sipm_helpers/AcquistionRoutine.cpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/serial_helper.hpp",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/C",
		"/home/sbc-queens-linux/Desktop/tmp/Python-3.11.1/setup.py",
		"/home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/Setting Up SublimeText for C++ in WINDOWS.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/TeensyControllerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/indicators.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/ControlWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/ClientController.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/rendering_wrappers/glfw_opengl3_wrapper.h",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/rendering_wrappers/glfw_vulkan_wrapper.h",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/standalone/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/source/gui_test.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/caen_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/all/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/standalone/CMakeLists.txt",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/file_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/caen_helper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/serial_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/implot_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/hardware_helpers/TeensyControllerInterface.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/CAENTabs.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/CAENDigitizerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/imgui_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/build/compile_commands.json",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/Calibration.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/armadillo_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/IndicatorWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/cmake/Dependencies.cmake",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/sipm_control_gui.sublime-project",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/README.md",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/armadillo_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/TeensyControllerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/caen_helper.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/GUI/IndicatorWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/rendering_wrappers/glfw_vulkan_wrapper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/hardware_helpers/Calibration.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/TeensyTabs.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/gui_windows/SiPMControlWindow.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/serial_helper.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/src/armadillo_helpers.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/hardware_helpers/SlowDAQInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/TeensyTabs.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/SiPMControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/IndicatorWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/ControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/sbcqueens-gui/gui_windows/CAENTabs.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/test/source/main.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/TeensyControllerInterface.cpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/file_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/indicators.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/GUI/SiPMControlWindow.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/GUIManager.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/CAENDigitizerInterface.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/implot_helpers.hpp",
		"/C/Users/Popcorn/Desktop/SiPMControlGUI/include/imgui_helpers.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/HardwareHelpers/ClientController.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/HardwareHelpers/Calibration.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/src/caen_helper.cpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/include/indicators.hpp",
		"/X/OneDrive - Queen's University/Research/Research - SIPMs - Queens/Project - SiPM Cooler Pulses/Software/SiPMControlGUI/cmake/Dependencies.cmake"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 122.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"getData",
			"_sipm_volt_sys",
			"constexpr",
			"total_ranks",
			"WriteBits",
			"setup_and_prepare",
			"_pfeiffer_file",
			"async_save",
			"_pfeiffer_file",
			"_logger",
			"CAENData",
			"_BMEs_file",
			"SiPMAcquisitionStates",
			"_BMEs_file",
			"_RTDs_file",
			"_pressures_file",
			"_peltiers_file",
			"_processing_evts",
			"Add",
			"add",
			"Add",
			"_saveinfo_file",
			"_pulse_file",
			"Add",
			"_saveinfo_file",
			"unique_ptr",
			"_saveinfo_file",
			"_acq_routine",
			"_vbd_routine",
			"_pressures_file",
			"_peltiers_file",
			"_BMEs_file",
			"add",
			"_BMEs_file",
			"_RTDs_file",
			"_peltiers_file",
			"_saveinfo_file",
			"CAENEvent",
			"caenEvent",
			"CAENEvent",
			"caen_event_to",
			"caen_",
			"GroupData",
			"write_register",
			"AcqMode",
			"GroupConfigs",
			"Port",
			"sipm_voltage_system_update",
			"_sipm_volt_sys",
			"ch",
			"gr_config",
			"ch_config",
			"get",
			"Get",
			"get",
			"gr_pair",
			"process_data_for_gui",
			"setup",
			" : 1",
			"uint8_t",
			"setup",
			"second",
			"GroupConfigs",
			"CAENGroupConfig",
			"acq_mask",
			"TriggerMask",
			"calculate_max_buffers",
			"MaxNumBuffers",
			"calculate_max_buffers",
			"read_register",
			"calculate_max_buffers",
			"ConnectionType",
			"TriggerPolarity",
			"SWTriggerMode",
			"EXTTriggerMode",
			"Combo",
			"ConnectionType",
			"ComboBox",
			"get_draw_function",
			"ComboBox",
			"ImGuiDataType",
			"InputText",
			"std::cout",
			"is_floating_point_v",
			"constexpr",
			");\n",
			"indicator",
			"NumGraphs",
			"NumYAxis",
			"ImPlotScale_",
			"ImPlotScale_SymLog",
			"ImPlotScale",
			"ImPlotAxisFlags_",
			"Plot",
			"Indicator",
			"CurrentIndex",
			"Size",
			"Start",
			"ControlSize",
			"ControlActiveColor",
			"ControlHoveredColor",
			"ControlColor",
			"std",
			"size_t",
			"fill",
			"inline",
			"Color",
			"GUIProducerKey",
			"closeFunc",
			"TeensyControllerKey",
			"TokenType",
			"__draw_similar_begin",
			"control",
			"indicator",
			"retrieve_bmes",
			"LatestAcquiredWaveforms",
			"TriggeredWaveforms",
			"_processing_evts",
			";\n",
			"_processing_evts",
			"TriggeredWaveforms",
			"SavedWaveforms",
			"_latest_num_events",
			"TriggeredWaveforms",
			"SavedWaveforms",
			"_latest_num_events",
			"            _indicator_sender(IndicatorNames::CALCULATING_GAIN, true);",
			"_analysis"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			" ",
			"\\n/MuonVeto/Gun/AddEnergyPhiPoint ",
			"e",
			"hh>",
			"<G",
			"static const",
			"statis const"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionManager.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30038,
						"regions":
						{
						},
						"selection":
						[
							[
								12132,
								12132
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/SiPMAcquisitionManager.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5793.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/sbcqueens-gui/sipm_helpers/SBCBinaryFormat.hpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17905,
						"regions":
						{
						},
						"selection":
						[
							[
								2912,
								2912
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/sipm_helpers/SBCBinaryFormat.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2916.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/sbcqueens-gui/file_helpers.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7258,
						"regions":
						{
						},
						"selection":
						[
							[
								2422,
								2238
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/file_helpers.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1131.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21169,
						"regions":
						{
						},
						"selection":
						[
							[
								4070,
								4070
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/hardware_helpers/GUIManager.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1791.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 4,
					"file": "include/sbcqueens-gui/caen_helper.hpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55109,
						"regions":
						{
						},
						"selection":
						[
							[
								13666,
								13666
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/include/sbcqueens-gui/caen_helper.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6779.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/caen_helper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42507,
						"regions":
						{
						},
						"selection":
						[
							[
								35029,
								35039
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/sbc-queens-linux/MyPrograms/SBC-SIPM-Testing-Software/src/caen_helper.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20655.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 174.0
	},
	"output.diagnostics":
	{
		"height": 187.0
	},
	"output.exec":
	{
		"height": 254.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 138.0
	},
	"output.language servers":
	{
		"height": 0.0
	},
	"output.latextools":
	{
		"height": 138.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"pinned_build_system": "Build GUI Debug",
	"project": "sipm_control_gui.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 246.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
